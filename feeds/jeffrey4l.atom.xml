<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Xcodest</title><link href="http://xcodest.me/" rel="alternate"></link><link href="http://xcodest.me/feeds/jeffrey4l.atom.xml" rel="self"></link><id>http://xcodest.me/</id><updated>2016-11-14T00:00:00+08:00</updated><entry><title>CentOS 根分区自动扩展</title><link href="http://xcodest.me/centos-root-partition-auto-grow.html" rel="alternate"></link><updated>2016-11-14T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2016-11-14:centos-root-partition-auto-grow.html</id><summary type="html">&lt;p&gt;CentOS 5 太老了，完全不支持。&lt;/p&gt;
&lt;p&gt;CentOS 6 要实现分区自动扩展，要安装以下三个包 &lt;/p&gt;
&lt;pre class="literal-block"&gt;
yum install cloud-init cloud-utils-growpart dracut-modules-growroot
# 生新生成 initramfs
dracut -f
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;dracut&lt;/tt&gt; 把 &lt;tt class="docutils literal"&gt;growroot&lt;/tt&gt; 的脚本封装到 &lt;tt class="docutils literal"&gt;initramfs&lt;/tt&gt; 里面。 把系统启动时，
&lt;tt class="docutils literal"&gt;initramfs&lt;/tt&gt; 利用 &lt;tt class="docutils literal"&gt;growpart&lt;/tt&gt; 命令把根分区进行扩展。然后启动真正的
&lt;tt class="docutils literal"&gt;kernel&lt;/tt&gt;, 之后 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cloud-init&lt;/span&gt;&lt;/tt&gt; 服务会自动把文件系统进行扩展。&lt;/p&gt;
&lt;p&gt; 之所以使用 &lt;tt class="docutils literal"&gt;initramfs&lt;/tt&gt; 这种方式，原因 [0]：&lt;/p&gt;
&lt;blockquote&gt;
Growpart called by cloud-init only works for kernels &amp;gt;3.8. Only newer
kernels support changing the partition size of a mounted partition. When
using an older kernel the resizing of the root partition happens in the
initrd stage before the root partition is mounted and the subsequent
cloud-init growpart run is a no-op.&lt;/blockquote&gt;
&lt;p&gt;CentOS 7 使用的是 3.10 ( &amp;gt; 3.8 ) 的内核，所以并不需要 dracut-modules-growroot
包 ( 源里面也并没有这个包 )。 只安装以下两个包就可以了。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
yum install cloud-init cloud-utils-growpart
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;[0] &lt;a class="reference external" href="http://openstack.openstack.narkive.com/opyLuPqC/centos-6-5-cloud-init-growpart-resizefs-does-not-work-on-first-boot"&gt;http://openstack.openstack.narkive.com/opyLuPqC/centos-6-5-cloud-init-growpart-resizefs-does-not-work-on-first-boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Docker init 进程</title><link href="http://xcodest.me/docker-init-process.html" rel="alternate"></link><updated>2016-11-07T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2016-11-07:docker-init-process.html</id><summary type="html">&lt;p&gt; 应用容器化后，重启容器的时候，经常会很慢，而且 docker daemon 日志中经常会抛出以
下错误 &lt;/p&gt;
&lt;pre class="literal-block"&gt;
dockerd[559]: msg=&amp;quot;Container 5054f failed to exit within 10 seconds of
signal 15 - using the force&amp;quot;
&lt;/pre&gt;
&lt;p&gt; 默认的的 signal 15 根本就没有使其退出，最后还是 10 秒超时后强制退出 (kill) 的。而
且有时还会出现大量僵尸进程 &lt;/p&gt;
&lt;p&gt; 这可不是一个好现象。本文解释其原因及解决方法。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt; 背景知识 &lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt; 信号 &lt;/h3&gt;
&lt;p&gt; 这个是 Linux 最常见一个概念，一般杀死进程时都会用到 &lt;tt class="docutils literal"&gt;kill &amp;lt;pid&amp;gt;&lt;/tt&gt; 。 不同的信
号有不同的默认行为。用户可以注册自己的信号处理函数，来覆盖掉默认行为。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt; 僵尸进程 &lt;/h3&gt;
&lt;p&gt; 僵尸进程是终止运行的进程，为什么它们是有害的 ?&lt;/p&gt;
&lt;p&gt; 虽然应用申请的内存已经释放了，但是你依然能通过 &lt;tt class="docutils literal"&gt;ps&lt;/tt&gt; 看到它。这是因为有一些内
核资源没有释放。下面是 Linux &lt;tt class="docutils literal"&gt;waitpid&lt;/tt&gt; 的 man page:&lt;/p&gt;
&lt;blockquote&gt;
As long as a zombie is not removed from the system via a wait, it will
consume a slot in the kernel process table, and if this table fills, it
will not be possible to create further processes.&amp;quot;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt; 容器化后的问题 &lt;/h2&gt;
&lt;p&gt; 容器化后，由于单容器单进程，已经没有传统意义上的 init 进程了。应用进程直接占用
了 pid 1 的进程号。从而导致以下两个问题。&lt;/p&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt; 进程不能正常终止 &lt;/h3&gt;
&lt;p&gt;Linux 内核中会对 pid 1 进程发送特殊的信号量。&lt;/p&gt;
&lt;p&gt; 一般情况下，当给一个进程发送信号时，内核会先检查是否有用户定义的处理函数，如果
没有，就会回退到默认行为。例如使用 SIGTERM 直接杀死进程。然而，如果进程的 PID
是 1, 内核会特殊对待它。如果没有没有注册用户处理函数，内核不会回退到默认行为，
什么也不做。换句话说，如果你的进程没有处理信号的函数，给他发送 &lt;tt class="docutils literal"&gt;SIGTERM&lt;/tt&gt; 会一
点效果也没有。&lt;/p&gt;
&lt;p&gt; 常见的使用是 docker run my-container script. 给 &lt;tt class="docutils literal"&gt;docker run&lt;/tt&gt; 进程发送
&lt;tt class="docutils literal"&gt;SIGTERM&lt;/tt&gt; 信号会杀掉 &lt;tt class="docutils literal"&gt;docker run&lt;/tt&gt; 进程，但是容器还在后台运行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt; 孤儿僵尸进程不能正常回收 &lt;/h3&gt;
&lt;p&gt; 当进程退出时，它会变成僵尸进程，直到它的父进程调用 &lt;tt class="docutils literal"&gt;wait()&lt;/tt&gt; ( 或其变种 ) 的系
统调用。process table 里面会把它的标记为 &lt;tt class="docutils literal"&gt;defunct&lt;/tt&gt; 状态。一般情况下，父进程应
该立即调用 &lt;tt class="docutils literal"&gt;wait()&lt;/tt&gt;, 以防僵尸进程时间过长。&lt;/p&gt;
&lt;p&gt; 如果父进程在子进程之前退出，子进程会变成孤儿进程 , 它的父进程会变成 PID 1。因此
，init 进程就要对这些进程负责，并在适当的时候调用 &lt;tt class="docutils literal"&gt;wait()&lt;/tt&gt; 方法。&lt;/p&gt;
&lt;p&gt; 但是，通常情况下，大部分进程不会处理偶然依附在自己进程上的随机子进程，所以在容器
中，会出现许多僵尸进程。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt; 解决方案 &lt;/h2&gt;
&lt;p&gt; 让所有的应用能正确的处理以上的情况，不太现实。好在现在有很多解决方案，例如
dumb-init [0] 。他像是一个小型 init 服务，他启动一个子进程并转发所有接收到的信
号量给子进程。而且不需要修改应用代码。&lt;/p&gt;
&lt;p&gt; 此时你的应用进程已经不是 pid 1 了，所以已经没有上面提到的问题。而且 dumb-init
也会转发所有的信号给子进程，应用的形为和在没有 dumb-init 时是一样的。如果应用进
程死掉了，dumb-init 进程也会死掉，并会清理所有其它的子进程。&lt;/p&gt;
&lt;p&gt; 使用方法如下 , 在 Dockerfile 里面加上：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# install dumb-init
RUN wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64
RUN chmod +x /usr/local/bin/dumb-init

# Runs &amp;quot;/usr/bin/dumb-init -- /my/script --with --args&amp;quot;
ENTRYPOINT [&amp;quot;/usr/bin/dumb-init&amp;quot;, &amp;quot;--&amp;quot;]
CMD [&amp;quot;/my/script&amp;quot;, &amp;quot;--with&amp;quot;, &amp;quot;--args&amp;quot;]
&lt;/pre&gt;
&lt;p&gt; 类似的方案 tini [1], pidunu[3]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kolla"&gt;
&lt;h2&gt;Kolla 相关 &lt;/h2&gt;
&lt;p&gt;Kolla 最近已经发布了 newton 版本的 release 。 已经加上了 dumb-init 的解决方案。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt; 参考资料 &lt;/h2&gt;
&lt;p&gt;[0] &lt;a class="reference external" href="https://github.com/Yelp/dumb-init"&gt;https://github.com/Yelp/dumb-init&lt;/a&gt;
[1] &lt;a class="reference external" href="https://github.com/krallin/tini"&gt;https://github.com/krallin/tini&lt;/a&gt;
[2] &lt;a class="reference external" href="https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem"&gt;https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem&lt;/a&gt;
[3] &lt;a class="reference external" href="https://github.com/rciorba/pidunu"&gt;https://github.com/rciorba/pidunu&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Reset Password in Systemd</title><link href="http://xcodest.me/reset-password-in-systemd.html" rel="alternate"></link><updated>2016-08-28T10:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2016-08-28:reset-password-in-systemd.html</id><summary type="html">&lt;p&gt; 现在基本是用 ssh key 来登录系统了。之前可以直接在 GRUB 直接进单用户改密码。使用了 systemd 的系统，后已经不可以这么使用了。原因是 Systemd 的单用户模式使用了 &lt;tt class="docutils literal"&gt;/usr/sbin/sulogin&lt;/tt&gt; 这个 shell, 也必须输入密码才可以。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# /usr/lib/systemd/system/rescue.service
[Unit]
Description=Rescue Shell
Documentation=man:sulogin(8)
DefaultDependencies=no
Conflicts=shutdown.target
After=sysinit.target plymouth-start.service
Before=shutdown.target

[Service]
Environment=HOME=/root
WorkingDirectory=-/root
ExecStartPre=-/bin/plymouth --wait quit
ExecStartPre=-/bin/echo -e 'You are in rescue mode. After logging in, type &amp;quot;journalctl -xb&amp;quot; to view\\nsystem logs, &amp;quot;systemctl reboot&amp;quot; to reboot, &amp;quot;systemctl default&amp;quot; or ^D to\\nboot into default mode.'
ExecStart=-/bin/sh -c &amp;quot;/usr/bin/sulogin; /usr/bin/systemctl --job-mode=fail --no-block default&amp;quot;
Type=idle
StandardInput=tty-force
StandardOutput=inherit
StandardError=inherit
KillMode=process
IgnoreSIGPIPE=no
SendSIGHUP=yes
&lt;/pre&gt;
&lt;p&gt; 自 systemd 215 版本后，新加了一个 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;systemd.debug-shell&lt;/span&gt;&lt;/tt&gt; 的内核参数，内容如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# /usr/lib/systemd/system/debug-shell.service
[Unit]
Description=Early root shell on /dev/tty9 FOR DEBUGGING ONLY
Documentation=man:sushell(8)
DefaultDependencies=no
IgnoreOnIsolate=yes
ConditionPathExists=/dev/tty9

[Service]
Environment=TERM=linux
ExecStart=/bin/sh
Restart=always
RestartSec=0
StandardInput=tty
TTYPath=/dev/tty9
TTYReset=yes
TTYVHangup=yes
KillMode=process
IgnoreSIGPIPE=no
# bash ignores SIGTERM
KillSignal=SIGHUP

# Unset locale for the console getty since the console has problems
# displaying some internationalized messages.
Environment=LANG= LANGUAGE= LC_CTYPE= LC_NUMERIC= LC_TIME= LC_COLLATE= LC_MONETARY= LC_MESSAGES= LC_PAPER= LC_NAME= LC_ADDRESS= LC_TELEPHONE= LC_MEASUREMENT= LC_IDENTIFICATION=

[Install]
WantedBy=sysinit.target
&lt;/pre&gt;
&lt;p&gt; 可以看到，systemd 直接在 &lt;tt class="docutils literal"&gt;tty9&lt;/tt&gt; 上面开了一个 sh, 不用密码就可以登录。&lt;/p&gt;
&lt;p&gt; 使用方法很简单，在 GRUB 界面上，输入 &lt;tt class="docutils literal"&gt;e&lt;/tt&gt; 进入编辑模式，找到 &lt;tt class="docutils literal"&gt;linux16&lt;/tt&gt; 那一行，在后面加入 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;systemd.debug-shell&lt;/span&gt;&lt;/tt&gt; 就可以了。之后 &lt;tt class="docutils literal"&gt;Ctrl + x&lt;/tt&gt; 继续启动就可以了。启动完成后，&lt;tt class="docutils literal"&gt;Ctrl + Alt + F9&lt;/tt&gt; 进入 &lt;tt class="docutils literal"&gt;tty9&lt;/tt&gt;， 就可以欢快的改密码了 &lt;/p&gt;
</summary></entry><entry><title>Code Review 神器 -- Gertty</title><link href="http://xcodest.me/effective-code-review-tool-gertty.html" rel="alternate"></link><updated>2016-04-11T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2016-04-11:effective-code-review-tool-gertty.html</id><summary type="html">
&lt;p&gt; 现在很多项目都使用 Gerrit 做为代码 Review 工具。OpenStack 所有的项目就是放在 Gerrit 上的。Gerrit 提供了一个 Web 页面来做 Code Review。今天我介绍一个更加高效的工具来处理 Gerrit Review。它的名字叫 gertty。&lt;/p&gt;
&lt;p&gt;Gertty 的 OpenStack 下面的一个项目 &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;，官方的介绍是：Gertty is a console-based interface to the Gerrit Code Review system。就是一个基于终端的 Gerrit 代码 Review 工具。&lt;/p&gt;
&lt;p&gt; 相比较 Web 版本，它的优势体现在 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 工作流程 - Gertty 的界面设计和邮件、网络消息的设计很类似，很容易上手。而且它特别适合多个项目时处理大量 Review 请求。&lt;/li&gt;
&lt;li&gt; 离线使用 - Gertty 会把 Gerrit 上你订阅的项目的所有的数据同步到本地。包括 Git 仓库，所有的 Review 信息。你本地所有的 Review 操作也会同步到 Gertty。&lt;/li&gt;
&lt;li&gt; 速度 - 因为 Gertty 会把数据都同步到本地，你的操作也会存放到本地，之后在统一同步到服务器，所以速度是很快的。&lt;/li&gt;
&lt;li&gt; 方便 - Gertty 把所有的 Changes 都同步到了本地，你可以很方便的 checkout 到正在 Review 的代码 &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_1"&gt; 安装 &lt;/h1&gt;
&lt;p&gt;gertty 就是一个 Python 写的应用，所以安装很方便。可以从 pypi 安装，也可以从直接从源码安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install gertty
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 从源码安装 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/openstack/gertty.git
cd gertty
pip install .
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="_2"&gt; 配置 &lt;/h1&gt;
&lt;p&gt;Gertty 使用一个 YAML 格式的配置文件。可以从源码里找到一些例子 &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;。我们以 OpenStack 为例。&lt;/p&gt;
&lt;p&gt; 首先要选配置在 Gerrit 上面配置自己的 HTTP Passowrd。打开 https://review.openstack.org/#/settings/http-password , 去修改里面的 Password&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gerrit HTTP Password" class="img-responsive" src="images/openstack_gerrit_http_password.png"/&gt;&lt;/p&gt;
&lt;p&gt; 如果使用源码安装，请把把源码里的 &lt;code&gt;examples/openstack-gertty.yaml&lt;/code&gt; 文件拷贝到 &lt;code&gt;~/.gertty.yml&lt;/code&gt;，修改该文件内容如下 ( 主要是 servers 下面的内容 )，其它部分不用修改：&lt;/p&gt;
&lt;p&gt; 如果使用 pip 安装的，在 &lt;code&gt;/usr/local/share/gertty/examples/openstack-gertty.yaml&lt;/code&gt; 这个位置可以找到所需要的文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;servers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;openstack&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;url&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://review.openstack.org/&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;username&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Jeffrey4l&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;xxxx&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git-root&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 直接运行 &lt;code&gt;gertty&lt;/code&gt;, 看到如下欢迎界面。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gertty Welcome" class="img-responsive" src="images/gertty_welcome.png"/&gt;&lt;/p&gt;
&lt;p&gt; 如里面的说明，按 &lt;code&gt;F1&lt;/code&gt; 或 &lt;code&gt;?&lt;/code&gt; 进帮助， 我们按 &lt;code&gt;L&lt;/code&gt; 进项目列表，找到自己感兴趣的项目按 &lt;code&gt;s&lt;/code&gt; 进行订阅。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gertty Welcome" class="img-responsive" src="images/gertty_subscribe_project.png"/&gt;&lt;/p&gt;
&lt;p&gt; 按 &lt;code&gt;F2&lt;/code&gt; 可以看到自己的 changes&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gertty Welcome" class="img-responsive" src="images/gertty_my_opened_changes.png"/&gt;&lt;/p&gt;
&lt;p&gt; 按 &lt;code&gt;F3&lt;/code&gt; 可以看到需要自己 review 的代码 &lt;/p&gt;
&lt;p&gt;&lt;img alt="Gertty Welcome" class="img-responsive" src="images/gertty_incoming_changes.png"/&gt;&lt;/p&gt;
&lt;p&gt; 基中，高亮的是需要自己 review 的代码，灰色的是已经 review 过的。&lt;/p&gt;
&lt;p&gt; 选择一个进入后，能看到已经所有的 review 信息。包括 CI 的结果，评论，所有的 PatchSet。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gertty Review Code" class="img-responsive" src="images/gertty_review_changeset.png"/&gt;&lt;/p&gt;
&lt;p&gt; 再按 &lt;code&gt;d&lt;/code&gt;， 可以查看修改的 diff&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gerrty Code Diff" class="img-responsive" src="images/gertty_code_diff.png"/&gt;&lt;/p&gt;
&lt;p&gt; 在任何界面都可以按 &lt;code&gt;F1&lt;/code&gt; 或 &lt;code&gt;?&lt;/code&gt; 打开帮助，查看该界面下有哪些按键可以用。&lt;/p&gt;
&lt;h1 id="_3"&gt; 总结 &lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt; 由于 gertty 把所有数据都同步下来了，做 review 确实很快。&lt;/li&gt;
&lt;li&gt;gertty.yaml 配置文件里支持修改按键功能，如果觉得默认键位不舒服，可以进行修改，可定制性很高。更多的配置项信息可以看 &lt;code&gt;examples/reference-gertty.yml&lt;/code&gt; 文件里的内容 &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://github.com/openstack/gertty"&gt;https://github.com/openstack/gertty&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="https://github.com/openstack/gertty/tree/master/examples"&gt;https://github.com/openstack/gertty/tree/master/examples&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="CodeReview"></category></entry><entry><title>cloud-init 导致虚拟机启动太慢</title><link href="http://xcodest.me/cloud-init-cause-vm-boot-slow.html" rel="alternate"></link><updated>2016-04-10T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2016-04-10:cloud-init-cause-vm-boot-slow.html</id><summary type="html">
&lt;h1 id="_1"&gt; 问题 &lt;/h1&gt;
&lt;p&gt; 在一个准生产环境中，一直发现虚拟机启动太慢的问题，现像是虚拟机很早就能 ping 到，但是就是 ssh 不进去。要么报端口没有开启，要么就 Public Key 不对。整个过程大概要 2 分多钟才能直接 ssh 进去。&lt;/p&gt;
&lt;h1 id="_2"&gt; 背景知识 &lt;/h1&gt;
&lt;p&gt;cloud-init 这个服务是从 AWS 学来的。它安装在虚拟机中，在启动虚拟机时，做一些初始化工作。如：硬盘分区自动扩展，SSH Public Key 注入，用户创建等。用户甚至可以注入一些 shell 脚本到虚拟机中运行。在自动化方便启了很大的作用。Heat 的实现就依赖于 cloud-init 服务。&lt;/p&gt;
&lt;p&gt; 在 OpenStack 上，cloud-init 应该从 &lt;code&gt;http://169.254.169.254&lt;/code&gt; 去拿到所需要的信息。而这个服务是通过 iptables 转到了 neutron-metadata-agent 服务上 &lt;/p&gt;
&lt;h1 id="_3"&gt; 环境 &lt;/h1&gt;
&lt;p&gt; 使用 Kolla 安装的 OpenStack Mitaka 版本的多机环境，镜像使用的是 CentOS 7 和 Ubuntu 14.04, 均是从官方下载的。由于一些安全限制，虚拟机不能访问外网。&lt;/p&gt;
&lt;h1 id="_4"&gt; 调试 &lt;/h1&gt;
&lt;p&gt; 测试虚拟机用的 CentOS 7 系统，&lt;/p&gt;
&lt;p&gt; 首先看虚拟机的 console log, 发现如下信息 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Starting kdump:[  OK  ]
Starting cloud-init: Cloud-init v. 0.7.5 running 'init' at Wed, 30 Mar 2016 14:58:36 +0000. Up 40.68 seconds.
...
Starting cloud-init: Cloud-init v. 0.7.5 running 'modules:config' at Wed, 30 Mar 2016 14:59:59 +0000. Up 124.27 seconds.
Starting cloud-init: Cloud-init v. 0.7.5 running 'modules:final' at Wed, 30 Mar 2016 15:00:01 +0000. Up 126.22 seconds.
...
Cloud-init v. 0.7.5 finished at Wed, 30 Mar 2016 15:00:01 +0000. Datasource DataSourceOpenStack [net,ver=2].  Up 126.41 seconds
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 发现 : cloud-init 服务从开始启动到最后完成，花了 80 多秒，大部分的时间都是花在了 init 环节上。按说是不应该的。&lt;/p&gt;
&lt;p&gt; 一开始我怀疑是硬盘分区自动扩展慢导致的，但把自动扩展关掉了也还是一样，时间基本没有变化。肯定是其它问题。&lt;/p&gt;
&lt;p&gt; 万事找日志，要找真正的原因，还是从日志找起。&lt;/p&gt;
&lt;p&gt; 在 &lt;code&gt;/var/log/&lt;/code&gt; 下找日志，只发现了少量日志。大概看了一个 cloud-init 的源代码，日志应该会有很多的才对。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; root root    &lt;span class="m"&gt;0&lt;/span&gt; Mar &lt;span class="m"&gt;30&lt;/span&gt; 14:58 cloud-init.log
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; root root 1.7K Mar &lt;span class="m"&gt;30&lt;/span&gt; 15:00 cloud-init-output.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 又尝试修改了 &lt;code&gt;cloud.cfg&lt;/code&gt; 的配置，把日志都都打印到特定文件，如下。但是结果还是一样，没有啥新日志信息。( 其时后来才发现，这个配置默认就存在，在 &lt;code&gt;/etc/cloud/cloud.cfg.d/&lt;/code&gt; 下面 )&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;all&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tee&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;/var/log/cloud-init-output.log'&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 联想到 CentOS 7 用的 systemd 管理器，试图从 systemd 里找日志。先找到了所有的 cloud-init 相关的服务 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ systemctl list-units &lt;span class="p"&gt;|&lt;/span&gt; grep cloud
cloud-config.service       Apply the settings specified in cloud-config
cloud-final.service        Execute cloud user/final scripts
cloud-init-local.service   Initial cloud-init job &lt;span class="o"&gt;(&lt;/span&gt;pre-networking&lt;span class="o"&gt;)&lt;/span&gt;
cloud-init.service         Initial cloud-init job &lt;span class="o"&gt;(&lt;/span&gt;metadata service crawler&lt;span class="o"&gt;)&lt;/span&gt;
cloud-config.target        Cloud-config availability
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 可以看到，cloud-init 安装的服务还是有多个的。不同的服务的启动时间点和所做的事情是不一样的。使用 &lt;code&gt;journalctl&lt;/code&gt; 挨个排查后，找到以下日志：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ journalctl -u cloud-init
...
Apr &lt;span class="m"&gt;03&lt;/span&gt; 13:19:33 cloud-init&lt;span class="o"&gt;[&lt;/span&gt;780&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;CLOUDINIT&lt;span class="o"&gt;]&lt;/span&gt; __init__.py&lt;span class="o"&gt;[&lt;/span&gt;DEBUG&lt;span class="o"&gt;]&lt;/span&gt;: Merging using located merger
Apr &lt;span class="m"&gt;03&lt;/span&gt; 13:21:13 cloud-init&lt;span class="o"&gt;[&lt;/span&gt;780&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;CLOUDINIT&lt;span class="o"&gt;]&lt;/span&gt; DataSourceGCE.py&lt;span class="o"&gt;[&lt;/span&gt;DEBUG&lt;span class="o"&gt;]&lt;/span&gt;: http://metadata.google.internal./computeMetadata/v1/ is not resolvable
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 注意前面的时间点，这两行日志间差了 60 多秒，而且后面是一个错误，明显是在等一个超时，时间是花在这的。至此原因找到了。&lt;/p&gt;
&lt;h1 id="_5"&gt; 原因分析 &lt;/h1&gt;
&lt;p&gt;cloud-init 是一个通用程序，能兼容多个云环境。他会从多个数据源里去读 Metadata 数据。其默认的顺序中，GoogleGCE 在 OpenStack 之前，而 GoogleGCE 的源里面，会访问一个 http://metadata.google.internal. 的网址，加上虚拟机不能访问外网，程序会卡在这里，直到超时。才会继续测试 OpenStack 的源是否可用。&lt;/p&gt;
&lt;h1 id="_6"&gt; 解决方法 &lt;/h1&gt;
&lt;p&gt; 尽量不要直接使用官方的源，而是自己制作，尤其是 cloud-init 的配置项。要手动修改掉其默认的数据源，以避免以上情况的发生。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# /etc/cloud/cloud.cfg&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;datasource_list&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ConfigDrive'&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'OpenStack'&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Ec2'&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="_7"&gt; 总结 &lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;cloud-init 的配置是通用配置，默认情况下适用于多种云环境。如 OpenStack， GoogleGCE 等 &lt;/li&gt;
&lt;li&gt; 日志很重要，很方便进行程序分析 &lt;/li&gt;
&lt;li&gt; 镜像还是要自己制作比较好，最好能利用工具做成自动化的。&lt;/li&gt;
&lt;li&gt; 在使用 systemd 服务的系统里，有一部分日志会打到 systemd 里面。需要使用 &lt;code&gt;journalctl&lt;/code&gt; 来进行查看 &lt;/li&gt;
&lt;li&gt; 在第二天的一个培训环境中，我发现有同样的问题，就此看来，这个问题还是很常见并很容易触发。如果有条件，还是修复了得好，要不太影响用户体验了。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="OpenStack"></category></entry><entry><title>OpenStack Kolla AIO Install</title><link href="http://xcodest.me/kolla-aio-install.html" rel="alternate"></link><updated>2016-02-24T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2016-02-24:kolla-aio-install.html</id><summary type="html">
&lt;p&gt;Kolla 依赖于以下几个主要组件 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ansible &amp;gt; 1.9.4, &amp;lt; 2.0&lt;/li&gt;
&lt;li&gt;Docker &amp;gt; 1.10.0&lt;/li&gt;
&lt;li&gt;docker-py &amp;gt; 1.7.0&lt;/li&gt;
&lt;li&gt;python jinja2 &amp;gt; 2.6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 几点说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 机器使用的是 kvm 虚拟机进行的测试。配置上使用 4G RAM, 2 CPU, 2 网卡的配置 &lt;/li&gt;
&lt;li&gt; 由于使用了 Docker，所以对于底层系统并还没什么要求，本文使用 CentOS 7 系统。&lt;/li&gt;
&lt;li&gt;Kolla master 分支上使用的是 RDO master 上的源，打包极不稳定，时常会有 Bug 出现。所以本文使用的是 CentOS + 源码的安装方式 &lt;/li&gt;
&lt;li&gt; 由于国内网络原因，一些国外的源 ( 这些源还没有国内镜像 ) 会相当慢，所以 build docker image 时会很慢，推荐使用 VPN&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_1"&gt; 安装 &lt;/h1&gt;
&lt;p&gt; 安装好操作系统后，依次进行如下配置 &lt;/p&gt;
&lt;h2 id="_2"&gt; 源 &lt;/h2&gt;
&lt;p&gt; 加入 Docker 的源 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;sudo tee /etc/yum.repos.d/docker.repo &amp;lt;&amp;lt; 'EOF'&lt;/span&gt;
&lt;span class="x"&gt;[dockerrepo]&lt;/span&gt;
&lt;span class="x"&gt;name=Docker Repository&lt;/span&gt;
&lt;span class="x"&gt;baseurl=https://yum.dockerproject.org/repo/main/centos/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;releasever&lt;/span&gt;&lt;span class="x"&gt;/&lt;/span&gt;
&lt;span class="x"&gt;enabled=1&lt;/span&gt;
&lt;span class="x"&gt;gpgcheck=1&lt;/span&gt;
&lt;span class="x"&gt;gpgkey=https://yum.dockerproject.org/gpg&lt;/span&gt;
&lt;span class="x"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 加入 EPEL 源 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install -y epel-release
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="kolla"&gt; 安装 Kolla 所需依赖 &lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install -y ansible docker-engine git gcc python-setuptools
easy_install -U pip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker 现在使用了 shared mount 功能，默认没有打开，需要手动修改 Docker 启动文件 &lt;code&gt;/usr/lib/systemd/system/docker.service&lt;/code&gt; 的 MountFlags&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -i 's/MountFlags.*/MountFlags=shared/' /usr/lib/systemd/system/docker.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 启动 Docker 服务 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl daemon-reload
systemctl enable docker
systemctl start docker
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="kolla_1"&gt; 下载 Kolla 代码并安装依赖 &lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/openstack/kolla.git
cd kolla
pip install -r requirements.txt -r test-requirements.txt tox
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="build-docker-image"&gt;Build Docker Image&lt;/h1&gt;
&lt;p&gt; 以下如果没有特别说明，所有的操作都是在 Kolla 项目的目录里进行 &lt;/p&gt;
&lt;p&gt; 首先要先生成并修改配置文件 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tox -e genconfig
cp -rv etc/kolla /etc/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 然后修改 &lt;code&gt;/etc/kolla/kolla-build.conf&lt;/code&gt; 文件，它是用来控制 kolla build 过程的。修改后，其主要内容如下 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[DEFAULT]&lt;/span&gt;
&lt;span class="na"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;centos&lt;/span&gt;
&lt;span class="na"&gt;install_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;soruce&lt;/span&gt;
&lt;span class="na"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;lokolla&lt;/span&gt;
&lt;span class="na"&gt;push&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 接下来就是进行漫长的 build, 这个过程主要依赖机器性能和网速。如果快的话，20 多分钟就完成。如果有问题的话，会很久。不过依赖于 Docker Build 的 Cache 功能，就算重跑的话，之前已经 Build 好的也会很快完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./tool/build.py -p default
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 参数中的 &lt;code&gt;-p default&lt;/code&gt; 是指定了只 build 主要的 image, 包括 : mariadb, rabbitmq, cinder, ceilometer, glance, heat, horizon, keystone, neutron, nova, swift 等 . 这些可以只生成的 &lt;code&gt;kolla-build.conf&lt;/code&gt; 里找到。&lt;/p&gt;
&lt;p&gt; 如果 Build 完成之后，使用 &lt;code&gt;docker images&lt;/code&gt; 能看到所有已经 build 好的镜像。&lt;/p&gt;
&lt;h1 id="deploy"&gt;Deploy&lt;/h1&gt;
&lt;p&gt; 依然是先修改配置文件，与 Deploy 相关的主要是两个配置文件 &lt;code&gt;/etc/kolla/passwords.yml&lt;/code&gt; 和 &lt;code&gt;/etc/kolla/globals.yml&lt;/code&gt;。他们为 ansible 提供一些变量的设定。主要需要修改的是 &lt;code&gt;globals.yml&lt;/code&gt; 文件。修改后，其主要内容为 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;config_strategy&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"COPY_ALWAYS"&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kolla_base_distro&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"centos"&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kolla_install_type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"source"&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kolla_internal_address&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"10.2.0.254"&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;network_interface&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"eth0"&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;neutron_external_interface&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"eth1"&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openstack_logging_debug&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"true"&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;enable_cinder&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"no"&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;enable_heat&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"no"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;kolla 使用一个名为 &lt;code&gt;kolla-ansible&lt;/code&gt; 的封装脚本， 并提供以下几个命令 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./tools/kolla-ansible -h
Usage: ./tools/kolla-ansible COMMAND [options]

Options:
    --inventory, -i &amp;lt;inventory_path&amp;gt; Specify path to ansible inventory file
    --playbook, -p &amp;lt;playbook_path&amp;gt;   Specify path to ansible playbook file
    --keyfile, -k &amp;lt;key_file&amp;gt;         Specify path to ansible vault keyfile
    --help, -h                       Show this usage information
    --tags, -t &amp;lt;tags&amp;gt;                Only run plays and tasks tagged with these values

Commands:
    prechecks    Do pre-deployment checks for hosts
    deploy       Deploy and start all kolla containers
    post-deploy  Do post deploy on deploy node
    pull         Pull all images for containers (only pulls, no runnnig container changes)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 可以使用 &lt;code&gt;./tools/kolla-ansible prechecks&lt;/code&gt; 来检查一个机器是否满足安装条件。&lt;/p&gt;
&lt;p&gt; 使用 &lt;code&gt;./tools/kolla-ansible deploy&lt;/code&gt; 来开始正式安装。安装会很快，我机器上，几分钟就安装完成了。&lt;/p&gt;
&lt;p&gt; 最后，使用 &lt;code&gt;./tools/kolla-ansible post-deploy&lt;/code&gt; 来生成 &lt;code&gt;/etc/kolla/admin-openrc.sh&lt;/code&gt; 文件用来加载认证变量。&lt;/p&gt;
&lt;h1 id="_3"&gt; 查看安装后的状态 &lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;IMAGE                                                  COMMAND                 NAMES
lokolla/centos-source-keystone:2.0.0                   "kolla_start"           keystone
lokolla/centos-source-horizon:2.0.0                    "kolla_start"           horizon
lokolla/centos-source-neutron-metadata-agent:2.0.0     "kolla_start"           neutron_metadata_agent
lokolla/centos-source-neutron-l3-agent:2.0.0           "kolla_start"           neutron_l3_agent
lokolla/centos-source-neutron-dhcp-agent:2.0.0         "kolla_start"           neutron_dhcp_agent
lokolla/centos-source-neutron-openvswitch-agent:2.0.0  "kolla_start"           neutron_openvswitch_agent
lokolla/centos-source-neutron-server:2.0.0             "kolla_start"           neutron_server
lokolla/centos-source-openvswitch-vswitchd:2.0.0       "kolla_start"           openvswitch_vswitchd
lokolla/centos-source-openvswitch-db-server:2.0.0      "kolla_start"           openvswitch_db
lokolla/centos-source-nova-compute:2.0.0               "kolla_start"           nova_compute
lokolla/centos-source-nova-libvirt:2.0.0               "kolla_start"           nova_libvirt
lokolla/centos-source-nova-conductor:2.0.0             "kolla_start"           nova_conductor
lokolla/centos-source-nova-scheduler:2.0.0             "kolla_start"           nova_scheduler
lokolla/centos-source-nova-novncproxy:2.0.0            "kolla_start"           nova_novncproxy
lokolla/centos-source-nova-consoleauth:2.0.0           "kolla_start"           nova_consoleauth
lokolla/centos-source-nova-api:2.0.0                   "kolla_start"           nova_api
lokolla/centos-source-glance-api:2.0.0                 "kolla_start"           glance_api
lokolla/centos-source-glance-registry:2.0.0            "kolla_start"           glance_registry
lokolla/centos-source-rabbitmq:2.0.0                   "kolla_start"           rabbitmq
lokolla/centos-source-mariadb:2.0.0                    "kolla_start"           mariadb
lokolla/centos-source-memcached:2.0.0                  "kolla_start"           memcached
lokolla/centos-source-keepalived:2.0.0                 "kolla_start"           keepalived
lokolla/centos-source-haproxy:2.0.0                    "kolla_start"           haproxy
lokolla/centos-source-kolla-toolbox:2.0.0              "/bin/sleep infinity"   kolla_toolbox
lokolla/centos-source-heka:2.0.0                       "kolla_start"           heka
lokolla/centos-source-rsyslog:2.0.0                    "kolla_start"           rsyslog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 为了显示好看，我去掉了一些无关的列。通过上面，可以看出 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 多数 container 里是由 kolla_start 这个脚本启动起来的 &lt;/li&gt;
&lt;li&gt; 由于 kolla 使用的是 &lt;code&gt;--net=host&lt;/code&gt; 网络，所以没有必要做端口映射 &lt;/li&gt;
&lt;li&gt; 每个模块拆分成了多个 container, 如 nova 被拆分成了 nova_api, nova_libvirt, nova_conductor, nova_novncproxy, nova_compute 等多个 container。很好的遵守了一个容器一个进程的原则。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Kolla"></category><category term="OpenStack"></category></entry><entry><title>Kolla Mitaka Midcycle Discuss</title><link href="http://xcodest.me/kolla-mitaka-midcycle-discuss.html" rel="alternate"></link><updated>2016-02-16T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2016-02-16:kolla-mitaka-midcycle-discuss.html</id><summary type="html">
&lt;p&gt;2016 年 2 月 9 日 -10 日，Kolla Team 举办了 Mitaka 的中期会议，对遇到的问题、解决的方法及接下来的工作内容做了深入讨论。&lt;/p&gt;
&lt;h1 id="_1"&gt; 讨论的优先级安排 &lt;/h1&gt;
&lt;p&gt; 首先对本次讨论进行了优先级安排 &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upgrades： 这是现在的重中之重。如何能对现有的 Kolla 进行平滑的升级。包括 OpenStack 组件和基础服务组件 ( 如 MariaDB 等 )。&lt;/li&gt;
&lt;li&gt;diagnostics/logging: 主要是指 ELK。&lt;/li&gt;
&lt;li&gt;stability of deployment&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;backwards compatibility&lt;/li&gt;
&lt;li&gt;selinux&lt;/li&gt;
&lt;li&gt;kolla-ansible split&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upgrade"&gt;Upgrade&lt;/h1&gt;
&lt;p&gt; 升级主要涉及到两部分。相关的 BP 在这里 &lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 是 OpenStack 的各个组件 &lt;/li&gt;
&lt;li&gt; 是一些基础服务组件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="openstack"&gt;OpenStack 组件 &lt;/h2&gt;
&lt;p&gt; 由于 OpenStack 各个组件的结构基本相同，都是有 DB, API, Scheduler 等几个部分构成。所以这里的升级要简单一些，而且已经基本完成了编码工作，不过需要大量的测试来保证升级的可靠性 &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2 id="_2"&gt; 基础服务组件 &lt;/h2&gt;
&lt;p&gt; 由于各个组件的升级方式并不同，同一个组件不同版本间，可能也不相同。所以这部分相比较来说要困难的多。讨论中对各个组件进行了逐一讨论。包括升级的方式，有可能造成的影响等。详细信息见 &lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h1 id="diagnosticslogging"&gt;Diagnostics/Logging&lt;/h1&gt;
&lt;h1 id="security"&gt;Security&lt;/h1&gt;
&lt;p&gt; 安全也是很重要的事情，Team 两次讨论了这个问题 &lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:8"&gt;&lt;a class="footnote-ref" href="#fn:8" rel="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt; 在各个模块之前开启 SSL 功能 &lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;。当然默认是通过配置开启的。这样使 OpenStack 运行在一个更加安全的环境中。这个功能期望是在 Mitaka-3 中完成。&lt;/p&gt;
&lt;p&gt; 容器中的安全 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 使用非 root 用户运行服务 &lt;/li&gt;
&lt;li&gt;Container 内，配置文件是否能被修改 &lt;/li&gt;
&lt;li&gt;rootwrap 不应该能修改 &lt;/li&gt;
&lt;li&gt; 开启 SELinux &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="backport"&gt;Backport&lt;/h1&gt;
&lt;p&gt;Liberty 是 Kolla Release 的第一个版本。而在现在的 Master 分支中，已经有了大量的新功能。Team 讨论了 Backport 的原因和意义 &lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt; 最主要的原因 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ansible 的 docker 模块有 bug, 导致 ansible 与 1.8.2 以上的 docker 版本不兼容 &lt;/li&gt;
&lt;li&gt;docker 1.9 后的 named volume 功能很好的解决了 &lt;ol&gt;
&lt;li&gt; 可能出现在数据丢失。在使用 data container 时，如果 Base Image 发生改变，data container 也会被重新创建，从而造成数据丢失。&lt;/li&gt;
&lt;li&gt; 可能造成短时间的网络不可用。原因也是 data container 里面创建的 namespace 会被删除。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 解决方法有四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 直接把 stable/liberty 分支移动到 master 的位置。但是个人感觉不靠谱。&lt;/li&gt;
&lt;li&gt; 把所有的 commmit squash 后提交到 stable/liberty 分支上 &lt;/li&gt;
&lt;li&gt;stable/liberty 和 master 做一次 merge。&lt;/li&gt;
&lt;li&gt; 只 backport kolla_docker module&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 现在看来，应该会采取方法 4。&lt;/p&gt;
&lt;h1 id="kolla-code-sharing"&gt;kolla code sharing&lt;/h1&gt;
&lt;p&gt; 现在 Kolla 相关的项目有两个 https://github.com/openstack/kolla 和 https://github.com/openstack/kolla-mesos 。将来还会分拆出一个 kolla-ansible 项目来。现在， 单这两个项目下就有很多的重复代码，导致做了许多 copy, paster 的工作。这个 topic&lt;sup id="fnref:9"&gt;&lt;a class="footnote-ref" href="#fn:9" rel="footnote"&gt;9&lt;/a&gt;&lt;/sup&gt; 就是来解决这个问题的。&lt;/p&gt;
&lt;p&gt; 重复的东西 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extend_start.sh 在两个仓库中有很多重复的 &lt;/li&gt;
&lt;li&gt;kolla_docker 等 ansible 模块 &lt;/li&gt;
&lt;li&gt; 很多 config 里面的定义 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 可能的解决方法包括 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 定期的把 &lt;code&gt;&amp;lt;kolla&amp;gt;/ansible&lt;/code&gt; 下的模板复制到 kolla-mesos 中 &lt;/li&gt;
&lt;li&gt; 两连都存在副本，定期进行双向的同步。&lt;/li&gt;
&lt;li&gt; 创新一个新的仓库包含一些共用的模板 &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="roadmap"&gt;Roadmap&lt;/h1&gt;
&lt;p&gt;Mitaka, Netron, Ocata， P 版本的功路线图 &lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;。你更期待什么功能呢 ?&lt;/p&gt;
&lt;h2 id="mitaka-3-roadmap"&gt;Mitaka-3 Roadmap&lt;/h2&gt;
&lt;p&gt;Mitaka 进入最后的阶段，还有一些重要功能在开发中，现在主要还有以下几点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;diagnostics&lt;/li&gt;
&lt;li&gt;reconfigure services on a redeploy&lt;/li&gt;
&lt;li&gt;infrastructure services upgrades such as mariadb&lt;/li&gt;
&lt;li&gt;migration path for data volumes&lt;/li&gt;
&lt;li&gt;functional tests in gate (boot a vm &amp;amp; ping test)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="newton-roadmap"&gt;Newton Roadmap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;voting gates&lt;/li&gt;
&lt;li&gt;jumbo frames MTU investigation&lt;/li&gt;
&lt;li&gt;kolla as replacement of devstack (bindmount sources etc)&lt;/li&gt;
&lt;li&gt;code dedupe between mesos/ansible (general templates)&lt;/li&gt;
&lt;li&gt;ansible 2.0+&lt;/li&gt;
&lt;li&gt;conditionalize docs&lt;/li&gt;
&lt;li&gt;selinux&lt;/li&gt;
&lt;li&gt;more functional tests in gates (mitaka will have boot an vm)&lt;/li&gt;
&lt;li&gt;documentation specifically operator guides&lt;/li&gt;
&lt;li&gt;network isolation documentation&lt;/li&gt;
&lt;li&gt;multinode gates&lt;/li&gt;
&lt;li&gt;mechanism to build/push stable images to dockerhub&lt;ul&gt;
&lt;li&gt;push per tag&lt;/li&gt;
&lt;li&gt;nightly push&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kolla-ansible split right at start of newton split the repos&lt;/li&gt;
&lt;li&gt;hot-reload of running config for openstack service&lt;/li&gt;
&lt;li&gt;Python API with no running services for managing Kolla&lt;/li&gt;
&lt;li&gt;BiFrost documentation and investigation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ocata-roadmap"&gt;Ocata Roadmap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;deploy full big tent (or develop plugin mechanism to deploy whatever) / maybe we could do a skeleton service&lt;/li&gt;
&lt;li&gt;kolla-saltstack, kolla-puppet investigation - may not even be needed when moving to Ansible 2.0&lt;/li&gt;
&lt;li&gt;horizon, neutron, and nova plugin support - this exists already? would like to do in Newton but not have bandwidth&lt;/li&gt;
&lt;li&gt;Monitoring&lt;/li&gt;
&lt;li&gt;Backup and Restore of OpenStack data&lt;/li&gt;
&lt;li&gt;Data caching (e.g. redis)&lt;/li&gt;
&lt;li&gt;kolla-kubernetes&lt;/li&gt;
&lt;li&gt;runc investigation&lt;/li&gt;
&lt;li&gt;rkt investigation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="p-roadmap"&gt;P Roadmap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;rollback support from upgrade&lt;/li&gt;
&lt;li&gt;canary deployment&lt;/li&gt;
&lt;li&gt;make Kolla operate optionally without net=host for upcoming kolla-mesos and kolla-kubernetes repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-priorities"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-priorities&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-upgrades"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-upgrades&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;a href="https://blueprints.launchpad.net/kolla?searchtext=upgrade"&gt;https://blueprints.launchpad.net/kolla?searchtext=upgrade&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-infrastructure-upgrades"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-infrastructure-upgrades&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-ssl"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-ssl&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-backport"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-backport&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-roadmap"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-roadmap&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:8"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-security"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-security&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:8" rev="footnote" title="Jump back to footnote 8 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:9"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-kolla-code-sharing"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-kolla-code-sharing&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:9" rev="footnote" title="Jump back to footnote 9 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Kolla"></category></entry><entry><title>iptables forward the vrrp packets issue</title><link href="http://xcodest.me/iptables-forward-the-vrrp-packets-issue.html" rel="alternate"></link><updated>2016-02-02T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2016-02-02:iptables-forward-the-vrrp-packets-issue.html</id><summary type="html">
&lt;p&gt;&lt;img alt=" 功夫熊猫 " class="img-responsive" src="images/kungfupanda.jpg"/&gt;&lt;/p&gt;
&lt;p&gt; 最近在整 Kolla 的多机部署，没有物理环境还是在虚拟机上搞。不过今天被一个 keepalived 的问题卡了将近一天的时间。倒也不是啥大问题，还是栽到了自己挖的坑里。&lt;/p&gt;
&lt;h1 id="_1"&gt; 问题 &lt;/h1&gt;
&lt;p&gt; 先说一下自己的环境，我使用了三台 kvm 虚拟机，每台两张网卡，一个用于上外网 (eth0 &lt;code&gt;10.2.0.0/24&lt;/code&gt;)，一个用于 neutron 的 tenant 网络使用 (eth1)。问题就出在 eth0 上面。eth0 是桥在了我手动创建的一个桥上 (br0), 为了上外网，我打开了 &lt;code&gt;ip_forward&lt;/code&gt;， 并加了一条 iptables 转发规则：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;iptables -t nat -A POSTROUTING -s 10.2.0.0/24 ! -d 10.2.0.0/24 -j MASQUERAE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 一般情况下是没有问题的，但是加了 &lt;code&gt;keepalived&lt;/code&gt; 就完了。vip 跑到了所有的机器上，感觉就是没有通讯上，或是选举有问题。重新核对了半天配置没有发现问题。由于 Kolla 里是用 docker 跑的 keepalived ，为了排除是 Docker 本身有问题，我还在虚拟机的系统上部署了 keepalived 的，还是同样的问题。&lt;/p&gt;
&lt;h1 id="_2"&gt; 原因 &lt;/h1&gt;
&lt;p&gt; 最后在一次偶然的抓包中发现，所有机器上抓到的 vrrp 的包源地址居然都是网关 (&lt;code&gt;10.2.0.1&lt;/code&gt;) 发出来的，这还能不出问题 ? &lt;/p&gt;
&lt;p&gt; 查了查 vrrp 包，原来是在四层协议上，和 tcp/udp 是并列的。再看一眼自己的 iptables ， 就知道是怎么回事了。后来把 iptables 改的明确了一些 , 只 SNAT tcp,udp 及 icmp 的协议，问题终于解决了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-A POSTROUTING -s 10.2.0.0/24 ! -d 10.2.0.0/24 -p tcp -j MASQUERADE
-A POSTROUTING -s 10.2.0.0/24 ! -d 10.2.0.0/24 -p udp -j MASQUERADE
-A POSTROUTING -s 10.2.0.0/24 ! -d 10.2.0.0/24 -p icmp -j MASQUERADE
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="_3"&gt; 教训 &lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;tcpdump 还是很有用的东西 &lt;/li&gt;
&lt;li&gt; 四层上的协议除了 tcp/udp 还是有很多的 &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers &lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="iptables"></category><category term="vrrp"></category></entry><entry><title>OpenStack Kolla 项目介绍</title><link href="http://xcodest.me/kolla-introduce.html" rel="alternate"></link><updated>2016-01-11T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2016-01-11:kolla-introduce.html</id><summary type="html">
&lt;h1 id="_1"&gt; 项目目标 &lt;/h1&gt;
&lt;p&gt;Kolla 提供了生产级别的 OpenStack Service Containers。基于社区的最佳实践，提供了
更好，更快，更可靠的 , 操作 OpenStack 的部署工具。&lt;/p&gt;
&lt;h1 id="_2"&gt; 解决的问题 &lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt; 平滑的升级 / 回滚 OpenStack&lt;/li&gt;
&lt;li&gt; 隔离 OpenStack 的不同组件的依赖环境。尤其是那些使用同一模块不同版本的情况。&lt;/li&gt;
&lt;li&gt; 保证环境的一致性。解决由于安装时间不同，造成的包版本不一致的情况。&lt;/li&gt;
&lt;li&gt; 支持多种安装源：源代码安装，CentOS binary 安装等。可以替代掉 devstack。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 其实这些问题只要是由 Docker 来解决的。这也是 Kolla 使用 Docker 的原因。&lt;/p&gt;
&lt;h1 id="_3"&gt; 架构 &lt;/h1&gt;
&lt;p&gt;kolla 代码在 &lt;a href="https://github.com/openstack/kolla"&gt;https://github.com/openstack/kolla&lt;/a&gt;。现在 Kolla 主要分成两个部分。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Docker Images Build &lt;/li&gt;
&lt;li&gt;Ansible 部署 ( 这部分将来会迁移到 kolla-ansible 项目 )&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="docker-image-build"&gt;Docker Image Build&lt;/h2&gt;
&lt;p&gt; 主要使用 Jinja2 模板生成 Dockerfile 文件。如果是源代码安装，还会把代码下载好。之后会通过 Docker-py 驱动 Docker 进行镜像构建。构建完成，还可以根据配置将镜像推送的指定的 Registry 服务器。&lt;/p&gt;
&lt;p&gt; 现在支持的不同的 Linux 发行版本 (Redhat 系和 Debian 系 ) 和不同的 OpenStack 安装包 ( 源代码和二进制包 )&lt;/p&gt;
&lt;p&gt; 下图是现在所有镜像的依赖关系。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kolla Image Dependency Tree" class="img-responsive" src="images/kolla/image-dependency-201512.png"/&gt;&lt;/p&gt;
&lt;h2 id="ansible"&gt;Ansible 部署 &lt;/h2&gt;
&lt;p&gt; 提供一个完整的 Ansible Playbook，来部署 Docker 的镜像。并提供 all-in-one 和
multihost 的环境 &lt;/p&gt;
&lt;h1 id="_4"&gt; 开发人员情况 &lt;/h1&gt;
&lt;p&gt; 以下是 Kolla 项目截至到 2016-01-20 日的 review, commit 情况 &lt;/p&gt;
&lt;p&gt;&lt;img alt="Kolla Review 20160120" class="img-responsive" src="images/kolla/kolla_review_stackalytics_20160120.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kolla Commit 20160120" class="img-responsive" src="images/kolla/kolla_commit_stackalytics_20160120.png"/&gt;&lt;/p&gt;
&lt;p&gt; 可以看出，主流的几大 OpenStack 厂商均贡献的大部分的代码。包括 Mirantis, RedHat, Oracle, Intel, 99Cloud, Cisco, Rakespace。&lt;/p&gt;
&lt;h1 id="_5"&gt; 近况 &lt;/h1&gt;
&lt;h2 id="201512"&gt;201512&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt; 废弃使用 Ansible 自带的 Docker module。使用自己实现的 docker 模块 &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, 并已经完成了所有 ansible roles 的改造。主要原因是：&lt;ol&gt;
&lt;li&gt; 官方 Docker module 有 bug&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, 在 docker 1.8.3 及以上的版本工作不正常 , 而且进展缓慢。而 Kolla 使用的 Docker 版本只能锁定在 1.8.2，不能进行升级。&lt;/li&gt;
&lt;li&gt;Ansible 使用的是 GPL，而 OpenStack 项目使用的 Apache License。不能直接修改 Ansible 的代码放到 Kolla 里使用。&lt;/li&gt;
&lt;li&gt; 不想受限制于官方功能开发。有些想用的功能 ( 比方说新加进去的 &lt;code&gt;common_option&lt;/code&gt;, 官方是不会增加的 )。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt; 使用 oslo.config 模块替代掉了原来的 argparser 代码 &lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;。并加上了使用 &lt;code&gt;oslo-config-generator&lt;/code&gt; 的功能自动生成配置文件。&lt;/li&gt;
&lt;li&gt; 完善 Ubuntu Binary Container 的安装 &lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;ul&gt;
&lt;li&gt; 由于 Ubuntu 并没有类似 RDO 的 relorean 源。倒是有一个 Mitaka Staging&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; 源，但是好久没有更新。所以社区之前一直没有加上这部分功能。现在虽然加上了，但是也是基于 Liberty 版本的。并不是 Master 上的代码。&lt;/li&gt;
&lt;li&gt; 另一方面，Ubuntu 方面也正在积极的解决这个问题 &lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;。相信不久就会有。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 升级的 playbook 基本完成来 &lt;sup id="fnref:8"&gt;&lt;a class="footnote-ref" href="#fn:8" rel="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_6"&gt; 使用到的技术 &lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Docker/LXC&lt;/li&gt;
&lt;li&gt;Ansible&lt;/li&gt;
&lt;li&gt;Python &lt;ul&gt;
&lt;li&gt;docker-py&lt;/li&gt;
&lt;li&gt;Jinja2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_7"&gt; 近期规划 &lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt; 拆分 ansible 部分到新的项目 kolla-ansible。kolla 项目只用来做 docker images build. 部署工作由 kolla-ansible, kolla-mesos&lt;sup id="fnref:9"&gt;&lt;a class="footnote-ref" href="#fn:9" rel="footnote"&gt;9&lt;/a&gt;&lt;/sup&gt; 等工具来实现。&lt;/li&gt;
&lt;li&gt; 如何进行平滑的 OpenStack 升级 &lt;/li&gt;
&lt;li&gt;ELK 的集成 &lt;/li&gt;
&lt;li&gt;Swift 自动化 &lt;/li&gt;
&lt;li&gt;Ceilometer Container&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.openstack.org/wiki/Kolla"&gt;Kolla Wiki Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://review.openstack.org/#/c/248812/"&gt;Add docker module in Kolla&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="https://github.com/ansible/ansible-modules-core/issues/2257"&gt;Docker 1.8.3 is broken under certain conditions&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;a href="https://review.openstack.org/#/c/260389/"&gt;use oslo.config instead of raw argparse.ArgumentParser&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;&lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2015-December/083089.html"&gt;Mail List: Adding Ubuntu Liberty to Kolla-Mitaka&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;&lt;a href="https://launchpad.net/~ubuntu-cloud-archive/+archive/ubuntu/mitaka-staging"&gt;Staging PPA for mitaka&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;&lt;a href="https://review.openstack.org/#/c/261957/"&gt;Gerrit: Base and openstack-base ubuntu binary containers&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;&lt;a href="https://blueprints.launchpad.net/kolla/+spec/binary-ubuntu"&gt;BP:Ubuntu binary containers&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:8"&gt;
&lt;p&gt;&lt;a href="https://review.openstack.org/#/c/257568/"&gt;Gerrit: Playbook for keystone upgrade&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:8" rev="footnote" title="Jump back to footnote 8 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:9"&gt;
&lt;p&gt;&lt;a href="https://github.com/openstack/kolla-mesos"&gt;kolla-mesos&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:9" rev="footnote" title="Jump back to footnote 9 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Kolla"></category><category term="OpenStack"></category></entry><entry><title>Get all the repo from OpenStack</title><link href="http://xcodest.me/get-all-repos-from-openstack.html" rel="alternate"></link><updated>2016-01-06T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2016-01-06:get-all-repos-from-openstack.html</id><summary type="html">&lt;p&gt;OpenStack 的源因为你我都知道的原因，一直不稳定，导致 devstack 时经常失败。特定写了个脚本，可以拿到所有的仓库地址，方便做本地的 mirror。&lt;/p&gt;
&lt;p&gt; 脚本在 gist&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; 上。&lt;/p&gt;
&lt;p&gt; 使用方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install PyGithub
python openstack_repo.py -u &amp;lt;github_username&amp;gt; -p &amp;lt;github_password&amp;gt; \
    -o repos.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 跑一次才发现，OpenStack 组下已经有了 600 多个项目。好多啊。&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/b6c36b9f74b743eb4c82.js?file=openstack_repos.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding:utf-8 -*-
import github
import argparse
import codecs
import logging


DESCRIPTION=u'''

获取 openstack 和 openstack-dev 下所有仓库的列表，输出格式为：

    组织名 仓库名 仓库地址

username 和 password 不是必须的。但是不填写时，会受到 Github Rate Limit[0].
有认证的访问限制是每小时5000次。没有认证的访问限制是每小时60次。

[0] https://developer.github.com/v3/#rate-limiting
'''

def main():
    parser = argparse.ArgumentParser(
        description=DESCRIPTION,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('-u', '--username',
                        help='Usename to connect github')
    parser.add_argument('-p', '--password',
                        help='Password to connect github')
    parser.add_argument('-o', '--output',
                        help='Outout file. Default is stdout')
    parser.add_argument('-O', '--organization',
                        default='openstack,openstack-dev',
                        help='Organization to crawl repos from github')
    parser.add_argument('-d', '--debug',
                        action='store_true',
                        help='Show debug message')
    parser.add_argument('-v', '--verbose',
                        action='store_true',
                        help='Show verbse message')

    conf = parser.parse_args()
    log_level = logging.WARNING
    if conf.verbose:
        log_level = logging.INFO
    if conf.debug:
        log_level = logging.DEBUG

    logging.basicConfig(level=log_level)
    log = logging.getLogger()
    
    gh = github.Github(conf.username, conf.password)

    repos = []
    for org in conf.organization.strip().split(','):
        organization = gh.get_organization(org)
        for repo in organization.get_repos():
            log.info('Get: %s %s %s', org, repo.name, repo.clone_url)
            repos.append((organization, repo))

    if conf.output:
        with codecs.open(conf.output, 'w', 'utf8') as output:
            for org, repo in repos:
                output.write('{} {} {}\n'.format(org.login,
                                               repo.name,
                                               repo.clone_url))
    else:
        for org, repo in repos:
            print('{} {} {}'.format(org.login,
                                    repo.name,
                                    repo.clone_url))

if __name__ == "__main__":
    main()&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;https://gist.github.com/jeffrey4l/b6c36b9f74b743eb4c82&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="OpenStach Python"></category></entry><entry><title>Ansible Tower Usage</title><link href="http://xcodest.me/ansible-tower-usage.html" rel="alternate"></link><updated>2016-01-02T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2016-01-02:ansible-tower-usage.html</id><summary type="html">
&lt;p&gt; 安装好后的 Tower 如下图 ( 图 1)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible Tower" class="img-responsive" src="images/ansible/tower_preview.png"/&gt;&lt;/p&gt;
&lt;div class="text-center"&gt;
&lt;p&gt;&lt;strong&gt; 图 1&lt;/strong&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt; 从上面看，主要有 Projects, Inventories, Job Templates, Jobs 几个功能点。
还有一个主要的是后面的 Setup。我们一个一个来介绍下都是做什么用的。并建立起一个简单的例子 &lt;/p&gt;
&lt;h1 id="projects"&gt;Projects&lt;/h1&gt;
&lt;p&gt;Projects 里的主要内容是一个 Playbook 的代码地址，可选项为 Manual( 手动指定位置 )，Git, Mercutail, Subversion。&lt;/p&gt;
&lt;p&gt; 我在 Github 上建立了一个简单的 PlayBook。我们来创建一个新的 Project。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;project_demo&lt;/span&gt;
&lt;span class="n"&gt;Organization&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;
&lt;span class="n"&gt;SCM&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt;
&lt;span class="n"&gt;SCM&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/jeffrey4l/&lt;/span&gt;&lt;span class="n"&gt;tower_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;git&lt;/span&gt;
&lt;span class="n"&gt;SCM&lt;/span&gt; &lt;span class="n"&gt;Branch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 保存就可以创建好一个 Project. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Tower Project List" class="img-responsive" src="images/ansible/tower_project_list.png"/&gt;
&lt;div class="text-center" markdown="1"&gt; &lt;strong&gt; 图 2&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p&gt; 在 ( 图 2) 中，可以看到刚刚创建的 Project (project_demo)。后面是有 4 个操作按钮，分别是更新代码，定时更新，修改和删除。&lt;/p&gt;
&lt;p&gt; 基中更新代码的其实就是启了一个 ansible playbook 去 update 你在创建 Project 时填入的项目地址。&lt;/p&gt;
&lt;h1 id="inventories"&gt;Inventories&lt;/h1&gt;
&lt;p&gt; 这里的 Inventories 和在 Ansible 里的概念是一样的。在这可以创建一个若干 Inventories。每个里面可以像在 Ansible 里一样，创建机器和群组。&lt;/p&gt;
&lt;p&gt; 我们来创建一个 localhost 的机器。点击 + 号，在弹出的对话框里输入 localhost 就可以了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tower add host" class="img-responsive" src="images/ansible/tower_add_host.png"/&gt;
&lt;div class="text-center" markdown="1"&gt; &lt;strong&gt; 图 3&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p&gt; 在里面，还可以增加 Host 对应的变量。Group 里还可以嵌套 Group, 这和 Ansible 是一样的。&lt;/p&gt;
&lt;h1 id="job-templates"&gt;Job Templates&lt;/h1&gt;
&lt;p&gt; 这里是来定义 Job 的模板。定义好后，就可以手动或自动的跑 Job 了。这之前，我们还可创建一个认证信息，用来登录机器用。&lt;/p&gt;
&lt;p&gt; 在 setup -&amp;gt; Credentials 里可以看到所有的认证信息。我们来创建一个基于 SSH Key 的认证，用来登录 localhost, 跑我们的 project demo 项目。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;owns&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;creidential&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Machine&lt;/span&gt;
&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;span class="n"&gt;Private&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keygen&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 并把上面的 Key 配置的本机上。&lt;/p&gt;
&lt;p&gt; 接下来，创建我们的 Job Template&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tower add job template" class="img-responsive" src="images/ansible/tower_add_job_template.png"/&gt;
&lt;div class="text-center" markdown="1"&gt; &lt;strong&gt; 图 4&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
&lt;h1 id="job"&gt;Job&lt;/h1&gt;
&lt;p&gt; 创建好模板后，直接在 template 界面里点 start 就可以运行了。点击后，会跳转到 Job 运行界面。稍等一会，就可以看到运行结果了。&lt;/p&gt;
&lt;h1 id="portal"&gt;Portal&lt;/h1&gt;
&lt;p&gt;Tower 还有一个 Portal 模式。很方便非开发运维人员使用。左面是 Job Template, 点击直接运行 , 右面是运行结果。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tower Portal Mode" class="img-responsive" src="images/ansible/tower_portal.png"/&gt;
&lt;div class="text-center" markdown="1"&gt; &lt;strong&gt; 图 5&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;</summary><category term="Ansible Tower"></category></entry><entry><title>Install Ansible Tower</title><link href="http://xcodest.me/install-ansible-tower.html" rel="alternate"></link><updated>2015-12-31T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-12-31:install-ansible-tower.html</id><summary type="html">
&lt;h1 id="_1"&gt; 手动安装 &lt;/h1&gt;
&lt;h2 id="_2"&gt; 下载安装包 &lt;/h2&gt;
&lt;p&gt; 从 http://www.ansible.com/tower-trial 下载，需要填个人信息，提交后会自动下载。&lt;/p&gt;
&lt;p&gt; 把安装包复制到要安装的机器中去，解压准备安装 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar xvf ansible-tower-setup-latest.tar.gz
cd ansible-tower-setup-2.4.3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这个安装包本质上是一个 playbook。其中 &lt;code&gt;configure&lt;/code&gt; 是用来生成配置文件的脚本，运行它会有几个问题，让你回答，回答完后就开始自动安装了。也可把这些问答写到一个文件中，让其自动化。建立名为 &lt;code&gt;tower_setup_conf.yml&lt;/code&gt; 的文件，其内容为 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;admin_password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;database&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;internal&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;munin_password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pg_password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;primary_machine&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;redis_password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 开始进行设置 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./configure --options-file tower_setup_conf.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 如果没有问题，脚本会提示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The configuration provided in tower_setup_conf.yml appears complete.

FINISHED!
You have completed the setup wizard. You may execute the installation of
Ansible Tower by issuing the following command:

sudo ./setup.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 运行安装脚本 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ./setup.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 其主要工作为 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 如果没有安装 ansible, 就安装上 ansible&lt;/li&gt;
&lt;li&gt; 使用 ansible 进行 tower 的安装 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 安装好后，终端会提示给你访问的地址，用浏览器打开就可以了。输入上面设置的 admin 账号密码登录。&lt;/p&gt;
&lt;p&gt; 之后会出现设置 Tower License 的界面。可以从 http://www.ansible.com/license 申请到一个 10 个节点的免费 license。最后把 License 复制进去提交就可以了。&lt;/p&gt;
&lt;h1 id="vagrant"&gt; 使用 Vagrant 进行安装 &lt;/h1&gt;
&lt;p&gt; 官方提供 Vagrant Images, 方便进行安装测试。使用方法 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant init tower http://vms.ansible.com/ansible-tower-2.4.3-virtualbox.box
vagrant up
vagrant ssh
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;http://docs.ansible.com/ansible-tower/latest/html/installandreference/tower_installer.html&lt;/li&gt;
&lt;li&gt;http://docs.ansible.com/ansible-tower/latest/html/installandreference/tower_install_wizard.html&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Ansible Tower"></category></entry><entry><title>Ansible安装</title><link href="http://xcodest.me/ansible-install.html" rel="alternate"></link><updated>2015-12-30T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-12-30:ansible-install.html</id><summary type="html">&lt;p&gt; 由于 Ansible 是通过 SSH 进行通讯的，所以只用安装 master 端就可以了。并不像 puppet/SaltStack 那样在 slave/minion 端进行安装。&lt;/p&gt;
&lt;p&gt; 由于是用 Python 编写的，安装起来和普通 Python 应用没有太大区别。可以通过源码，pypi, 操作系统的包管理进行安装。&lt;/p&gt;
&lt;h1 id="_1"&gt; 系统包管理 &lt;/h1&gt;
&lt;h2 id="rpm"&gt;RPM 系 &lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# install epel source
yum install -y epel-release
yum install ansible
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="apt"&gt;Apt 系 &lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install -y software-properties-common
apt-add-repository -y ppa:ansible/ansible
apt-get update
apt-get install -y ansible
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="pypi"&gt;pypi 安装 &lt;/h1&gt;
&lt;p&gt; 通过 pypi 相当简单，直接用 pip 就可安装 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install ansible
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_2"&gt; 源码安装 &lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# download the source from github&lt;/span&gt;
&lt;span class="c1"&gt;# ansible has two git submodules, so the --recursive is required.&lt;/span&gt;
git clone git://github.com/ansible/ansible.git --recursive
&lt;span class="nb"&gt;cd&lt;/span&gt; ./ansible

&lt;span class="c1"&gt;# install&lt;/span&gt;
pip install .
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Ansible"></category></entry><entry><title>Deploy Docker Registry Service</title><link href="http://xcodest.me/deploy-docker-registry-service.html" rel="alternate"></link><updated>2015-12-15T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-12-15:deploy-docker-registry-service.html</id><summary type="html">&lt;p&gt; 使用 Docker 时，很多情况下需要搭建自己的 registry 服务。把一些私有的 Image 放到上面用。官方有一个 registry 的 &lt;a href="https://hub.docker.com/_/registry/"&gt; 镜像 &lt;/a&gt; 可以拉下来，直接用。如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -p 5000:5000 -v &amp;lt;HOST_DIR&amp;gt;:/tmp/registry-dev registry
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 但是默认没有加上 ssl( 如果没有，只能给本机提供服务 )， proxy 也没有开启。&lt;/p&gt;
&lt;p&gt; 我自己写了一个 docker compose, 默认开启了以上两个功能，代码见 &lt;a href="https://github.com/jeffrey4l/docker-registry"&gt; 这里 &lt;/a&gt;。默认使用了 host 的 /data/docker-registry/data 目录做数据 volume, 所以请保证这个目录存在。&lt;/p&gt;
&lt;p&gt; 使用自己建立的 registry 服务时，要修改 docker 的服务启动脚本，加上如下参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--insecure-registry your.domain.com:5000 --registry-mirror=https://your.domain.com:5000
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/jeffrey4l/docker-registry&lt;/li&gt;
&lt;li&gt;https://github.com/docker/distribution/blob/master/docs/mirror.md&lt;/li&gt;
&lt;li&gt;https://hub.docker.com/_/registry/&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Docker"></category></entry><entry><title>Python Exception init args</title><link href="http://xcodest.me/python-exception-init-args.html" rel="alternate"></link><updated>2015-11-20T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-11-20:python-exception-init-args.html</id><summary type="html">&lt;p&gt;&lt;img alt="Talk is cheep" class="img-responsive" src="/images/talk_is_cheap.jpg" /&gt;&lt;/p&gt;
&lt;p&gt; 一直没有搞明白 &lt;code&gt;Exception&lt;/code&gt; 的 args 和 message 参数 , 最近看了一下 CPython 源码，
终于搞明白了。&lt;/p&gt;
&lt;p&gt; 一开始 ( 从 2.5 开始 ) 的时候是有 &lt;code&gt;args&lt;/code&gt; 和 &lt;code&gt;message&lt;/code&gt; 两个参数的。2.6 版本之后，把
&lt;code&gt;message&lt;/code&gt; 废弃掉了，只留下了一个任意长度的 &lt;code&gt;args&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 以下是 2.5 以后的代码，可以看到，如果 args 长度是 1，就会把 &lt;code&gt;self.message = args[0]&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;BaseException_new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyTypeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyBaseExceptionObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyBaseExceptionObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tp_alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* the dict is created on the fly in PyObject_GenericSetAttr */&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyTuple_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyString_FromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;BaseException_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyBaseExceptionObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_PyArg_NoKeywords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Py_TYPE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tp_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyTuple_GET_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Py_CLEAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyTuple_GET_ITEM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 本来 message 就是 Exception 的一个属性，在 2.6 以后，把它变成了一个 descriptor, 当
调用时，如果它在 &lt;code&gt;self.__dict__&lt;/code&gt; 里，就直接打印，否则就返回 &lt;code&gt;self.message&lt;/code&gt; 的信息
并打印出一个 &lt;code&gt;Warning&lt;/code&gt;。如果已经赋过一个值的话 &lt;code&gt;self.message = xxxx&lt;/code&gt;, 它就会存在
&lt;code&gt;self.__dict__&lt;/code&gt; 里。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;BaseException_get_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyBaseExceptionObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* if &amp;quot;message&amp;quot; is in self-&amp;gt;dict, accessing a user-set message attribute */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_GetItemString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyErr_SetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyExc_AttributeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;message attribute was deleted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/* accessing the deprecated &amp;quot;builtin&amp;quot; message attribute of Exception */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyErr_WarnEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyExc_DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s"&gt;&amp;quot;BaseException.message has been deprecated as &amp;quot;&lt;/span&gt;
                     &lt;span class="s"&gt;&amp;quot;of Python 2.6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;BaseException_set_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyBaseExceptionObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* if val is NULL, delete the message attribute */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;PyDict_GetItemString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyDict_DelItemString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;Py_XDECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/* else set it in __dict__, but may need to create the dict first */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_New&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyDict_SetItemString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 在 python3 中，message 相关的信息已经完全删除掉了。&lt;/p&gt;
&lt;p&gt; 所以，一般使用 &lt;code&gt;message&lt;/code&gt; 属性的话，推荐这样使用 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MyException&lt;/span&gt;(&lt;span class="nb"&gt;Exception&lt;/span&gt;):
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;message&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;message&lt;/span&gt; = &lt;span class="n"&gt;message&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;My2Exception&lt;/span&gt;(&lt;span class="nb"&gt;Exception&lt;/span&gt;):
    &lt;span class="n"&gt;message&lt;/span&gt; = &lt;span class="s"&gt;&amp;#39;this is a message&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Python"></category></entry><entry><title>Interrupt the Python multiprocessing.Pool in graceful way</title><link href="http://xcodest.me/interrupt-the-python-multiprocessing-pool-in-graceful-way.html" rel="alternate"></link><updated>2015-11-17T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-11-17:interrupt-the-python-multiprocessing-pool-in-graceful-way.html</id><summary type="html">&lt;p&gt;When using &lt;code&gt;KeyboardInterrupt&lt;/code&gt;(&lt;code&gt;Ctrl+c&lt;/code&gt;) interrupt the excution of the &lt;code&gt;multiprocess.Pool&lt;/code&gt;, it will not work as expected. Following is a demo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When run the code and try to &lt;code&gt;Ctrl+C&lt;/code&gt; to stop it, it will never be stopped.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python2 b.py                                                                      
^CProcess PoolWorker-1:
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/multiprocessing/process.py&amp;quot;&lt;/span&gt;, line 258, in _bootstrap
    self.run&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/multiprocessing/process.py&amp;quot;&lt;/span&gt;, line 114, in run
    self._target&lt;span class="o"&gt;(&lt;/span&gt;*self._args, **self._kwargs&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/multiprocessing/pool.py&amp;quot;&lt;/span&gt;, line 113, in worker
    &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;True, func&lt;span class="o"&gt;(&lt;/span&gt;*args, **kwds&lt;span class="o"&gt;))&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;b.py&amp;quot;&lt;/span&gt;, line 7, in worker
    time.sleep&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
KeyboardInterrupt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The root cause is explained in &lt;a href="http://stackoverflow.com/a/1408476/893981"&gt;stackoverflow&lt;/a&gt;. And the bug is &lt;a href="http://bugs.python.org/issue8296"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
This is a Python bug. When waiting for a condition in threading.Condition.wait(), KeyboardInterrupt is never sent. Repro:

&lt;pre&gt;
import threading
cond = threading.Condition(threading.Lock())
cond.acquire()
cond.wait(None)
print "done"
&lt;/pre&gt;

The KeyboardInterrupt exception won't be delivered until wait() returns, and it never returns, so the interrupt never happens. KeyboardInterrupt should almost certainly interrupt a condition wait.

Note that this doesn't happen if a timeout is specified; cond.wait(1) will receive the interrupt immediately. So, a workaround is to specify a timeout. To do that, replace

&lt;pre&gt;
    results = pool.map(slowly_square, range(40))
&lt;/pre&gt;

with

&lt;pre&gt;
    results = pool.map_async(slowly_square, range(40)).get(9999999)
&lt;/pre&gt;

or similar.
&lt;/blockquote&gt;

&lt;p&gt;By using this, we can interrupt the Pool by using &lt;code&gt;Ctrl+c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is a better version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker_init&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# ignore the SIGINI in sub process, just print a log&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sig_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal_num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;signal: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;signal_num&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig_int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;worker_init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xfff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# catch TimeoutError and get again&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeoutError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;timeout&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org/issue8296"&gt;Python Bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/a/149756"&gt;How Ctrl+c works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/1408476/893981"&gt;Keyboard Interrupts with python's multiprocessing Pool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category></entry><entry><title>Glance Create Image from Existent Image in Ceph</title><link href="http://xcodest.me/glance-create-image-from-existent-image-in-ceph.html" rel="alternate"></link><updated>2015-06-04T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-06-04:glance-create-image-from-existent-image-in-ceph.html</id><summary type="html">&lt;p&gt; 当使用 Ceph + Glance 时，镜像需要使用 RAW 格式，这会导致创建镜像时非常的慢。有的时候，也需要把 Ceph 中现有的镜像导入到 Glance 中。这时可以使用 --location 参数来指定镜像所在的远程位置。也就可以使用现有的 Ceph 镜像来快速创建。&lt;/p&gt;
&lt;p&gt; 可以先用 rbd 上传镜像，转换格式 ( 也会比较慢，还不如直接上传 RAW 格式的镜像 )。然后再做好对应的 snap , 并加以保护。是后一步的 location 必须按格式写 ( 见 [0])，这样才会使用 rbd 的 COW clone 功能。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# image format 2 support layering&lt;/span&gt;
rbd --image-format &lt;span class="m"&gt;2&lt;/span&gt; import /tmp/ubuntu14.04.2.dsk $uuid

&lt;span class="c1"&gt;# Convert to raw image type&lt;/span&gt;
qemu-img convert -O raw rbd:$pool/$uuid rbd:$pool/$uuid

&lt;span class="c1"&gt;# Make Snapshot and protect it which is require by image clone in nova libvirt.&lt;/span&gt;
rbd --pool images snap create --snap snap $uuid
rbd --pool images snap protect --image $uuid --snap snap

&lt;span class="c1"&gt;# Create Image in Glance&lt;/span&gt;
glance image-create --id $uuid --name ubuntu14.04.2 --disk-format raw --container-format bare --is-public True --location rbd://&lt;span class="nv"&gt;$f&lt;/span&gt;sid/images/$uuid/snap
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[0] &lt;a href="https://github.com/openstack/nova/blob/4a02d9415f64e8d579d1b674d6d2efda902b01fa/nova/virt/libvirt/rbd_utils.py#L179"&gt;https://github.com/openstack/nova/blob/4a02d9415f64e8d579d1b674d6d2efda902b01fa/nova/virt/libvirt/rbd_utils.py#L179&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1] &lt;a href="http://www.sebastien-han.fr/down/OpenStack%20_%20Ceph%20-%20Liberty.pdf"&gt;http://www.sebastien-han.fr/down/OpenStack%20_%20Ceph%20-%20Liberty.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href="http://www.sebastien-han.fr/blog/2013/05/07/use-existing-rbd-images-and-put-it-into-glance/"&gt;http://www.sebastien-han.fr/blog/2013/05/07/use-existing-rbd-images-and-put-it-into-glance/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Python MetaClass Magic</title><link href="http://xcodest.me/python-metaclass-magic.html" rel="alternate"></link><updated>2015-05-18T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-05-18:python-metaclass-magic.html</id><summary type="html">&lt;p&gt; 在 Nova 代码中 [&lt;a href="https://github.com/openstack/nova/blob/c13f693d496f4ea5dbc78244fefd9ec2d6ea8de5/nova/api/openstack/wsgi.py#L1075"&gt;0&lt;/a&gt;] 发现一个神奇的应用，利用 decrator 来区分同名的函数，根据 decrator 上面定义的版本，来调用不同的方法。仔细学习了一下。它是用到了 MetaClass。主要思路是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 在 decrator 里面，把被装饰的方法存在类的一个属性里面 (version_methods)&lt;/li&gt;
&lt;li&gt; 使用自定义的 metaclass, 删除掉父类上的 version_methods，并把这个属性放到子类中。这样做是为了防止子类共享父类的 version_methods 属性。&lt;/li&gt;
&lt;li&gt; 在子类里面，重写 &lt;code&gt;__getattribute__&lt;/code&gt; 方法，当所需要的属性存在于 &lt;code&gt;version_methods&lt;/code&gt; 时，根据特定的条件，返回期望的方法。如果没有，就调用父类的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 以下是示例代码 &lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/0b974aaea1be25cde67d.js?file=version_method.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;VERION_METHODS='version_methods'

class VersionMethod(object):
    def __init__(self, version, func):
        self.version = version
        self.func = func


class MetaClass(type):
    def __new__(cls, name, bases, cls_dict):
        for base in bases:
            version_methods = getattr(base, VERION_METHODS, None)
            if version_methods:
                cls_dict[VERION_METHODS] = version_methods
                delattr(base, VERION_METHODS)

        return super(MetaClass, cls).__new__(cls, name, bases, cls_dict)


class Base(object):
    __metaclass__ = MetaClass

    def __getattribute__(self, name):

        def version_select(*args, **kwargs):
            if len(args) &gt; 0:
                version = args[0]['version']
            else:
                version = kwargs['req']['version']
            for version_func in self.version_methods.get(name, None):
                if version_func.version == version:
                    return version_func.func(self, *args, **kwargs)
            raise AttributeError

        try:
            version_methods = object.__getattribute__(self, VERION_METHODS)
        except AttributeError:
            return object.__getattribute__(self, name)

        if version_methods and \
                name in version_methods:
            return version_select
        return object.__getattribute__(self, name)


    @classmethod
    def version(cls, version):
        def wrapper(func):
            name = func.func_name
            version_methods = getattr(cls, VERION_METHODS, {})
            if not version_methods:
                setattr(cls, VERION_METHODS, version_methods)

            methods = version_methods.get(name, [])
            if not methods:
                version_methods[name] = methods
            methods.append(VersionMethod(version, func))

            return func
        return wrapper


class SubClass(Base):

    @Base.version("1.0")
    def foo(self, req):
        print "in SubClass 1.0 version: %s" % req

    @Base.version("2.0")
    def foo(self, req):
        print "in SubClass 2.0 version: %s" % req

class SubClass2(Base):

    @Base.version("1.0")
    def foo(self, req):
        print "in SubClass2 1.0 version: %s" % req

    @Base.version("2.0")
    def foo(self, req):
        print "in SubClass2 2.0 version: %s" % req




SubClass().foo({"version": "1.0"})
SubClass().foo({"version": "2.0"})

SubClass2().foo({"version": "1.0"})
SubClass2().foo({"version": "2.0"})

# Output
# in SubClass 1.0 version: {'version': '1.0'}
# in SubClass 2.0 version: {'version': '2.0'}
# in SubClass2 1.0 version: {'version': '1.0'}
# in SubClass2 2.0 version: {'version': '2.0'}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;[0] &lt;a href="https://github.com/openstack/nova/blob/c13f693d496f4ea5dbc78244fefd9ec2d6ea8de5/nova/api/openstack/wsgi.py#L1075"&gt;https://github.com/openstack/nova/blob/c13f693d496f4ea5dbc78244fefd9ec2d6ea8de5/nova/api/openstack/wsgi.py#L1075&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category></entry><entry><title>Oz Templates</title><link href="http://xcodest.me/oz-templates.html" rel="alternate"></link><updated>2015-05-11T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-05-11:oz-templates.html</id><summary type="html">&lt;p&gt; 最近利用 &lt;a href="https://github.com/clalancette/oz"&gt;OZ&lt;/a&gt; 做了几个常用镜像的自动化制作。回头有用到的会再加进去。说明如下 &lt;/p&gt;
&lt;p&gt; 项目地址 : &lt;a href="https://github.com/jeffrey4l/oz-templates"&gt;https://github.com/jeffrey4l/oz-templates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 以下是 README 里的内容。&lt;/p&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;The isos are located in &lt;code&gt;/data/isos/&lt;/code&gt;. The isos' name are conversionally.
Including&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS-6.3-x86_64-bin-DVD1.iso&lt;/li&gt;
&lt;li&gt;RHEL-6.3-x86_64-DVD.iso&lt;/li&gt;
&lt;li&gt;ubuntu-14.04.1-server-amd64.iso&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/clalancette/oz.git
cd oz
git clone https://github.com/jeffrey4l/oz-templates.git
cd oz-templates
make all
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="detail"&gt;Detail&lt;/h2&gt;
&lt;p&gt;The image are configured as following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;without lvm, which will helpful for partion auto extend.&lt;/li&gt;
&lt;li&gt;Default image size is 40GB&lt;/li&gt;
&lt;li&gt;Installed cloud-init with some basic configuration.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="OpenStack"></category></entry><entry><title>论Python的异常的合理抛出姿势</title><link href="http://xcodest.me/How_to_raise_python_exception.html" rel="alternate"></link><updated>2015-05-06T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-05-06:How_to_raise_python_exception.html</id><summary type="html">&lt;p&gt; 当需要重新抛出 Python 的异常时，很多人都处理不好。本文总结了一些处理方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 这种处理会直接把内部异常吃掉，当有问题 /Bug 时，会很难处理，所以不推荐。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="c1"&gt;# or&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;
    &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 这种直接打印的，一是不能很好的输出到日志里。二是不能把错误交到上层调用者，不能让其知道这是有问题。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_somethink&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_cleanup&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;raise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 用这种，主要是为了做 cleanup。直接 &lt;code&gt;raise&lt;/code&gt; 后，异常会抛向上层。没有 catch 的效果一样。&lt;/p&gt;
&lt;p&gt; 这里还有一种和上面这个类似的效果的 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="n"&gt;exc_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 最后，当要抛出自己重新包装后的异常时，最好把原始的异常也带上。这样有利于问题的 debug。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="n"&gt;exc_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;MyException&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ianbicking.org/blog/2007/09/re-raising-exceptions.html"&gt;Re-raising Exceptions&lt;/a&gt; - by Ian Bicking&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Exception"></category></entry><entry><title>Logstash Debug</title><link href="http://xcodest.me/logstash_debug.html" rel="alternate"></link><updated>2015-03-23T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-03-23:logstash_debug.html</id><summary type="html">&lt;p&gt;Logstash 能使用 rubydebug 这个 codec 进行 debug。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;input {
    stdin {}
}

output {
    stdout {
        codec =&amp;gt; rubydebug
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 用 logstash 手动启动 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;logstash -f debug.conf --verbose --debug
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 直接输入数据，能得到详细的输出报告 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./logstash -f debug --verbose --debug                            
a
Pipeline started {:level=&amp;gt;:info}
{
       &amp;quot;message&amp;quot; =&amp;gt; &amp;quot;a&amp;quot;,
      &amp;quot;@version&amp;quot; =&amp;gt; &amp;quot;1&amp;quot;,
    &amp;quot;@timestamp&amp;quot; =&amp;gt; &amp;quot;2015-03-23T09:55:15.226Z&amp;quot;,
          &amp;quot;type&amp;quot; =&amp;gt; &amp;quot;test&amp;quot;,
          &amp;quot;host&amp;quot; =&amp;gt; &amp;quot;jeffrey-thinkpad&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://logstash.net/docs/1.4.2/codecs/rubydebug"&gt;http://logstash.net/docs/1.4.2/codecs/rubydebug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://logstash.net/docs/1.4.2/flags"&gt;http://logstash.net/docs/1.4.2/flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Nova Security Group相关配置</title><link href="http://xcodest.me/nova-security-groupxiang-guan-pei-zhi.html" rel="alternate"></link><updated>2015-03-18T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-03-18:nova-security-groupxiang-guan-pei-zhi.html</id><summary type="html">&lt;h1 id="_1"&gt; 相关配置 &lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;network_api_class - 设置 network 模块所用的 api&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nova.network.api.API&lt;/code&gt; - 通过 rpc 与 nova-network 交互 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;nova.network.neutronv2.API&lt;/code&gt; - 通过 http 与 neutron-server 交互 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;security_group_api - 设置 security group 模块所用的 api 类 &lt;ul&gt;
&lt;li&gt;&lt;code&gt;nova&lt;/code&gt; (&lt;code&gt;nova.compute.api.SecurityGroupAPI&lt;/code&gt;) - 通过 rcp 与 nova-compute 交互 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;neutron&lt;/code&gt; ( &lt;code&gt;nova.network.security_group.neutron_driver.SecurityGroupAPI&lt;/code&gt; ) - 通过 http 与 neutron-server 交互 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;linuxnet_interface_driver - 在机器与 ethernet interface plug&amp;amp;unplug 时调用 。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nova.network.linux_net.LinuxBridgeInterfaceDriver&lt;/code&gt; - used in nova-network&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nova.network.linux_net.linuxOVSInterfaceDriver&lt;/code&gt; - use in neutron + ml2 + ovs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nova.network.linux_net.NeutronLinuxBridgeInterfaceDriver&lt;/code&gt; - use in neutron + ml2 + linuxbridge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;firewall_driver - 虚拟化层所用的 firewall。在 nova-network 时代，security group 由 iptables 和 ebtables 实现。在 neutron 时代，这个已经不需要了。但是 neutron 里现在还有 arp-spoofing 的 bug, 参见 [2]&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nova.virt.firewall.IptablesFirewallDrive&lt;/code&gt; - &lt;/li&gt;
&lt;li&gt;&lt;code&gt;nova.virt.firewall.NoopFirewallDriver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_2"&gt; 使用组合：&lt;/h1&gt;
&lt;p&gt;nova-network + libvirt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nova_api_class=nova.network.api.API
security_group_ap=nova
linuxnet_interface_driver=nova.network.linux_net.LinuxBridgeInterfaceDriver
firewall_driver=nova.virt.firewall.IptablesFirewallDrive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;neutron + ml2 + linuxbridge plugin + libvirt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nova_api_class=nova.network.neutronv2.API
security_group_ap=neutron
linuxnet_interface_driver=nova.network.linux_net.NeutronLinuxBridgeInterfaceDriver
firewall_driver=nova.virt.firewall.NoopFirewallDriver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;neutron + ml2 + ovs plugin + libvirt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nova_api_class=nova.network.neutronv2.API
security_group_ap=neutron
linuxnet_interface_driver=nova.network.linux_net.linuxOVSInterfaceDriver
firewall_driver=nova.virt.firewall.NoopFirewallDriver
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://kennethjiang.blogspot.jp/2012/02/ebtables-in-openstack-nova-and.html"&gt;ebtables in Openstack Nova&lt;/a&gt; - nwfilter explaination&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blueprints.launchpad.net/neutron/+spec/arp-spoof-patch-ebtables"&gt;Preventing ARP spoofing via ebtables&lt;/a&gt; - Neutron BP for preventing arp snoofing. Expected in Kilo&lt;ol&gt;
&lt;li&gt;&lt;a href="https://bugs.launchpad.net/neutron/+bug/1274034"&gt;Neutron firewall anti-spoofing does not prevent ARP poisoning&lt;/a&gt; - Related bug&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Network"></category></entry><entry><title>关于减肥你应该知道的十件事 - 观后总结</title><link href="http://xcodest.me/ten-things-you-need-know-abount-loss-weight.html" rel="alternate"></link><updated>2015-03-12T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-03-12:ten-things-you-need-know-abount-loss-weight.html</id><summary type="html">&lt;p&gt; 看了 BBC 出的 "BBC：关于减肥你应该知道的十件事 "，做了一些笔记。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 瘦人也可能脂肪高 &lt;ul&gt;
&lt;li&gt; 主要存在于内脏。增加有 2 型糖尿病和胰岛素抵抗病的风险。内脏脂肪还能释放某些物质损坏心脏周围的动脉，导致心脏病。这些物质还能增加癌症的风险。肝脏释放的化学物质很容易进入肝脏，影响肝脏清除血液中胰岛素的能力，从而有可能引发 2 型糖尿病。减肥时，最先减掉的就是自己内脏里的脂肪。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 不应该减少正餐的次数。&lt;ul&gt;
&lt;li&gt; 当饥饿时，大脑更偏向于选择高热量的食物。当不饿时，大脑会高热量和低热量的食物的反应差不多。这是大脑会脑肠肽激素的反应，当胃里排空时，脑肠肽就会向大脑发出信息，进食高热量的食物。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 选用更小的餐具能减少食物的摄入量。可以减少 23% 的摄入量。&lt;/li&gt;
&lt;li&gt; 尽量选用低热量的食物。有可能让一天的摄入热量减少 50%。&lt;/li&gt;
&lt;li&gt; 多数人都会低估自己每天的摄入量 ( 大概 50%)。计算摄入量时，一些看似健康的食物也要加上。&lt;/li&gt;
&lt;li&gt; 增加蛋白的摄入量能有效的缓解饥饿感。&lt;ul&gt;
&lt;li&gt; 相比其它的食物，蛋白能够更多的释放酪酪肽，通过血液告诉大脑现在不饿。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 相同的食物，弄成粥羹后食用，会延长胃排空的时间。&lt;ul&gt;
&lt;li&gt; 因为水会比粥更快的排出胃里，从而使胃里的食物变少。而粥会持续更长的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 人类进化上，会偏向于多样化的食物。所以面对于自助餐，会让人吃的更多。( 可以尽量减少自己进食的多样化，让其只有有限的几种 )&lt;/li&gt;
&lt;li&gt; 低脂奶制品中的乳钙能有效的去除脂肪。乳钙和脂肪分子结合变成类似于皂质的物质，而人体的小肠不能吸收。&lt;/li&gt;
&lt;li&gt; 运动开始后，脂肪是在一直燃烧的，甚至在睡觉的时候。&lt;ul&gt;
&lt;li&gt; 运动完成后，脂肪还是会持续燃烧，而且它的消耗量比运动时还大 ( 指单位时间内 )。也就是说，运动完后的第二天，脂肪的消耗量比运动当天还大的多。运动时，肌肉主要使用更容易被身体燃烧的碳水化合物，然后身体需要 22 个小时来进行补充恢复被消耗掉的碳水化合物，在比期间，身体会被迫燃烧脂肪。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 对于不爱运动的人来说，生活说小的改变，能让热量消耗有很大的不同。如多走几步路等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://open.163.com/movie/2013/5/E/1/M8TBLASMF_M8TBLJSE1.html"&gt;BBC：关于减肥你应该知道的十件事 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Cinder V2 API</title><link href="http://xcodest.me/cinder-v2-api.html" rel="alternate"></link><updated>2015-03-10T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-03-10:cinder-v2-api.html</id><summary type="html">&lt;p&gt;cinder v2 api add more feature than v1, Like QoS. And the v1 is marked deprecated in juno and will be removed soon. ( may be in kilo).&lt;/p&gt;
&lt;h1 id="enable-the-v2-in-cinder"&gt;Enable the v2 in cinder&lt;/h1&gt;
&lt;p&gt;Change the following config. The v1 and v2 is enabled in default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# DEPRECATED: Deploy v1 of the Cinder API. (boolean value)&lt;/span&gt;
&lt;span class="c1"&gt;#enable_v1_api=true&lt;/span&gt;

&lt;span class="c1"&gt;# Deploy v2 of the Cinder API. (boolean value)&lt;/span&gt;
&lt;span class="c1"&gt;#enable_v2_api=true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="enable-the-cinder-v2-api-in-nova"&gt;Enable the cinder v2 api in nova&lt;/h1&gt;
&lt;p&gt;In current nova config ( juno ), the default config like below. Depend on &lt;code&gt;catalog_info&lt;/code&gt; key, it use the v2 first. If v2 is not found, it will fall back to v1 version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[cinder]&lt;/span&gt;

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Options defined in nova.volume.cinder&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="c1"&gt;# Info to match when looking for cinder in the service&lt;/span&gt;
&lt;span class="c1"&gt;# catalog. Format is: separated values of the form:&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;service_type&amp;gt;:&amp;lt;service_name&amp;gt;:&amp;lt;endpoint_type&amp;gt; (string value)&lt;/span&gt;
&lt;span class="c1"&gt;#catalog_info=volumev2:cinderv2:publicURL&lt;/span&gt;

&lt;span class="c1"&gt;# Override service catalog lookup with template for cinder&lt;/span&gt;
&lt;span class="c1"&gt;# endpoint e.g. http://localhost:8776/v1/%(project_id)s&lt;/span&gt;
&lt;span class="c1"&gt;# (string value)&lt;/span&gt;
&lt;span class="c1"&gt;#endpoint_template=&amp;lt;None&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Region name of this node (string value)&lt;/span&gt;
&lt;span class="c1"&gt;#os_region_name=&amp;lt;None&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Number of cinderclient retries on failed http calls (integer&lt;/span&gt;
&lt;span class="c1"&gt;# value)&lt;/span&gt;
&lt;span class="c1"&gt;#http_retries=3&lt;/span&gt;

&lt;span class="c1"&gt;# Allow attach between instance and volume in different&lt;/span&gt;
&lt;span class="c1"&gt;# availability zones. (boolean value)&lt;/span&gt;
&lt;span class="c1"&gt;#cross_az_attach=true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can just add the endpoint to the keystone to enable the cinder v2 api.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keystone service-create --name&lt;span class="o"&gt;=&lt;/span&gt;cinderv2 --type&lt;span class="o"&gt;=&lt;/span&gt;volumev2 &lt;span class="se"&gt;\&lt;/span&gt;
  --description&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cinder Volume Service V2&amp;quot;&lt;/span&gt;

keystone endpoint-create &lt;span class="se"&gt;\&lt;/span&gt;
  --service-id&lt;span class="o"&gt;=&lt;/span&gt;the_service_id_above &lt;span class="se"&gt;\&lt;/span&gt;
  --publicurl&lt;span class="o"&gt;=&lt;/span&gt;http://controller:8776/v2/%&lt;span class="se"&gt;\(&lt;/span&gt;tenant_id&lt;span class="se"&gt;\)&lt;/span&gt;s &lt;span class="se"&gt;\&lt;/span&gt;
  --internalurl&lt;span class="o"&gt;=&lt;/span&gt;http://controller:8776/v2/%&lt;span class="se"&gt;\(&lt;/span&gt;tenant_id&lt;span class="se"&gt;\)&lt;/span&gt;s &lt;span class="se"&gt;\&lt;/span&gt;
  --adminurl&lt;span class="o"&gt;=&lt;/span&gt;http://controller:8776/v2/%&lt;span class="se"&gt;\(&lt;/span&gt;tenant_id&lt;span class="se"&gt;\)&lt;/span&gt;s

service cinder-scheduler restart
service cinder-api restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;http://docs.openstack.org/havana/install-guide/install/apt/content/cinder-controller.html&lt;/li&gt;
&lt;li&gt;https://wiki.openstack.org/wiki/CinderAPIv2&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Cinder"></category><category term="OpenStack"></category></entry><entry><title>Print the First N Characters of each Line</title><link href="http://xcodest.me/print-the-first-n-characters-of-each-line.html" rel="alternate"></link><updated>2015-02-15T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-02-15:print-the-first-n-characters-of-each-line.html</id><summary type="html">&lt;p&gt; 在使用 Shell 的过程中，经常会遇到一行过长，导致输出折行，相当难看的情况出现。而且多数据情况下，我们只用每行的前 N 个字符就可以了。这时可以用以下方法来截断每行的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 方法 1&lt;/strong&gt;： 使用 &lt;code&gt;awk&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat filename | awk &amp;#39;{print substr($0, 0, 20)}&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt; 方法 2&lt;/strong&gt;: 使用 &lt;code&gt;sed&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat filename | sed &amp;#39;s/\(.\{20\}\).*/\1/&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt; 方法 3&lt;/strong&gt;: 使用 &lt;code&gt;sed -r&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat filename | sed -r &amp;#39;s/(.{20}).*/\1/&amp;#39;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Shell"></category></entry><entry><title>修改 Libvirt 的 UUID</title><link href="http://xcodest.me/libvirt-uuid.html" rel="alternate"></link><updated>2015-02-10T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-02-10:libvirt-uuid.html</id><summary type="html">&lt;p&gt; 由于物理机器有限，想做 OpenStack 的多机环境一直是个问题。之前是在 OpenStack 上部署 OpenStack。由于只有一台物理机，资源相当紧张。不能建太多机器。最近突然想，既然 LXC 现在已经很完善了。能不能就利用它来做 OpenStack 服务间的隔离呢。所以最近一直在搞这东西。搞了几天还是有效果的。基本搭建了 OpenStack + Ceph + Swift 的环境出来。其中网络用的 Neutron + ML2 + OVS + VLAN。由于用 LXC 的隔离的，相对于之前来说相当节省资源。很好的解决了资源的问题。可以做一些大量机器的实验了。之后也会也这其中遇到的一些问题写下来，备忘。&lt;/p&gt;
&lt;p&gt; 今天主要写下配置 Live Migration 过程中遇到的一个问题。&lt;/p&gt;
&lt;p&gt; 每个 Libvirtd 实例都会有一个 UUID 存在。不同的 libvirt 实例的 UUID 应该是不同的。否则在 migrate 过程中， libvirt 会认为自己是在向自己迁移从而导致迁移失败。这个 UUID 有一个默认值，是来自于 SMBIOS UUID。这两个 UUID 可以通过以下方法拿到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ dmidecode  -s system-uuid
4C4C4544-0032-3210-804C-C7C04F463358

$ virsh capabilities | grep uuid
&lt;span class="nt"&gt;&amp;lt;uuid&amp;gt;&lt;/span&gt;44454c4c-3200-1032-804c-c7c04f463358&lt;span class="nt"&gt;&amp;lt;/uuid&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 可以看到这两个值是一样的 ( 不知道为什么有一段顺序不对 )。&lt;/p&gt;
&lt;p&gt; 当我在不同的 LXC 中启动多个 libvirt 时，就会触发这个问题。所有的 libvirt 使用的是相同的 uuid 从而导致 live migration 失败。&lt;/p&gt;
&lt;p&gt; 修改的办法也很简单。这个 UUID 可以在 libvirt 的配置文件 &lt;code&gt;/etc/libvirt/libvirtd.conf&lt;/code&gt; 中修改后重启 libivrt 就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;host_uuid = &amp;quot;8ba976e9-1224-4339-9526-719fe6dee311&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://libvirt.org/guide/html/Application_Development_Guide-Connections-Capability_Info.html"&gt;Libvirt Capability Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Libvirt"></category></entry><entry><title>tun &amp; veth设备</title><link href="http://xcodest.me/tun-vethshe-bei.html" rel="alternate"></link><updated>2015-02-09T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-02-09:tun-vethshe-bei.html</id><summary type="html">&lt;p&gt;OpenStack 的 Neutron 中会建立好多网卡设备。大体上这些网卡可以分为两类 tun 和 veth。&lt;/p&gt;
&lt;p&gt;&lt;img alt="OpenStack Neutron Network" class="img-responsive" src="/images/neutron-ovs-compute.png" /&gt;&lt;/p&gt;
&lt;p&gt; 用 &lt;code&gt;ethtool&lt;/code&gt; 可以得到网卡所用的驱动，从而得到网上设备是哪一类。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ethtool -i veth4NCTQ1 
driver: veth
version: 1.0
firmware-version: 
bus-info: 
supports-statistics: yes
supports-test: no
supports-eeprom-access: no
supports-register-dump: no
supports-priv-flags: no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 下面就这两种设备分别做一下介绍。&lt;/p&gt;
&lt;h1 id="tun-tap"&gt;tun &amp;amp; tap&lt;/h1&gt;
&lt;p&gt;TUN 与 TAP 是操作系统内核中的虚拟网络设备。不同于普通靠硬件网路板卡实现的设备，这些虚拟的网络设备全部用软件实现，并向运行于操作系统上的软件提供与硬件的网络设备完全相同的功能。&lt;/p&gt;
&lt;p&gt;TAP 等同于一个以太网设备，它操作第二层数据包如以太网数据帧。TUN 模拟了网络层设备，操作第三层数据包比如 IP 数据封包。&lt;/p&gt;
&lt;p&gt; 操作系统通过 TUN/TAP 设备向绑定该设备的用户空间的程序发送数据，反之，用户空间的程序也可以像操作硬件网络设备那样，通过 TUN/TAP 设备发送数据。在后种情况下，TUN/TAP 设备向操作系统的网络栈投递（或 “ 注入 ”）数据包，从而模拟从外部接受数据的过程。&lt;/p&gt;
&lt;p&gt;tun/tap 驱动程序实现了虚拟网卡的功能，tun 表示虚拟的是点对点设备，tap 表示虚拟的是以太网设备，这两种设备针对网络包实施不同的封装。&lt;/p&gt;
&lt;p&gt; 利用 tun/tap 驱动，可以将 tcp/ip 协议栈处理好的网络分包传给任何一个使用 tun/tap 驱动的进程，由进程重新处理后再发到物理链路中。&lt;/p&gt;
&lt;p&gt; 开源项目 openvpn 和 Vtun 都是利用 tun/tap 驱动实现的隧道封装 &lt;/p&gt;
&lt;p&gt; 虽然是出自一个娘，但它们仍然有大的不同。tun 是点对点的设备，而 tap 是一个普通的以太网卡设备。也就是说，tun 设备其实完全不需要有物理地址的。它收到和发出的包不需要 arp，也不需要有数据链路层的头。而 tap 设备则是有完整的物理地址和完整的以太网帧。&lt;/p&gt;
&lt;p&gt; 可以通过以下方法创建 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip tuntap add mode tap 
ip tuntap add mode tun
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 在 OpenStack 中，主要用 tap 来做虚拟机的网卡。&lt;/p&gt;
&lt;h1 id="veth"&gt;veth&lt;/h1&gt;
&lt;p&gt;veth 从名字上来看是 Virtual ETHernet 的缩写，它的作用很简单，就是要把从一个 network namespace 发出的数据包转发到另一个 namespace。veth 设备是成对的，一个是 container 之中，另一个在 container 之外，即在真实机器上能看到的。 建立 veth 类型的设备可以用下面的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip link add name veth0 type veth0 peer name veth1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 这里建立了一对 veth 设备，名字分别是 veth0 和 veth1。当向其中一个设备写入数据时，另一个设备就能拿到写入的数据。在 OpenStack 中的使用就是来穿透 namespace.&lt;/p&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wangcong.org/2011/06/19/-e5-85-b3-e4-ba-8e-tuntap/"&gt; 关于 tun/tap 设备 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wangcong.org/2011/07/03/-e4-bb-80-e4-b9-88-e6-98-af-veth/"&gt; 什么是 veth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.51know.info/system_base/tun_tap.html"&gt;linux 下 TUN/TAP 虚拟网卡的使用 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Network"></category></entry><entry><title>中信9积分</title><link href="http://xcodest.me/ecitic9.html" rel="alternate"></link><updated>2015-02-05T20:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-02-05:ecitic9.html</id><summary type="html">&lt;p&gt; 中信的 i 白金是张好卡，也是我的主力使用卡。其中 9 积分的活动还是比较厚道的。这个羊毛可以薅一薅。但是参加的店和地址还不少。我把北京西城这边的统计了一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 西树泡芙 - 9 积分换 36 元消费金 1 次 &lt;ul&gt;
&lt;li&gt; 西单北大街 131 号西单大悦城 3F-B14&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 星巴克 - 9 积分兑换大杯手工调制咖啡一杯 &lt;/li&gt;
&lt;li&gt; 哈根达斯 - 9 积分兑换单球冰淇淋 1 个 &lt;ul&gt;
&lt;li&gt; 复兴门内大街 101 号百盛购物中心南楼一层哈根达斯 &lt;/li&gt;
&lt;li&gt; 西单北大街 133 号君太百货一层 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 万宁 - 9 积分 =30 元消费金 &lt;ul&gt;
&lt;li&gt; 阜外大街 2 号北京万通新世界商品批发市场第一层 1A086-1A090、1A100-1A109 号商铺 &lt;/li&gt;
&lt;li&gt; 西单北大街 131 号大悦城 B2-29 至 31&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 汉堡王 - 皇堡 / 天椒皇堡套餐 &lt;ul&gt;
&lt;li&gt; 西单北大街 131 号西单大悦城 3F—20&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 歌帝梵商户 - 巧克力一条 &lt;ul&gt;
&lt;li&gt; 西单北大街 133 号君太太平洋百货 2F-B-02 及 3F-A-11 及 A-12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 另活动页面在 &lt;a href="http://creditcard.ecitic.com/youhui/120926/wanning.shtml"&gt;http://creditcard.ecitic.com/youhui/120926/wanning.shtml&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>MySQL Errno 150</title><link href="http://xcodest.me/mysql-errno-150.html" rel="alternate"></link><updated>2015-01-14T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-01-14:mysql-errno-150.html</id><summary type="html">&lt;p&gt; 做 OpenStack icehouse 升级到 Juno 过程中，升级 Neutron 数据库时遇到这个错误。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;neutron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migrate_to_ml2&lt;/span&gt; &lt;span class="n"&gt;openvswitch&lt;/span&gt; &lt;span class="nl"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//USER:PASSWORD@10.251.1.8/neutron&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/runpy.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;162&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_module_as_main&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pkg_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/runpy.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_code&lt;/span&gt;
    &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_globals&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/neutron/db/migration/migrate_to_ml2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/neutron/db/migration/migrate_to_ml2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;458&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vxlan_udp_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/neutron/db/migration/migrate_to_ml2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;138&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/schema.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2848&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;create_all&lt;/span&gt;
    &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1479&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_visitor&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_run_visitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visitorcallable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1122&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_visitor&lt;/span&gt;
    &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;traverse_single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/sql/visitors.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;122&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;traverse_single&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/ddl.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visit_metadata&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;traverse_single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/sql/visitors.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;122&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;traverse_single&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/ddl.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visit_table&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;662&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;720&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_execute_ddl&lt;/span&gt;
    &lt;span class="n"&gt;compiled&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;874&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_execute_context&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_handle_dbapi_exception&lt;/span&gt;
    &lt;span class="n"&gt;exc_info&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/util/compat.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;196&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;raise_from_cause&lt;/span&gt;
    &lt;span class="n"&gt;reraise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;exc_tb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;867&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_execute_context&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/default.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;324&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do_execute&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/MySQLdb/cursors.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;174&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errorhandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/MySQLdb/connections.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;defaulterrorhandler&lt;/span&gt;
    &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;errorclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorvalue&lt;/span&gt;
&lt;span class="n"&gt;sqlalchemy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;OperationalError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OperationalError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Can&amp;#39;t create table &amp;#39;neutron.ml2_network_segments&amp;#39; (errno: 150)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;\&lt;/span&gt;&lt;span class="n"&gt;nCREATE&lt;/span&gt; &lt;span class="n"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;ml2_network_segments&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tid&lt;/span&gt; &lt;span class="n"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NOT&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tnetwork_id&lt;/span&gt; &lt;span class="n"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NOT&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tnetwork_type&lt;/span&gt; &lt;span class="n"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NOT&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tphysical_network&lt;/span&gt; &lt;span class="n"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tsegmentation_id&lt;/span&gt; &lt;span class="n"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tPRIMARY&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tFOREIGN&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;network_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;networks&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;DELETE&lt;/span&gt; &lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 原因是 Mysql 有对外键约束 [1]，仔细查数据里发现 networks 表的 collcation 和新建上述表时的默认数据库 collcation 不一样。以下是 Mysql 对外键约束的描述 [1]，我遇到的是第二条错误 ( 加粗的部分 )。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Foreign key relationships involve a parent table that holds the central data values, and a child table with identical values pointing back to its parent. The FOREIGN KEY clause is specified in the child table. The parent and child tables must use the same storage engine. They must not be TEMPORARY tables.&lt;/li&gt;
&lt;li&gt;Corresponding columns in the foreign key and the referenced key must have similar data types. The size and sign of integer types must be the same. The length of string types need not be the same. For nonbinary (character) string columns, the character set and collation must be the same.&lt;/li&gt;
&lt;li&gt;MySQL requires indexes on foreign keys and referenced keys so that*  foreign key checks can be fast and not require a table scan. In the referencing table, there must be an index where the foreign key columns are listed as the first columns in the same order. Such an index is created on the referencing table automatically if it does not exist. This index might be silently dropped later, if you create another index that can be used to enforce the foreign key constraint. index_name, if given, is used as described previously.&lt;/li&gt;
&lt;li&gt;InnoDB permits a foreign key to reference any index column or group of columns. However, in the referenced table, there must be an index where the referenced columns are listed as the first columns in the same order.&lt;/li&gt;
&lt;li&gt;Index prefixes on foreign key columns are not supported. One consequence of this is that BLOB and TEXT columns cannot be included in a foreign key because indexes on those columns must always include a prefix length.&lt;/li&gt;
&lt;li&gt;If the CONSTRAINT symbol clause is given, the symbol value, if used, must be unique in the database. A duplicate symbol will result in an error similar to: ERROR 1005 (HY000): Can't create table 'test.#sql-211d_3' (errno: 121). If the clause is not given, or a symbol is not included following the CONSTRAINT keyword, a name for the constraint is created automatically.&lt;/li&gt;
&lt;li&gt;InnoDB does not currently support foreign keys for tables with user-defined partitioning. This includes both parent and child tables.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; 解决方法是 &lt;/strong&gt;：将 database 及 table 的 character 和 collcation 改成一样的就行了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;alter&lt;/span&gt; &lt;span class="k"&gt;database&lt;/span&gt; &lt;span class="n"&gt;neutron&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="k"&gt;character&lt;/span&gt; &lt;span class="kt"&gt;set&lt;/span&gt; &lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://bugs.launchpad.net/neutron/+bug/1332564"&gt;https://bugs.launchpad.net/neutron/+bug/1332564&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.mysql.com/doc/refman/5.1/en/create-table-foreign-keys.html"&gt;http://dev.mysql.com/doc/refman/5.1/en/create-table-foreign-keys.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="MySQL"></category></entry><entry><title>PIP install from local</title><link href="http://xcodest.me/pip-install-from-local.html" rel="alternate"></link><updated>2015-01-08T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-01-08:pip-install-from-local.html</id><summary type="html">&lt;p&gt; 在一些特殊环境中，服务器是不能联网的。此时要通过 pip 安装包会有一些麻烦。这时可以使用 pip 的 download 到本地的功能，来加速安装。&lt;/p&gt;
&lt;p&gt; 先在有网络的环境中下载下来所有需要的包：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --download &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.pip-packages -r requirement.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 在把这些包拷贝到目标环境中去，使用下面的命令来安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --no-index --find-links &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.pip-packages -r requirement.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 所有需要的包就安装上了。&lt;/p&gt;
&lt;p&gt; 为了方便使用，还可以把这两个命令弄成 alias 来使用 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alias pipcache=&amp;#39;pip install --download &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.pip-packages&amp;#39;
alias pipinstall=&amp;#39;pip install --no-index --find-links=file://&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.pip-packages/&amp;#39;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Python"></category></entry><entry><title>Nova flavor init</title><link href="http://xcodest.me/nova-flavor-init.html" rel="alternate"></link><updated>2014-09-11T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2014-09-11:nova-flavor-init.html</id><summary type="html">&lt;p&gt;ustack 的 flavor 做的还是挺全的，所以用了一个脚本来创建和其一样的 flavor 类型。&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/ecee9fcb00412cd67fe7.js?file=nova-flavor-init.sh'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;#!/bin/bash
#
# This configuration is copy from ustack.com

DEFAULT_ROOT_GB=40

nova-manage flavor create --name micro-1 --cpu 1 --memory 512 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name micro-2 --cpu 1 --memory 1024 --root_gb $DEFAULT_ROOT_GB --is_public True

nova-manage flavor create --name standard-1 --cpu 1 --memory 2048 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name standard-2 --cpu 2 --memory 4096 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name standard-4 --cpu 4 --memory 8192 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name standard-8 --cpu 8 --memory 16384 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name standard-12 --cpu 12 --memory 24576 --root_gb $DEFAULT_ROOT_GB --is_public True

nova-manage flavor create --name memory-1 --cpu 1 --memory 4096 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name memory-2 --cpu 2 --memory 8192 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name memory-4 --cpu 4 --memory 16384 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name memory-8 --cpu 8 --memory 24576 --root_gb $DEFAULT_ROOT_GB --is_public True

nova-manage flavor create --name compute-2 --cpu 2 --memory 2048 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name compute-4 --cpu 4 --memory 4096 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name compute-8 --cpu 8 --memory 8192 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name compute-12 --cpu 12 --memory 16384 --root_gb $DEFAULT_ROOT_GB --is_public True
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;</summary><category term="OpenStack"></category><category term="Nova"></category></entry><entry><title>Python cString raise exception when feed Unicode</title><link href="http://xcodest.me/python-cstring-unicode.html" rel="alternate"></link><updated>2014-09-09T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2014-09-09:python-cstring-unicode.html</id><summary type="html">&lt;p&gt;I gett following different result when using these two Class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cStringIO&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\u2222&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cStringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\u2222&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;UnicodeEncodeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;codec&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t encode character u&amp;#39;&lt;/span&gt;\&lt;span class="n"&gt;u2222&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; in position 0: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The root cause is explained on &lt;a href="https://docs.python.org/2/library/stringio.html#cStringIO.StringIO"&gt;document for cStringIO&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike the StringIO module, this module is not able to accept Unicode strings that cannot be encoded as plain ASCII strings.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Python"></category></entry><entry><title>Migrate SVN to GitLab</title><link href="http://xcodest.me/migrate-svn-to-gitlab.html" rel="alternate"></link><updated>2014-08-12T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2014-08-12:migrate-svn-to-gitlab.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt; 在 GitLab 上创建相对应的项目 / 项目组 &lt;/li&gt;
&lt;li&gt; 准备 ''users.txt'' 文件，来修正提交用户名。并手动修改 users.txt 的正确性 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;svn log &amp;lt;svn-url&amp;gt; --xml | grep -P &amp;quot;^&amp;lt;author&amp;quot; | sort -u | perl -pe &amp;#39;s/&amp;lt;author&amp;gt;(.*?)&amp;lt;\/author&amp;gt;/$1 = /&amp;#39; &amp;gt; users.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;users.txt 的文件格式如下 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Lei Zhang = Lei Zhang &amp;lt;zhang.lei.fly#gmail.com&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt; 把 SVN 项目使用 git-svn 进行克隆 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git svn clone --no-metadata --authors-file users.txt -s &amp;lt;svn-url&amp;gt; &amp;lt;project&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt; 处理 SVN 的分支和标签 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd &lt;span class="nt"&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
git for-each-ref refs/remotes/tags | cut -d / -f 4- | grep -v @ | while read tagname; do git tag &amp;quot;$tagname&amp;quot; &amp;quot;tags/$tagname&amp;quot;; git branch -r -d &amp;quot;tags/$tagname&amp;quot;; done
git for-each-ref refs/remotes | cut -d / -f 3- | grep -v @ | while read branchname; do git branch &amp;quot;$branchname&amp;quot; &amp;quot;refs/remotes/$branchname&amp;quot;; git branch -r -d &amp;quot;$branchname&amp;quot;; done&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Push 到 Gitlab 上的仓库 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add origin &amp;lt;git-repo-url&amp;gt;
git push origin --all
git push origin --tags
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt; 参考 &lt;/h2&gt;
&lt;p&gt;&lt;a href="http://git-scm.com/book/en/Git-and-Other-Systems-Migrating-to-Git"&gt;Git and Other Systems - Migrating to Git&lt;/a&gt;&lt;/p&gt;</summary><category term="Git"></category></entry><entry><title>硬派健身-减肥篇 阅读笔记</title><link href="http://xcodest.me/hard-gym-reading-note.html" rel="alternate"></link><updated>2014-07-19T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2014-07-19:hard-gym-reading-note.html</id><summary type="html">&lt;h2 id="_1"&gt; 战肥肉有氧不敌，强塑身无氧超神 &lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt; 长时间有氧运动 —— 似是而非的减肥妙计 &lt;ol&gt;
&lt;li&gt; 当我们的身体状态稳定，身体素质、生活习惯变化不大时，我们的体重和体脂含量都是只能加，不能减，只能胖，不能瘦。这就是我们序章介绍过的体重设定点理论。&lt;/li&gt;
&lt;li&gt; 很多实验都证实，单纯增加能量支出，做长时间、中高强度的有氧运动，无法有效地帮正常人减重。&lt;/li&gt;
&lt;li&gt; 你的身体也是一样，当它打定主意把你的体重维持在一个设定点上，就会有非常多的手段可以调节这些体重和脂肪。比如，瘦素是一种能减肥和帮助我们抑制食欲的身体激素。研究发现，如果我们单纯进行长时间有氧耐力运动减肥，增加了热量的支出，我们身体会减少瘦素的分泌，让我们多吃，多增长脂肪。效果可以持续好几天，&lt;/li&gt;
&lt;li&gt; 还有研究发现，马拉松运动员的瘦素分泌量仅为普通人的三分之一。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt; 共振 —— 跑步会伤害胖胖的你 ……&lt;ol&gt;
&lt;li&gt; 这也就是说，跑步等运动会在脂肪和关节等部位引起共振，共振的效应最后会引起身体与关节的损伤。目前的研究发现，脂肪的体积越大，重量越重，共振的效果越强，对身体的伤害也就越强烈。冲击力的输入振动频率是 10hz 左右，脂肪的固定振动频率是 2-10hz，可以引起共振，伤害到自己的身体组织 &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt; 世上减肥万法，唯有肌肉无敌 &lt;ol&gt;
&lt;li&gt; 肉和脂肪的密度差异。要知道，肌肉的密度大概是 1.12，而脂肪大概是 0.79。&lt;/li&gt;
&lt;li&gt; 在维持日常活动量的情况下，达拉斯有氧研究协会发现，每磅肌肉 24 小时基础热量消耗是 30-50 卡，但脂肪呢？还是只有可怜的 2 卡 ……（脂肪：伦家又不动啦 ~）&lt;/li&gt;
&lt;li&gt; 一般人，二十五岁之后，每年就会损失 2.5 千克的肌肉 &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt; 先有训练基础，之后减脂更佳 &lt;ol&gt;
&lt;li&gt; 但是经过一定训练积累的人，再参加有氧运动的效果绝对强于普通人太多 &lt;/li&gt;
&lt;li&gt; 力量训练超容易，持续效果超耐久 &lt;/li&gt;
&lt;li&gt; 加州理工大学一项运动研究表明，刚参加力量训练的人在经过两个月的系统负重训练后，他们的肌肉力量增长了 47%，肌肉总量增长了 9%。随后让他们在两个月里不参加任何形式的力量训练，肌肉保持松懈，却只让他们的肌肉力量减少了 23%，肌肉总量只减少 4%。&lt;/li&gt;
&lt;li&gt; 有氧运动的好处就十分有限，目前比较有效的只有降低血压，同时，血压降低的好处，会随着有氧运动的停止而停止。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt; 女童鞋们，你们不可能练成肌肉女 &lt;ol&gt;
&lt;li&gt; 睾丸酮水平决定了肌肉总量和水平。男女间，睾丸酮效用（睾酮水平及 AR 受体等影响）差了百倍，所以女性想练成金刚芭比是很难的。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt; 巧减重高强间歇，好身材双剑合璧 &lt;/h2&gt;
&lt;p&gt; 无敌天下的两项力量训练入门神功。一项是深蹲，一项是平板支撑。&lt;/p&gt;
&lt;h3 id="_3"&gt; 深蹲 &lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt; 深蹲在运动时能训练到三分之一的肌肉（骨骼肌）。训练肌肉体积可占全身四分之三以上。主训的是人体最强两肌，股四头肌和臀大肌。辅助的是人体次强两肌，腓肠肌和股二头肌。深蹲号称无氧运动之王。练好深蹲，不仅能增强各种运动表现，而且由于训练肌群多、大，消耗的能量也非常可观。&lt;/li&gt;
&lt;li&gt; 杜鲁门州立大学的科学家们测试卡路里燃烧的数量，最后发现，深蹲类运动比普通固定器械运动能多消耗 50% 的热量！并认为这是因为深蹲涉及了更多的稳定性肌肉。需求稳定性的大重量多关节训练是最佳力量燃脂训练之一。&lt;/li&gt;
&lt;li&gt; 另外，因为深蹲涉及如此多的肌肉纤维，使得它成为所有训练中最好的推动生长荷尔蒙水平的一种训练。正如日本研究者在 2006 年的一项研究中发现的那样，更多的生长荷尔蒙意味着更多的肌肉增长。&lt;/li&gt;
&lt;li&gt; 臀大肌是人体体积最大的肌肉之一，&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt; 如何做好深蹲 &lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt; 首先，找一个高 40 公分左右的小平凳（茶几沙发均可，只要是这个高度），要结实稳定哦（测试，当你照下文做时，你的大腿角度平行略低于水平，换句话说，小腿和大腿的角略小于 90°）。&lt;/li&gt;
&lt;li&gt; 手抱头，眼看前方。背挺直、反弓，屁股向后面的板凳坐下（向后坐，不是蹲马扎的向下坐，是接近蹲马桶的向后坐），想象自己有根儿尾巴（赛亚人、变身！），尾巴要冲着天。&lt;/li&gt;
&lt;li&gt; 向后坐时，绝对不要放松地重重向后坐。而是下肢紧张地向后，想象凳子是烧红的烙铁，绝不能放心放松坐实。因为深蹲时下半部肌肉要采取超等长收缩，也就是如同橡皮筋一样拉伸蓄满力量。此时感觉臀部被拉伸。换言之，注意力在髋关节和屁股。&lt;/li&gt;
&lt;li&gt; 屁股一碰到板凳茶几立即弹起，此时就能感觉是屁股发力了，臀大肌从拉伸状态变成收缩。大腿也跟着发力，整个脚踏实地面，整个人站起。&lt;/li&gt;
&lt;li&gt; 如果你觉得上述动作轻松做上 20 个不是事儿，请把最后动作环节改成发全身之力跳起！唤作板凳深蹲跳！在回落过程中应以前脚掌着地，膝关节角度为 140 到 150。关节角度尽量不变。保证肌腱等弹性成分受到的刺激强度。膝盖不好和体重过大者，慎用此动作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_5"&gt; 如何做平板支撑 &lt;/h3&gt;
&lt;p&gt; 动作是身体俯卧，双肘弯曲支撑在地面上，肩膀和肘关节垂直于地面，双脚踩地，身体离开地面，躯干伸直，头部、肩部、胯部和踝部保持在同一平面，腹肌收紧，腰不可以向下掉，腹部要紧张，另外臀也要夹紧，别掉下去！
，摆出普通的平板支撑动作，然后双手稍微向前移至躯干前方，同时缩短双肘之间的距离，从而延长力臂，减小支撑面的宽 &lt;/p&gt;
&lt;h3 id="hiit"&gt;HIIT—— 最强燃脂，最强塑身 &lt;/h3&gt;
&lt;p&gt; 而 HIIT 由于在某种程度上是无氧肌肉训练和有氧训练的结合，实际上是从根本上改变了体质。把体重的设定点往下调整。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 日常跑步计划：学校操场，半圈快跑（有能力冲刺）半圈慢跑（也别走着）。&lt;/li&gt;
&lt;li&gt; 跑步机计划：半分钟快跑，半分钟慢跑，然后一分钟快跑，一分钟慢跑，然后再半分钟快跑，半分钟慢跑。快跑慢跑的速度自己掌握，我认为快跑用最快速度的 80% 以上，慢跑用最快速度的 50% 比较合理。&lt;/li&gt;
&lt;li&gt; 自行车、动感单车：8 秒冲刺，12 秒普通骑。这是澳大利亚研究者实验中采用的方式。效果很好，受试人员体重平均减去 2.3 千克，有氧代谢能力增加了 15%。&lt;/li&gt;
&lt;li&gt; 跳绳：跳半分钟来组双摇，大概 20 个。跳不了双摇的童鞋，可以快跳半分钟，慢跳半分钟。
家里的计划：&lt;/li&gt;
&lt;li&gt; 我觉得比较靠谱的是直接上 HIIT 的操课，这个问题有人也问过我。我后来看了看大家推荐的比较多的郑多燕和 insanity。我觉得 insanity 比较，郑多燕的强度恐怕低了点。其中 insanity 的第八套强度不错，我觉得适合单跳，其他的适合搭配后面推荐的无氧运动双璧来一起做。当然也要看个人实际情况 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="hiit_1"&gt;HIIT 训练的重点：&lt;/h4&gt;
&lt;p&gt;HIIT 运动实际上就是间歇性地提高与降低运动强度，某种程度上自己可以排列组合。只要是大肌群训练（臀腿主要发力），高低强度交替，持续 10-20 分钟，就能够达到 HIIT 的健身目的。
至于高低强度交替的规律，我建议变化间隔要短，不要 5 分钟高强度，5 分钟低强度。因为高强度时间太长，无法保证强度忠实完成。最后还是成为中等或低强度的训练。另外，变化的间隔越短，对于脂肪的供能比提升越多。据猜测这可能与身体的预适应有关。有很多人提到了 HIIT 的强度过大，无法完成。我的建议是，循序渐进。你如果做不了一个 insanity 的全程，可以找个强度低一点的、二三十分钟的先练，慢慢来。如果你做不到十五分钟的冲刺交替跑，你可以只是快慢跑交替，慢慢进阶。锻炼的成果，更看重的是坚持。人的适应性是很强的，已经有很多朋友联系我说，他们做了我推荐的运动，第一次很难，第二次还可以，现在已经相对轻松了。HIIT 训练也是一样的。如果坚持，身体就能不断进步。最后达到希望的效果。&lt;/p&gt;</summary><category term="Book"></category></entry><entry><title>Glance Image Cache</title><link href="http://xcodest.me/glance-image-cache.html" rel="alternate"></link><updated>2014-07-17T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2014-07-17:glance-image-cache.html</id><summary type="html">&lt;p&gt;Glance 增加了一层 cache 的 Middleware，用来缓存从 file store 后端取过来的镜像。一定
程度上可以加快取镜像的速度。这个功能默认情况下是没开启的。&lt;/p&gt;
&lt;p&gt; 因为是通过 middleware 来控制的，所以只要修改一下 paster 的配置就行。更简单的是指定
glance-api 加载的 pipeline 的名字。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[deploy]&lt;/span&gt;
&lt;span class="c1"&gt;# possible value: none, cachine, keystone, keystone+caching, &lt;/span&gt;
&lt;span class="c1"&gt;# keystone+cachemanagement&lt;/span&gt;
&lt;span class="c1"&gt;# This value can get from glance-api-paste.conf file&lt;/span&gt;
&lt;span class="na"&gt;flavor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;keystone+caching&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 具体看下 &lt;code&gt;glance-api-paster.conf&lt;/code&gt; 文件就能明白。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[pipeline:glance-api]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versionnegotiation unauthenticated-context rootapp&lt;/span&gt;

&lt;span class="c1"&gt;# Use this pipeline for image caching and no auth&lt;/span&gt;
&lt;span class="k"&gt;[pipeline:glance-api-caching]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versionnegotiation unauthenticated-context cache rootapp&lt;/span&gt;

&lt;span class="c1"&gt;# Use this pipeline for caching w/ management interface but no auth&lt;/span&gt;
&lt;span class="k"&gt;[pipeline:glance-api-cachemanagement]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versionnegotiation unauthenticated-context cache cachemanage rootapp&lt;/span&gt;

&lt;span class="c1"&gt;# Use this pipeline for keystone auth&lt;/span&gt;
&lt;span class="k"&gt;[pipeline:glance-api-keystone]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versionnegotiation authtoken context rootapp&lt;/span&gt;

&lt;span class="c1"&gt;# Use this pipeline for keystone auth with image caching&lt;/span&gt;
&lt;span class="k"&gt;[pipeline:glance-api-keystone+caching]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versionnegotiation authtoken context cache rootapp&lt;/span&gt;

&lt;span class="c1"&gt;# Use this pipeline for keystone auth with caching and cache management&lt;/span&gt;
&lt;span class="k"&gt;[pipeline:glance-api-keystone+cachemanagement]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versionnegotiation authtoken context cache cachemanage rootapp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 不同的 pipeline 用到了不同的 middleware, 启作用的是 cache 和 cachemanagement 这两个
。&lt;/p&gt;
&lt;h2 id="ref"&gt;REF&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://docs.openstack.org/developer/glance/cache.html"&gt;The Glance Image Cache&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Glance"></category></entry><entry><title>Salt Mine</title><link href="http://xcodest.me/salt-mine.html" rel="alternate"></link><updated>2014-07-16T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2014-07-16:salt-mine.html</id><summary type="html">&lt;p&gt;Salt mine 可以在一定的控制内让 minion 拿到其它 minion 的信息。实现原理是：通过配置，让 minion 定期 ( 最短为 1 分钟 ) 的向 master 发送数据，而其它 minion 可以从 master 拿到这些数据。一定程度上实现的 minion 之间的通迅。在搭建 cluster 时，十分有用。&lt;/p&gt;
&lt;p&gt; 可以通过两种方法来配置 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;minion 的配置文件 &lt;/li&gt;
&lt;li&gt;master 的 pillar&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 使用 minion 配置时，要直接修改 minion 的配置文件，在 &lt;code&gt;/etc/salt/minion.d/mine.conf&lt;/code&gt; 加入如下内容 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mine_functions&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test.ping&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;network.ip_addrs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;interface&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;eth0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 使用 pillar 时配置时，只需要修改 master 的 pillar 配置即可。如在 &lt;code&gt;/srv/pillar/mine.conf&lt;/code&gt; 中加入如下内容 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mine_functions&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test.ping&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;network.ip_addrs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;interface&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;eth0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 然后把 &lt;code&gt;mine.conf&lt;/code&gt; 加入到 &lt;code&gt;/srv/pillar/top.sls&lt;/code&gt;, 这时可以指定哪些 minion 来配置 mine_functions。相比较而言，这种方式更加灵活一些。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;controller*&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 之后就可以使用如下语句拿到 mine 上报上来的结果的 ( 其实这个结果是保存在 master 的 &lt;code&gt;/var/cache/salt/master/minions/*/mine.p&lt;/code&gt; 的文件下就可找到上报上来的内容。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ salt &lt;span class="s1"&gt;&amp;#39;jeffrey-thinkpad&amp;#39;&lt;/span&gt; mine.get &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; network.ip_addrs
jeffrey-thinkpad:
    ----------
    icehouse-compute:
        - 10.0.0.11
    icehouse-controller:
        - 10.0.0.10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 另外，可以在 minion 上来修改上报的时间间隔。方法是增加 / 修改 &lt;code&gt;/etc/salt/minion.d/mine.conf&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mine_interval&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="ref"&gt;REF&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://docs.saltstack.com/en/latest/topics/mine/"&gt;Salt Mine&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="SaltStack"></category></entry><entry><title>linux bonding mode 6 break the vms</title><link href="http://xcodest.me/linux-bonding-mode-6-break-the-vms.html" rel="alternate"></link><updated>2014-04-14T19:39:51+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2014-04-14:linux-bonding-mode-6-break-the-vms.html</id><summary type="html">&lt;p&gt; 操作系统： ubuntu 12.04.1
内核 linux 3.2&lt;/p&gt;
&lt;p&gt; 今天发现一个网络上的问题，如果 Openstack Fixed IP 走 mode 6 绑定的网卡，不同物理机上的虚拟机是相互访问不了的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    +---- host1 -------+         +---- host2 ----+
                     eth0 ---- eth0 
                   /                \
    br1 ---- bond0                   bond0 ---- br1 
                   \                /
                     eth0 ---- eth0 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 机器的连接方式如上图，经检查发现，问题简化成两边的 br1 是不通的，现像是 ping 时，接收方收不到包，包只走到 bond0 就给丢弃了。原因在于内核上有问题。在网络上查到以下两个连接 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1098302 &lt;/li&gt;
&lt;li&gt;https://bugzilla.redhat.com/show_bug.cgi?id=487763&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 把内核升级到 3.8 之后就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install linux-image-generic-lts-raring
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Network"></category></entry><entry><title>Dhcp lease errors in vlan mode</title><link href="http://xcodest.me/dhcp-lease-errors-in-vlan-mode.html" rel="alternate"></link><updated>2013-08-27T08:50:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2013-08-27:dhcp-lease-errors-in-vlan-mode.html</id><summary type="html">&lt;p&gt; 在使用 &lt;code&gt;keepalived&lt;/code&gt; 的过程中，出现了 dhcp 失败，而导致 keepalived 工作不正常的问题。而且之前也出现过 dhcp 偶尔失败，导致虚拟机不能得到 IP, 从而不能访问的情况。虽然在 &lt;code&gt;/etc/sysconfig/network-scripts/ifcfg-eth0&lt;/code&gt; 中加上了如下语句：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PERSISTENT_DHCLIENT=1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 使得 dhcp 单次失败后，继续重试。但是仔细查看 dhclient 的日志后，发现它有大量的 dhcp request 失败 / 超时。在一个 &lt;a href="http://openstack.markmail.org/search/?q=Dhcp+lease+errors+in+vlan+mode#query:Dhcp%20lease%20errors%20in%20vlan%20mode+page:1+mid:7kjf4hljszpydsrx+state:results"&gt; 邮件列表 &lt;/a&gt; 中找到原因，如下：&lt;/p&gt;
&lt;p&gt;To fix issues with failed dhcp leases in vlan mode, upgrade to dnsmasq 2.6.1&lt;/p&gt;
&lt;p&gt;THE LONG VERSION&lt;/p&gt;
&lt;p&gt;There is an issue with the way nova uses dnsmasq in VLAN mode. It starts up a
single copy of dnsmasq for each vlan on the network host (or on every host in
multi_host mode). The problem is in the way that dnsmasq binds to an ip address
and port. Both copies can respond to broadcast packet, but unicast packets
can only be answered by one of the copies.&lt;/p&gt;
&lt;p&gt;In nova this means that guests from only one project will get responses to their
unicast dhcp renew requests.  Unicast projects from guests in other projects get
ignored. What happens next is different depending on the guest os.  Linux
generally will send a broadcast packet out after the unicast fails, and so the
only effect is a small (tens of ms) hiccup while interface is reconfigured.  It
can be much worse than that, however. I have seen cases where Windows just gives
up and ends up with a non-configured interface.&lt;/p&gt;
&lt;p&gt;This bug was first noticed by some users of openstack who rolled their own fix.
Basically, on linux, if you set the SO_BINDTODEVICE socket option, it will allow
different daemons to share the port and respond to unicast packets, as long as
they listen on different interfaces. I managed to communicate with Simon Kelley,
the maintainer of dnsmasq and he has integrated a fix for the issue in the
current version of dnsmaq.&lt;/p&gt;
&lt;p&gt;I don't know how may users out there are using vlan mode, but you should be able
to deal with this issue by upgrading dnsmasq. It would be great if the various
distributionss could upgrade as well, or at least try to patch in the fix. If
upgrading dnsmasq is out of the question, a possible workaround is to minimize
lease renewals with something like the following combination of config options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# release leases immediately on terminate
force_dhcp_release=true
# one week lease time
dhcp_lease_time=604800
# two week disassociate timeout
fixed_ip_disassociate_timeout=1209600
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is also documented &lt;a href="http://docs.openstack.org/trunk/openstack-compute/admin/content/configuring-vlan-networking.html#vlan-known-issues"&gt; Known issue with failed DHCP leases in VLAN configuration&lt;/a&gt;&lt;/p&gt;</summary><category term="DHCP"></category><category term="Network"></category><category term="VLAN"></category></entry><entry><title>Openstack Brief</title><link href="http://xcodest.me/openstack-brief.html" rel="alternate"></link><updated>2013-06-17T23:08:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2013-06-17:openstack-brief.html</id><summary type="html">&lt;p&gt; 自从 Openstack 诞生之日起，就受到越来越多的开发者，用户的关注。整个代码的规模和质量正在飞速的发展。随着各种功能的增加，Openstack 下面已经拥有了相当多子项目，来完成各种各样的功能。本文将简单介绍各个子项目的功能和发展。所有的项目现状是基于 Grizzly 的版本来写的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keystone&lt;/li&gt;
&lt;li&gt;Nova&lt;/li&gt;
&lt;li&gt;Cinder&lt;/li&gt;
&lt;li&gt;Glance&lt;/li&gt;
&lt;li&gt;Openstack Network(Quantum)&lt;/li&gt;
&lt;li&gt;LBaaS&lt;/li&gt;
&lt;li&gt;Ceilometer&lt;/li&gt;
&lt;li&gt;Baremetal&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="keystone"&gt;Keystone&lt;/h1&gt;
&lt;p&gt;keystone 是 Openstack 的认证和服务注册模块。其结构比较简单。其功能包括 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt; 认证 &lt;/strong&gt; 主要功能是管理用户和用户组的信息，后端可以绑定 ldap, mysql 等认证方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; 服务注册模块 &lt;/strong&gt; 主要用于管理 Openstack 相关服务的地址，所有的服务都要先注册到 Keystone 中，才可以使用。它可使用基于文件的模板，也可以使用数据库存储。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Token&lt;/strong&gt; 管理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 相对于其它子项目来说，keystone 最近的变化并不是太大。将来一个比较大的变化就是基于 domain 的权限控制，届时 Tenant 里也可以细经出管理员和使用者的角色，并有详细的权限功能控制。&lt;/p&gt;
&lt;h1 id="nova"&gt;Nova&lt;/h1&gt;
&lt;p&gt;Nova 是 Openstack 最早的子项目。现在其它项目如 cinder, quantum(Openstack Network) 都是来自于该项目。可以说这是 Openstack 中最复杂，最主要的部分。它负责 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 用户接口 (nova-api)。处理来自于用户的请求，并做出合理的响应。&lt;/li&gt;
&lt;li&gt; 计算调度 (nova-scheduler)。用于在物理之前进行资源的调配。&lt;/li&gt;
&lt;li&gt; 虚拟化的管理 (nova-compute)。管理虚拟机的适配接口。通过它可以管理真实的虚拟技术驱动的机器，如 KVM, XEN, Hypervisor V 等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 当然还有一些功能如 nova-network, nova-volume 已经从 nova 项目中迁移出来，成为独立的子项目。将来一段时间的变化，主要集中在 nova-network 的废弃，nova-conductor 的更加完善，新的 api(v3) 的支持，对于祼机的支持。&lt;/p&gt;
&lt;h1 id="cinder"&gt;Cinder&lt;/h1&gt;
&lt;p&gt;Cinder 是由 nova-volume 分化而来，用于管理虚拟机的块存储 (block storage), 类似 AWS 的 EBS。其功能主要是创建，维护，删除块存储。后端可以使用 LVM, glusterFs, Ceph, NFS 等软件技术的存储，也可以使用 NetApp, Huawei，IBM 等商用解决方案。当然也可以自己编写自己存储的 Driver 来支持更多的存储类型。&lt;/p&gt;
&lt;h1 id="glance"&gt;Glance&lt;/h1&gt;
&lt;p&gt;Glance 用于管理各种系统的镜像。他后端也可以配置各种存储方案。包括本地，swift, ceph 等。&lt;/p&gt;
&lt;h1 id="openstack-network"&gt;Openstack Network.&lt;/h1&gt;
&lt;p&gt;(Quantum 名称因为商标问题停用）。&lt;/p&gt;
&lt;p&gt; 网络基本是 Openstack 最复杂的模块，涉及到的技术和协议相当多，也最容易出问题。也正因为此，很有必要将网络模块从越来越笨重的 nova 的拿出来。&lt;/p&gt;
&lt;p&gt;Openstack Network 提示了强大的网络服务（Network-as-a-service), 用来实现 L2, L3 层的网络。在原有的 nova-network 的基础之上，增加了相当多的功能 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 加上了 xvlan, gre 等网络技术，并可以编写自己的插件，来增加其功能 &lt;/li&gt;
&lt;li&gt; 使用者可以创建更加丰富的网络模型，如私用路由器等 &lt;/li&gt;
&lt;li&gt; 为 Qos, 流量监控等提供支持。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 现在 Quantum 还有一些问题，如 HA 方案不成熟，不太适用于 Production。不过根据社区的计划，下一个版本 (H) 将会把 nova-network 废弃掉。所以 Quantum 才是真正的趋势。现在很有必要将其吃透。&lt;/p&gt;
&lt;h1 id="lbaas"&gt;LBaaS&lt;/h1&gt;
&lt;p&gt;Load-Balancer-as-a-service. 在 Quantum 基础上实现的负载均衡。后端既可以使用 haproxy, 也可以使用 cisco, f5 等硬件。（不过我还没有功能搭建过这个服务。&lt;/p&gt;
&lt;h1 id="ceilometer"&gt;Ceilometer&lt;/h1&gt;
&lt;p&gt;Openstack 的计量，计费模块。可以统计 Cpu, IO, Network 使用的详细情况。对公有云和私有云都有极大的好处。现在也有一个 Horizon 的插件，可以直接在 dashboard 里显示使用情况（将来，该插件会合并到 horizon 中）&lt;/p&gt;
&lt;h1 id="baremetal"&gt;Baremetal&lt;/h1&gt;
&lt;p&gt; 增加 Openstack 对裸机的管理功能。可以实现直接对裸机进行系统安装，配置。模糊了虚拟化和物理机之间的界线。现在所有模块包括 nova, glance, cinder 都在努力增强这方面的功能。
这个模块，我更期望是可以建立 Nested-Openstack。同一个 Openstack 环境，既管理物理机，又自动在物理机上安装 Openstack 的模块来成为 Openstack 的一部分。&lt;/p&gt;</summary></entry></feed>