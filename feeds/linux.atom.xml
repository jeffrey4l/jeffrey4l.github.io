<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Xcodest</title><link href="http://xcodest.me/" rel="alternate"></link><link href="http://xcodest.me/feeds/linux.atom.xml" rel="self"></link><id>http://xcodest.me/</id><updated>2015-02-09T00:00:00+08:00</updated><entry><title>tun &amp; veth设备</title><link href="http://xcodest.me/tun-vethshe-bei.html" rel="alternate"></link><updated>2015-02-09T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2015-02-09:tun-vethshe-bei.html</id><summary type="html">&lt;p&gt;OpenStack 的 Neutron 中会建立好多网卡设备。大体上这些网卡可以分为两类 tun 和 veth。下面就这两种设备分别做一下介绍。&lt;/p&gt;
&lt;p&gt;&lt;img alt="OpenStack Neutron Network" src="images/neutron-ovs-compute.png" /&gt;&lt;/p&gt;
&lt;h1&gt;tun &amp;amp; tap&lt;/h1&gt;
&lt;p&gt;TUN与TAP是操作系统内核中的虚拟网络设备。不同于普通靠硬件网路板卡实现的设备，这些虚拟的网络设备全部用软件实现，并向运行于操作系统上的软件提供与硬件的网络设备完全相同的功能。&lt;/p&gt;
&lt;p&gt;TAP 等同于一个以太网设备，它操作第二层数据包如以太网数据帧。TUN模拟了网络层设备，操作第三层数据包比如IP数据封包。&lt;/p&gt;
&lt;p&gt;操作系统通过TUN/TAP设备向绑定该设备的用户空间的程序发送数据，反之，用户空间的程序也可以像操作硬件网络设备那样，通过TUN/TAP设备发送数据。在后种情况下，TUN/TAP设备向操作系统的网络栈投递（或“注入”）数据包，从而模拟从外部接受数据的过程。&lt;/p&gt;
&lt;p&gt;tun/tap 驱动程序实现了虚拟网卡的功能，tun表示虚拟的是点对点设备，tap表示虚拟的是以太网设备，这两种设备针对网络包实施不同的封装。&lt;/p&gt;
&lt;p&gt;利用tun/tap 驱动，可以将tcp/ip协议栈处理好的网络分包传给任何一个使用tun/tap驱动的进程，由进程重新处理后再发到物理链路中。&lt;/p&gt;
&lt;p&gt;开源项目openvpn和Vtun都是利用tun/tap驱动实现的隧道封装&lt;/p&gt;
&lt;p&gt;虽然是出自一个娘，但它们仍然有大的不同。tun是点对点的设备，而tap是一个普通的以太网卡设备。也就是说，tun设备其实完全不需要有物理地址的。它收到和发出的包不需要arp，也不需要有数据链路层的头。而tap设备则是有完整的物理地址和完整的以太网帧。&lt;/p&gt;
&lt;p&gt;可以通过以下方法创建&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;tuntap&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;tap&lt;/span&gt; 
&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;tuntap&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;tun&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 OpenStack 中，主要用tap来做虚拟机的网卡。&lt;/p&gt;
&lt;h1&gt;veth&lt;/h1&gt;
&lt;p&gt;veth 从名字上来看是 Virtual ETHernet 的缩写，它的作用很简单，就是要把从一个 network namespace 发出的数据包转发到另一个 namespace。veth 设备是成对的，一个是 container 之中，另一个在 container 之外，即在真实机器上能看到的。 建立 veth 类型的设备可以用下面的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;veth0&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;veth0&lt;/span&gt; &lt;span class="n"&gt;peer&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;veth1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里建立了一对veth设备，名字分别是 veth0 和 veth1。当向其中一个设备写入数据时，另一个设备就能拿到写入的数据。在 OpenStack 中的使用就是来穿透 namespace.&lt;/p&gt;
&lt;h1&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wangcong.org/2011/06/19/-e5-85-b3-e4-ba-8e-tuntap/"&gt;关于 tun/tap 设备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wangcong.org/2011/07/03/-e4-bb-80-e4-b9-88-e6-98-af-veth/"&gt;什么是veth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.51know.info/system_base/tun_tap.html"&gt;linux下TUN/TAP虚拟网卡的使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Network"></category></entry><entry><title>Salt Mine</title><link href="http://xcodest.me/salt-mine.html" rel="alternate"></link><updated>2014-07-16T00:00:00+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2014-07-16:salt-mine.html</id><summary type="html">&lt;p&gt;Salt mine 可以在一定的控制内让minion拿到其它minion的信息。实现原理是：通过配置，让minion定期(最短为1分钟)的向master发送数据，而其它minion可以从master拿到这些数据。一定程度上实现的minion之间的通迅。在搭建cluster时，十分有用。&lt;/p&gt;
&lt;p&gt;可以通过两种方法来配置:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;minion的配置文件&lt;/li&gt;
&lt;li&gt;master的pillar&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用minion配置时，要直接修改minion的配置文件，在&lt;code&gt;/etc/salt/minion.d/mine.conf&lt;/code&gt; 加入如下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;mine_functions&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;test.ping&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[]&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;network.ip_addrs&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;interface&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;eth0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用pillar时配置时，只需要修改master的pillar配置即可。如在&lt;code&gt;/srv/pillar/mine.conf&lt;/code&gt; 中加入如下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;mine_functions&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;test.ping&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[]&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;network.ip_addrs&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;interface&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;eth0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后把&lt;code&gt;mine.conf&lt;/code&gt;加入到&lt;code&gt;/srv/pillar/top.sls&lt;/code&gt;, 这时可以指定哪些minion来配置mine_functions。相比较而言，这种方式更加灵活一些。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;controller*&amp;#39;&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;mine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后就可以使用如下语句拿到mine上报上来的结果的(其实这个结果是保存在master的&lt;code&gt;/var/cache/salt/master/minions/*/mine.p&lt;/code&gt;的文件下就可找到上报上来的内容。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;jeffrey-thinkpad&amp;#39;&lt;/span&gt; mine.get &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; network.ip_addrs
jeffrey-thinkpad:
    ----------
    icehouse-compute:
        - 10.0.0.11
    icehouse-controller:
        - 10.0.0.10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，可以在minion上来修改上报的时间间隔。方法是增加/修改&lt;code&gt;/etc/salt/minion.d/mine.conf&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mine_interval&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;REF&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://docs.saltstack.com/en/latest/topics/mine/"&gt;Salt Mine&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="SaltStack"></category></entry><entry><title>linux bonding mode 6 break the vms</title><link href="http://xcodest.me/linux-bonding-mode-6-break-the-vms.html" rel="alternate"></link><updated>2014-04-14T19:39:51+08:00</updated><author><name>Jeffrey4l</name></author><id>tag:xcodest.me,2014-04-14:linux-bonding-mode-6-break-the-vms.html</id><summary type="html">&lt;p&gt;操作系统： ubuntu 12.04.1
内核 linux 3.2&lt;/p&gt;
&lt;p&gt;今天发现一个网络上的问题，如果 Openstack Fixed IP 走 mode 6 绑定的网卡，不同物理机上的虚拟机是相互访问不了的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    +---- host1 -------+         +---- host2 ----+
                     eth0 ---- eth0 
                   /                \
    br1 ---- bond0                   bond0 ---- br1 
                   \                /
                     eth0 ---- eth0 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;机器的连接方式如上图，经检查发现，问题简化成两边的 br1 是不通的，现像是ping时，接收方收不到包，包只走到bond0就给丢弃了。原因在于内核上有问题。在网络上查到以下两个连接 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1098302 &lt;/li&gt;
&lt;li&gt;https://bugzilla.redhat.com/show_bug.cgi?id=487763&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;把内核升级到3.8之后就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lts&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;raring&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Network"></category></entry></feed>