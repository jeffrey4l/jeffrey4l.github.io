<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>代码杂货铺</title><link>http://xcodest.me/</link><description>关注云计算，容器和Linux</description><lastBuildDate>Sun, 09 Dec 2018 00:00:00 +0800</lastBuildDate><item><title>记一次 ceilometer 性能分析</title><link>http://xcodest.me/ceilometer-performance-analysis.html</link><description>&lt;p&gt;近期在一个 OpenStack 环境中，由于虚拟机个数达到5000以上，发现 ceilometer-agent-notification 服务 CPU 占用很高, 每个 process worker 就可以占用满一颗 CPU。但是消息处理速度超级慢，造成了 RabbitMQ 消息的大量积压。增加 ceilometer-agent-notificaion 进程个数或 worker 个数基本没有什么效果。感觉上应该是 ceilometer 本身代码有问题，所以有了这次分析。&lt;/p&gt;
&lt;p&gt;对于性能分析，可以有以下几种方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态分析： 对代码比较熟悉的话，可以通过直接翻代码的方式，猜可能的性能瓶颈点。去看代码逻辑。 辅助使用 timeit, cProfile 等模块，修改代码，增加检查点，打印单次的运行结果。看每个函数的的调用次数，来定位问题。&lt;/li&gt;
&lt;li&gt;动态分析： 使用如 perf&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;, systemtap, 的动态性能分析工具，统计进程在一个时间段内的运行统计信息，再配和 FlagGraph 生成火焰图，来定位性能问题点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于后者，笔者之前看过一些书籍和文章，所以正好实践一下。对于 python 代码的情况，可以使用 pyflame&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pyflame 是 Uber 公司开源的用于生成 Python 程序火焰图的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="ceilometer"&gt;ceilometer 架构&lt;/h2&gt;
&lt;p&gt;ceilometer 架构经历过多次变化，已经简化成了如下图的结构。ceilometer 只有两个服务。ceilometer polling 服务负责从nova, swift, libvirt 等服务拉取相关数据，并发送到 MQ 里面的 notification.sample 队列。之后 ceilometer notification 从 MQ 中取到数据后，通过 &lt;code&gt;pipeline.yml&lt;/code&gt; 的定义，进行数据转化后，再发给后面的 gnocchi api 进行存储。 这次的问题是出现在 ceilometer notification 进程。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   +--------------------+
   | Ceilometer Polling |
   +---------+----------+
             |
      +======v========+
     / Message Queue /
     +=======+=======+
             |
 +-----------v-------------+
 | Ceilometer Notification |
 +------------+------------+
             |
      +------v------+
      | gnocchi api |
      +-------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;问题&lt;/h2&gt;
&lt;p&gt;当开启 16 worker 的情况下，MQ 的处理速度如下图。前面部分是优化前的，基本消息处理速度在 10/s，平均每个 worker 每秒连一个请求都处理不完 。(后部分上升是因为有几个worker 做了优化)&lt;/p&gt;
&lt;p&gt;&lt;img alt="rabbitmq noti" src="images/ceilometer-perf/rabbitmq.jpg"&gt;&lt;/p&gt;
&lt;p&gt;安装 pyflame 工具&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install autoconf automake gcc-c++ git libtool python-devel make

git clone https://github.com/uber/pyflame.git
cd pyflame
./autogen.sh
./configure
make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;命令会生成在 &lt;code&gt;./src/pyflame&lt;/code&gt; 位置&lt;/p&gt;
&lt;p&gt;安装 FlameGraph&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt; 工具 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/brendangregg/FlameGraph.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用如下命令抓取数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./src/pyflame -p &amp;lt;pid&amp;gt; -s 60 -r 0.01 &amp;gt; ceilometer-notification.pyflame
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后使用 FlameGraph 工具目录下的 &lt;code&gt;flamegraph.pl&lt;/code&gt; 工具把 pyflame 数据生成火焰图&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;flamegraph.pl ceilometer-notification.pyflame &amp;gt; ceilometer-notification.svg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一次抓取的图如下, 完整 SVG 见 &lt;a href="images/ceilometer-perf/notification_perf_before.svg" target="_blank"&gt;notification_perf_before.svg&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ceilometer notification perf" src="images/ceilometer-perf/notification_perf_before.jpg"&gt;&lt;/p&gt;
&lt;p&gt;看图上蓝框部分，可以看到 ceilometer 在处里完数据后，向gnocchi api 发送数据时，居然花了近 20% 的 CPU 时间在向 keystone 请求 endpoint 的地址，这明显是有问题，对于 endpoint ，一般来说是不会发生变化的，完全可以把他缓存在本地，而不是每次都向 keystone 请求。而且对于 ceilometer 服务来说，每个消息都请求一次 keystone 的话，也会对其造成很大的压力。&lt;/p&gt;
&lt;p&gt;通过查看代码，最后定位到了 keystoneauth 的代码位置上，具体见 &lt;a href="https://github.com/openstack/keystoneauth/blob/f2ad956f8256fb6fec888472b3364a5f1e8c8961/keystoneauth1/session.py#L699-L711" target="_blank"&gt;keystoneauth/keystoneauth1/session#L699-L711&lt;/a&gt;, 摘录如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netloc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;endpoint_override&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoint_override&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;_StringFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;endpoint_filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_endpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;endpoint_filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndpointNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当上层传过来的 url 不包含 netloc 时(如 &lt;code&gt;url=/v1/resource&lt;/code&gt;) ，而且没有配置 endpoint_override 就会从 keystone 里面重新拉取。而 ceilometer 里面的 gnocchi client 正好触发了 &lt;code&gt;base_url = self.get_endpoint&lt;/code&gt; 逻辑， 从而重新获取了一次 endpoint。&lt;/p&gt;
&lt;p&gt;定位到代码位置就好解决了，可以修改ceilometer 里面的代码，在创建 gnocchi client 时，传到 &lt;code&gt;endpoint_override&lt;/code&gt; 参数, 相关修改已经提交社区，参见&lt;a href="https://review.openstack.org/623864" target="_blank"&gt;Pass gnocchi endpoint into adapter endpoint_override param&lt;/a&gt;&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;打完以上 patch 后，重新抓取火焰图如下, SVG文件见&lt;a href="images/ceilometer-perf/notification_perf_after.svg" target="_blank"&gt;notification_perf_after.svg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="notification perf after" src="images/ceilometer-perf/notification_perf_after.jpg"&gt;&lt;/p&gt;
&lt;p&gt;对比优化前, 右部分的在于已经不在调用 get_endpoint 接口。也就有了本文一开始的图，每秒的消息处理速度由 10/s 上升到了 40/s &lt;/p&gt;
&lt;h2 id="_2"&gt;后记&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pyflame 生成火焰图的方式来定位性能或代码问题还是很方便的。&lt;/li&gt;
&lt;li&gt;估计 OpenStack 里面其它地方的代码也会有类似的问题，感觉更好的修复方式，是在 keystoneauth 里面自动缓存当前所有的 endpoints, 有需要的时候再刷新。&lt;/li&gt;
&lt;li&gt;优化后，ceilometer-notification 处理消息时，还是会占用100% 的CPU, 主要原因从火焰图上看是对 json 的解析花掉了大量时间，进一步优化的话，可能需要换性能更好的 json 解析库或使用其它序列化方式。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ref"&gt;REF&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;http://www.brendangregg.com/perf.html&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;https://github.com/uber/pyflame&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;https://review.openstack.org/623864&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;https://github.com/brendangregg/FlameGraph&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Sun, 09 Dec 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2018-12-09:/ceilometer-performance-analysis.html</guid></item><item><title>使用 Ansible 管理 Kubernetes 资源</title><link>http://xcodest.me/use-ansible-manage-kubernetes-resources.html</link><description>&lt;p&gt;前两天，一篇&lt;a href="https://medium.com/virtuslab/think-twice-before-using-helm-25fbb18bc822" target="_blank"&gt;「Think twice before using Helm」&lt;/a&gt;(译文:&lt;a href="https://mp.weixin.qq.com/s/5iG9kZl7Qp5l3_BCXajrSA" target="_blank"&gt;「恕我直言，对Helm大家还是要三思而后用」&lt;/a&gt;) 引起了大家的关注。作者从认证，生命周期管理，错误处理等多个角度说明了 Helm 自身的问题。我基本赞同作者的观点。多数情况下我们只是把 helm 当做一个模板引擎在使用，把 charts 生成 Kubernetes 可以处理的格式。但是从使用角度来说，这个模板实现的太重了。有兴趣的可以去读读原文。&lt;/p&gt;
&lt;p&gt;那如果 Helm 不轻量好用的话，我们有啥其他选择?&lt;/p&gt;
&lt;p&gt;Ansible 做为部署管理的工具，正在受到越来越多的运维人员的追捧。他支持 Jinja2 的模板引擎，而且是无代理节点的架构，很方便来做一些模板工作。所以本文来介绍使用 Ansible 如何管理 Kubernetes 上面的资源。&lt;/p&gt;
&lt;p&gt;首先使用 Ansible 避免不了使用其模块。与 Kubernetes 相关的模块可以从[1]找到。现在主要有&lt;code&gt;k8s&lt;/code&gt;, &lt;code&gt;k8s_facts&lt;/code&gt;, &lt;code&gt;k8s_scale&lt;/code&gt;, &lt;code&gt;kubernetes&lt;/code&gt;和&lt;code&gt;oc&lt;/code&gt; 5个模块。其中 &lt;code&gt;kubernetes&lt;/code&gt; 和 &lt;code&gt;oc&lt;/code&gt; 模块因为实现逻辑不好用，在 ansible 2.6 版本中已经废弃掉， 推荐使用前三个。其中，&lt;code&gt;k8s_scale&lt;/code&gt; 来自 ansible 2.5, &lt;code&gt;k8s&lt;/code&gt; 来自 ansible 2.6, &lt;code&gt;k8s_facts&lt;/code&gt; 来自 ansible 2.7。使用这三个模块的话，还需要安装 &lt;code&gt;openshift&lt;/code&gt; 的 Python 包。以下代码全部基于 ansible 2.7 版本。&lt;/p&gt;
&lt;h2 id="k8s"&gt;k8s 模块&lt;/h2&gt;
&lt;p&gt;管理 kubernetes 各种资源的话，使用 &lt;code&gt;k8s&lt;/code&gt; 模块就可以了，如下是创建 namespace 的写法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create a k8s namespace&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;k8s&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;testing&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;api_version&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Namespace&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;state&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果要创建一个 Service, 也可以使用如下面的写法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create a Service object from an inline definition&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;k8s&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;state&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;definition&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;web&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;namespace&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;testing&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;galaxy&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;service&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;web&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;selector&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;galaxy&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;service&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;web&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;protocol&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;TCP&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;targetPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8000&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port-8000-tcp&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到 &lt;code&gt;definition&lt;/code&gt; 里面就是原生的 Kubernetes 里面的写法，而 &lt;code&gt;k8s&lt;/code&gt; 模块的参数也写少，所以上手会很快。&lt;/p&gt;
&lt;p&gt;如果 k8s 模块和 ansible &lt;code&gt;lookup&lt;/code&gt; 插件合用的话，可以写出更加简洁的代码，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# tasks.yml&lt;/span&gt;
&lt;span class="x"&gt;- name: Create a Service object from an external file&lt;/span&gt;
&lt;span class="x"&gt;  var:&lt;/span&gt;
&lt;span class="x"&gt;    name: &amp;quot;web&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;  k8s:&lt;/span&gt;
&lt;span class="x"&gt;    state: present&lt;/span&gt;
&lt;span class="x"&gt;    definition: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;lookup&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;template&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/service.yml&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nf"&gt;from_yaml&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# /path/to/service.yml&lt;/span&gt;
&lt;span class="x"&gt;---&lt;/span&gt;
&lt;span class="x"&gt;apiVersion: v1&lt;/span&gt;
&lt;span class="x"&gt;kind: Service&lt;/span&gt;
&lt;span class="x"&gt;metadata:&lt;/span&gt;
&lt;span class="x"&gt;  name: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;          # &amp;lt;-- 这里可以使用变量&lt;/span&gt;
&lt;span class="x"&gt;namespace: testing&lt;/span&gt;
&lt;span class="x"&gt;labels:&lt;/span&gt;
&lt;span class="x"&gt;  app: galaxy&lt;/span&gt;
&lt;span class="x"&gt;  service: web&lt;/span&gt;
&lt;span class="x"&gt;spec:&lt;/span&gt;
&lt;span class="x"&gt;  selector:&lt;/span&gt;
&lt;span class="x"&gt;    app: galaxy&lt;/span&gt;
&lt;span class="x"&gt;    service: web&lt;/span&gt;
&lt;span class="x"&gt;ports:&lt;/span&gt;
&lt;span class="x"&gt;  - protocol: TCP&lt;/span&gt;
&lt;span class="x"&gt;    targetPort: 8000&lt;/span&gt;
&lt;span class="x"&gt;    name: port-8000-tcp&lt;/span&gt;
&lt;span class="x"&gt;    port: 8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到 Kubernetes service 文件可以完全从 task 里面独立出来，独立后的写法就是原生的 kubernetes 的格式，基本就和 Charts 的结构差不多了。&lt;/p&gt;
&lt;p&gt;基于此，完全可以使用这种方式替换掉 helm 的模板功能，而且没有引入任何额外的依赖，就是直接的 ansible 生成相关文件，丢给 kubernetes api 来处理。等部署完成后，我们也可以脱离 Ansible 继续通过 &lt;code&gt;kubelet&lt;/code&gt; 命令维护这些资源。也正是由于这么简洁的实现，&lt;code&gt;k8s&lt;/code&gt; 模块可以管理 Kubernetes 和 OpenShift, 也可以管理各种 &lt;code&gt;CRD&lt;/code&gt; 资源。&lt;/p&gt;
&lt;p&gt;相比于 helm ， 这种方法的缺点在于 YAML 文件都要自己写，没有社区在维护的 Charts。不像 helm 那样，一个命令就可以把服务都安装上。前期的工作还是挺多的。但是从另外一个角度来说，社区维护的 Charts 做一些 Demo 还可以，真要生产上面使用，还是要做大量工作的。所以从这个角度上讲，使用 Ansible 也没有带来太大的工作量。&lt;/p&gt;
&lt;p&gt;我更期待社区可以使用 Ansible 直接管理 Charts 资源，或可以有一个工具把 Charts 的 Go 模板转成 Ansible 可以接受的 Jinja2 格式。&lt;/p&gt;
&lt;h2 id="k8s_scale-k8s_facts"&gt;k8s_scale 和  k8s_facts 模块&lt;/h2&gt;
&lt;p&gt;这两个模块算辅助的功能，我觉得使用的机会可能并不会太多。&lt;code&gt;k8s_scale&lt;/code&gt; 的例子如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- name: Scale deployment up, and extend timeout
  k8s_scale:
    api_version: v1
    kind: Deployment
    name: elastic
    namespace: myproject
    replicas: 3
    wait_timeout: 60

- name: Scale deployment down when current replicas match
  k8s_scale:
    api_version: v1
    kind: Deployment
    name: elastic
    namespace: myproject
    current_replicas: 3
    replicas: 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它可以动态调整 Deployment 的 &lt;code&gt;replicas&lt;/code&gt; 个数，基本上等同于&lt;code&gt;kubectl scale&lt;/code&gt; 命令，但是这个功能基本可以使用 &lt;code&gt;k8s&lt;/code&gt; 模块通过改变 &lt;code&gt;replicas&lt;/code&gt; 参数来调整。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;k8s_facts&lt;/code&gt;的例子如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- name: Get an existing Service object
  k8s_facts:
    api_version: v1
    kind: Service
    name: web
    namespace: testing
  register: web_service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用他，你可以检查某个资源是否存在，如果存在的话，还可以获得这个资源的yaml 文件描述，我觉得在 Ansible 流程控制中会有一些作用，可以根据当前 Kubernets 里面资源情况，有选择的做一些动作。&lt;/p&gt;
&lt;h2 id="_1"&gt;小技巧&lt;/h2&gt;
&lt;p&gt;因为 Ansible 是 Python 编写的，在使用 pip 安装时容易破坏系统已经安装的 Python 包，推荐使用虚拟环境来安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# mkvirtualenv --system-site-packages ansible
# pip install &amp;#39;ansible&amp;lt;2.7&amp;#39; openshift
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用时，需要指定 Ansible 使用的 python interpreter 变量 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# workon ansible
# ansible-playbook -i localhost, -c local test.yml  -e ansible_python_interpreter=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/bin/python
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="demo"&gt;demo&lt;/h2&gt;
&lt;p&gt;以下是使用 ansible 在 OpenShift 上面部署 echoserver 的一个完整例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;---&lt;/span&gt;
&lt;span class="x"&gt;- hosts: localhost&lt;/span&gt;
&lt;span class="x"&gt;  connection: local&lt;/span&gt;
&lt;span class="x"&gt;  gather_facts: false&lt;/span&gt;
&lt;span class="x"&gt;  vars:&lt;/span&gt;
&lt;span class="x"&gt;    namespace: demo&lt;/span&gt;
&lt;span class="x"&gt;  tasks:&lt;/span&gt;
&lt;span class="x"&gt;    - name: Create echo server deployment config&lt;/span&gt;
&lt;span class="x"&gt;      k8s:&lt;/span&gt;
&lt;span class="x"&gt;        namespace: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;namespace&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;        definition:&lt;/span&gt;
&lt;span class="x"&gt;          apiVersion: v1&lt;/span&gt;
&lt;span class="x"&gt;          kind: DeploymentConfig&lt;/span&gt;
&lt;span class="x"&gt;          metadata:&lt;/span&gt;
&lt;span class="x"&gt;            name: echoserver&lt;/span&gt;
&lt;span class="x"&gt;          spec:&lt;/span&gt;
&lt;span class="x"&gt;            replicas: 1&lt;/span&gt;
&lt;span class="x"&gt;            template:&lt;/span&gt;
&lt;span class="x"&gt;              metadata:&lt;/span&gt;
&lt;span class="x"&gt;                labels:&lt;/span&gt;
&lt;span class="x"&gt;                  app: echoserver&lt;/span&gt;
&lt;span class="x"&gt;              spec:&lt;/span&gt;
&lt;span class="x"&gt;                containers:&lt;/span&gt;
&lt;span class="x"&gt;                  - name: echoserver&lt;/span&gt;
&lt;span class="x"&gt;                    image: googlecontainer/echoserver:1.5&lt;/span&gt;
&lt;span class="x"&gt;                    readnessProbe:&lt;/span&gt;
&lt;span class="x"&gt;                      httpGet:&lt;/span&gt;
&lt;span class="x"&gt;                        port: 8080&lt;/span&gt;
&lt;span class="x"&gt;                        path: /&lt;/span&gt;
&lt;span class="x"&gt;                      initialDelaySeconds: 20&lt;/span&gt;
&lt;span class="x"&gt;                      periodSeconds: 5&lt;/span&gt;
&lt;span class="x"&gt;                    livenessProbe:&lt;/span&gt;
&lt;span class="x"&gt;                      httpGet:&lt;/span&gt;
&lt;span class="x"&gt;                        port: 8080&lt;/span&gt;
&lt;span class="x"&gt;                        path: /&lt;/span&gt;
&lt;span class="x"&gt;                      initialDelaySeconds: 10&lt;/span&gt;
&lt;span class="x"&gt;                      periodSeconds: 3&lt;/span&gt;
&lt;span class="x"&gt;    - name: Create echo server service&lt;/span&gt;
&lt;span class="x"&gt;      k8s:&lt;/span&gt;
&lt;span class="x"&gt;        namespace: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;namespace&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;        definition:&lt;/span&gt;
&lt;span class="x"&gt;          apiVersion: v1&lt;/span&gt;
&lt;span class="x"&gt;          kind: Service&lt;/span&gt;
&lt;span class="x"&gt;          metadata:&lt;/span&gt;
&lt;span class="x"&gt;            name: echoserver&lt;/span&gt;
&lt;span class="x"&gt;          spec:&lt;/span&gt;
&lt;span class="x"&gt;            ports:&lt;/span&gt;
&lt;span class="x"&gt;              - name: http&lt;/span&gt;
&lt;span class="x"&gt;                port: 8080&lt;/span&gt;
&lt;span class="x"&gt;                targetPort: 8080&lt;/span&gt;
&lt;span class="x"&gt;            selector:&lt;/span&gt;
&lt;span class="x"&gt;              app: echoserver&lt;/span&gt;
&lt;span class="x"&gt;    - name: Create echo server router&lt;/span&gt;
&lt;span class="x"&gt;      k8s:&lt;/span&gt;
&lt;span class="x"&gt;        namespace: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;namespace&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;        definition:&lt;/span&gt;
&lt;span class="x"&gt;          kind: Route&lt;/span&gt;
&lt;span class="x"&gt;          apiVersion: route.openshift.io/v1&lt;/span&gt;
&lt;span class="x"&gt;          metadata:&lt;/span&gt;
&lt;span class="x"&gt;            name: echoserver&lt;/span&gt;
&lt;span class="x"&gt;          spec:&lt;/span&gt;
&lt;span class="x"&gt;            host: echoserver.local&lt;/span&gt;
&lt;span class="x"&gt;            to:&lt;/span&gt;
&lt;span class="x"&gt;              kind: Service&lt;/span&gt;
&lt;span class="x"&gt;              name: echoserver&lt;/span&gt;
&lt;span class="x"&gt;            port:&lt;/span&gt;
&lt;span class="x"&gt;              targetPort: http&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;[1] &lt;a href="https://docs.ansible.com/ansible/latest/modules/list_of_clustering_modules.html" target="_blank"&gt;https://docs.ansible.com/ansible/latest/modules/list_of_clustering_modules.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 22 Oct 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2018-10-22:/use-ansible-manage-kubernetes-resources.html</guid></item><item><title>ansible set_stats</title><link>http://xcodest.me/ansible-set-stats.html</link><description>&lt;p&gt;&lt;code&gt;set_stats&lt;/code&gt; 支持用户设置任意数值，用以在 ansible 运行完后显示。&lt;/p&gt;
&lt;p&gt;使用例子如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hosts&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;all&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gather_facts&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pre_tasks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;set ceph iscsi gateway install &amp;#39;In Progress&amp;#39;&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;run_once&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;set_stats&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;data&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;installer_phase_ceph_iscsi_gw&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;status&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;In&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Progress&amp;quot;&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;start&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;lookup(&amp;#39;pipe&amp;#39;,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;+%Y%m%d%H%M%SZ&amp;#39;)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tasks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;debug&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;msg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;world&amp;#39;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;post_tasks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;set ceph iscsi gw install &amp;#39;Complete&amp;#39;&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;run_once&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;set_stats&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;data&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;installer_phase_ceph_iscsi_gw&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;status&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Complete&amp;quot;&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;end&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;lookup(&amp;#39;pipe&amp;#39;,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;+%Y%m%d%H%M%SZ&amp;#39;)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;data 参数可以配置任意的值&lt;/li&gt;
&lt;li&gt;还有一个 aggregate 的参数，默认值是 yes, 他表示是否要和已经存在的值聚合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在运行 ansible 时，需在&lt;code&gt;ansible.cfg&lt;/code&gt; 里配置 &lt;code&gt;show_custom_stats=true&lt;/code&gt; 或通过环境变量配置&lt;code&gt;ANSIBLE_SHOW_CUSTOM_STATS=true&lt;/code&gt; 来开启 stats 的输出。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nv"&gt;ANSIBLE_SHOW_CUSTOM_STATS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; ansible-playbook -i inventory test.yml

&lt;span class="go"&gt;PLAY [all]&lt;/span&gt;

&lt;span class="go"&gt;TASK [set ceph iscsi gateway install &amp;#39;In Progress&amp;#39;] &lt;/span&gt;
&lt;span class="go"&gt;ok: [10.10.0.2]&lt;/span&gt;

&lt;span class="go"&gt;TASK [debug] &lt;/span&gt;
&lt;span class="go"&gt;ok: [10.10.0.2] =&amp;gt; {&lt;/span&gt;
&lt;span class="go"&gt;    &amp;quot;msg&amp;quot;: &amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;

&lt;span class="go"&gt;TASK [set ceph iscsi gw install &amp;#39;Complete&amp;#39;] &lt;/span&gt;
&lt;span class="go"&gt;ok: [10.10.0.2]&lt;/span&gt;

&lt;span class="go"&gt;PLAY RECAP &lt;/span&gt;
&lt;span class="go"&gt;10.10.0.2                  : ok=3    changed=0    unreachable=0    failed=0   &lt;/span&gt;

&lt;span class="go"&gt;CUSTOM STATS: &lt;/span&gt;
&lt;span class="go"&gt;    RUN: { &amp;quot;installer_phase_ceph_iscsi_gw&amp;quot;: {  &amp;quot;end&amp;quot;: &amp;quot;20181009151731Z&amp;quot;,  &amp;quot;start&amp;quot;: &amp;quot;20181009151731Z&amp;quot;,  &amp;quot;status&amp;quot;: &amp;quot;Complete&amp;quot; }}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，结果上已经把 custom stats 的值打印出来了。这样就可以把运行过程中的一些状态或统计信息输出出来，方便 playbooks 运行完成后，查看其运行状态。&lt;/p&gt;
&lt;p&gt;以外，这个模块也适用于 windows&lt;/p&gt;
&lt;h2 id="_1"&gt;相关链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;a href="https://docs.ansible.com/ansible/2.6/modules/set_stats_module.html" target="_blank"&gt;https://docs.ansible.com/ansible/2.6/modules/set_stats_module.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Sun, 14 Oct 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2018-10-14:/ansible-set-stats.html</guid></item><item><title>OpenStack Rocky Release</title><link>http://xcodest.me/openstack-rocky-release.html</link><description>&lt;h2 id="glance"&gt;Glance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;增加了和 cinder 一样多后端存储的支持。当需要配置多个后端存储时，不用像之前一样，只能配置多个 glance 服务了。&lt;/li&gt;
&lt;li&gt;支持了镜像格式的自动转换。之前 glance 有一套 tasks API, 可以创建一个后台任务，可以用来做镜像自动转化，但是使用起来比较复杂&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;。需要管理员修改配置文件，而且需要使用单独的 Task Create 接口。现在如果打开这个功能后，当用户使用 image import 接口时，会自动的做镜像的格式转换&lt;sup id="fnref2-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;li&gt;Glance 一直使用 md5 做为 checksum 字段的算法，用于数据效验和防篡改。但是 md5 已经被证明是不安全的算法。新版本可以通过修改配置文件的方式，使用更加安全的算法&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="nova"&gt;Nova&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;增加了对 AArch64 处理的支持&lt;/li&gt;
&lt;li&gt;支持动态的开启或关闭某个 cell&lt;/li&gt;
&lt;li&gt;nova placement api 增加了 member_of 参数，完善了对 resource provider 聚合的支持。&lt;/li&gt;
&lt;li&gt;自动向 placement 服务中上报 CPU 的特征信息，可用于细粒度的虚拟机调度&lt;/li&gt;
&lt;li&gt;nova placement 服务增加了角色控制&lt;/li&gt;
&lt;li&gt;ironic driver 支持进入 rescue 模式进行机器修复&lt;/li&gt;
&lt;li&gt;virtio-net 驱动支持多队列，提升网络性能&lt;/li&gt;
&lt;li&gt;libvirt driver 增加对 NVMe, ScaleIO 存储的支持。&lt;/li&gt;
&lt;li&gt;libvirt driver 增强对 Cinder 前端 QoS 的支持，包括 quota:read_bytes_sec_max, quota:write_bytes_sec_max 等&lt;/li&gt;
&lt;li&gt;支持配置 neutron 网络的 NUMA 亲和性&lt;/li&gt;
&lt;li&gt;PowerVM driver 支持热插拔网卡，虚拟机快照， vSCSI FC。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="kolla"&gt;kolla&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;增加 Apache Storm, Logstash 5.x, Monasca Thresh, radvd, prometheus, cadvisor 等镜像&lt;/li&gt;
&lt;li&gt;horizon 镜像增加了 blazar, congress, octavia 界面的支持&lt;/li&gt;
&lt;li&gt;支持 Ceph Bluestore 的部署&lt;/li&gt;
&lt;li&gt;支持 Monasca Log Persister 和 Monasa Log Transformer 部署。&lt;/li&gt;
&lt;li&gt;支持关闭 nova_ssh 容器&lt;/li&gt;
&lt;li&gt;默认配置 mariadb binary logs 有效时间为 14天&lt;/li&gt;
&lt;li&gt;支持 Prometheus/AlertManager/Node Exporter/ 的部署&lt;/li&gt;
&lt;li&gt;支持额外的 ml2 配置文件&lt;/li&gt;
&lt;li&gt;支持 Glance 的零宕机升级&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://www.sebastien-han.fr/blog/2015/05/11/openstack-glance-a-first-glimpse-at-image-conversion/" target="_blank"&gt;https://www.sebastien-han.fr/blog/2015/05/11/openstack-glance-a-first-glimpse-at-image-conversion/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;&lt;a href="https://review.openstack.org/572515" target="_blank"&gt;https://review.openstack.org/572515&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;&lt;a href="https://review.openstack.org/587225" target="_blank"&gt;https://review.openstack.org/587225&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;&lt;a href="https://docs.openstack.org/releasenotes/nova/rocky.html" target="_blank"&gt;https://docs.openstack.org/releasenotes/nova/rocky.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;&lt;a href="https://docs.openstack.org/releasenotes/kolla/rocky.html" target="_blank"&gt;https://docs.openstack.org/releasenotes/kolla/rocky.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;&lt;a href="https://docs.openstack.org/releasenotes/kolla-ansible/rocky.html" target="_blank"&gt;https://docs.openstack.org/releasenotes/kolla-ansible/rocky.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Thu, 20 Sep 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2018-09-20:/openstack-rocky-release.html</guid><category>Linux</category><category>OpenStack</category></item><item><title>Ceph bluestore 和 ceph-volume</title><link>http://xcodest.me/ceph-bluestore-and-ceph-volume.html</link><description>&lt;h2 id="_1"&gt;部署&lt;/h2&gt;
&lt;p&gt;使用环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单节点&lt;/li&gt;
&lt;li&gt;CentOS 7.4&lt;/li&gt;
&lt;li&gt;使用 ceph-deploy 进行部署&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;准备 centos 7.4 系统的机器，并配置好 ssh 的无密码登录&lt;/p&gt;
&lt;p&gt;安装 ceph-deploy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install https://download.ceph.com/rpm-luminous/el7/noarch/ceph-deploy-2.0.0-0.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;数据 ceph 安装包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ceph-install
cd ceph-install
ceph-deploy new node1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把如下内容加入到 ceph.conf 里面，把默认的副本数据调成1。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="na"&gt;osd pool default size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;osd pool default min size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装 ceph 包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; ceph-deploy install --release luminous node2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;初始化 mon&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ceph-deploy mon create-initial
ceph-deploy admin node1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时 ceph 已经可以访问了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ceph -s
  cluster:
    id:     5b2f0020-fc24-44de-a6c9-a88efdc5074f
  health: HEALTH_OK
  services:
    mon: &lt;span class="m"&gt;1&lt;/span&gt; daemons, quorum node1
    mgr: no daemons active
    osd: &lt;span class="m"&gt;0&lt;/span&gt; osds: &lt;span class="m"&gt;0&lt;/span&gt; up, &lt;span class="m"&gt;0&lt;/span&gt; in

  data:
    pools:   &lt;span class="m"&gt;0&lt;/span&gt; pools, &lt;span class="m"&gt;0&lt;/span&gt; pgs
    objects: &lt;span class="m"&gt;0&lt;/span&gt; objects, &lt;span class="m"&gt;0&lt;/span&gt; bytes
    usage:   &lt;span class="m"&gt;0&lt;/span&gt; kB used, &lt;span class="m"&gt;0&lt;/span&gt; kB / &lt;span class="m"&gt;0&lt;/span&gt; kB avail
    pgs:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来要部署 ceph mgr, 这个组件在 Luminous 里面是必装组件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ceph-deploy  mgr create node1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来部署 ceph osd, 现在推荐使用 ceph-volume lvm 来管理磁盘。所有安装的时候 ，就需要准备一个 lv 出来。为了测试 bluestore 的 block.db 和 block.wal， 我们来做三个lv 分别用于单 osd 。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pv create /dev/sdb
  Physical volume &lt;span class="s2"&gt;&amp;quot;/dev/sdb&amp;quot;&lt;/span&gt; successfully created.
$ vgcreate  ceph-pool /dev/sdb
  Volume group &lt;span class="s2"&gt;&amp;quot;ceph-pool&amp;quot;&lt;/span&gt; successfully created
$ lvcreate -n osd0.wal -L 1G ceph-pool
  Logical volume &lt;span class="s2"&gt;&amp;quot;osd0.wal&amp;quot;&lt;/span&gt; created.
$ lvcreate -n osd0.db -L 1G ceph-pool
  Logical volume &lt;span class="s2"&gt;&amp;quot;osd0.db&amp;quot;&lt;/span&gt; created.
$ lvcreate -n osd0 -l &lt;span class="m"&gt;100&lt;/span&gt;%FREE ceph-pool
  Logical volume &lt;span class="s2"&gt;&amp;quot;osd0&amp;quot;&lt;/span&gt; created.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来，就可以创建 OSD 了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ceph-deploy  osd create \
    --data ceph-pool/osd0 \
    --block-db ceph-pool/osd0.db \
    --block-wal ceph-pool/osd0.wal \
    --bluestore node1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，一个最小的集群就建好了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ceph -s
  cluster:
    id:     5b2f0020-fc24-44de-a6c9-a88efdc5074f
    health: HEALTH_OK

  services:
    mon: &lt;span class="m"&gt;1&lt;/span&gt; daemons, quorum node1
    mgr: node2&lt;span class="o"&gt;(&lt;/span&gt;active&lt;span class="o"&gt;)&lt;/span&gt;
    osd: &lt;span class="m"&gt;1&lt;/span&gt; osds: &lt;span class="m"&gt;1&lt;/span&gt; up, &lt;span class="m"&gt;1&lt;/span&gt; in

  data:
    pools:   &lt;span class="m"&gt;0&lt;/span&gt; pools, &lt;span class="m"&gt;0&lt;/span&gt; pgs
    objects: &lt;span class="m"&gt;0&lt;/span&gt; objects, &lt;span class="m"&gt;0&lt;/span&gt; bytes
    usage:   &lt;span class="m"&gt;2048&lt;/span&gt; MB used, &lt;span class="m"&gt;37883&lt;/span&gt; MB / &lt;span class="m"&gt;39931&lt;/span&gt; MB avail
    pgs:

$ ls -alh /var/lib/ceph/osd/ceph-0/
total 52K
drwxrwxrwt. &lt;span class="m"&gt;2&lt;/span&gt; ceph ceph &lt;span class="m"&gt;340&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 .
drwxr-x---. &lt;span class="m"&gt;3&lt;/span&gt; ceph ceph  &lt;span class="m"&gt;20&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 ..
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph &lt;span class="m"&gt;183&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 activate.monmap
lrwxrwxrwx. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph  &lt;span class="m"&gt;19&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 block -&amp;gt; /dev/ceph-pool/osd0
lrwxrwxrwx. &lt;span class="m"&gt;1&lt;/span&gt; root root  &lt;span class="m"&gt;23&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 block.db -&amp;gt; /dev/ceph-pool/osd0.wal
lrwxrwxrwx. &lt;span class="m"&gt;1&lt;/span&gt; root root  &lt;span class="m"&gt;23&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 block.wal -&amp;gt; /dev/ceph-pool/osd0.wa
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph   &lt;span class="m"&gt;2&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 bluefs
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph  &lt;span class="m"&gt;37&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 ceph_fsid
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph  &lt;span class="m"&gt;37&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 fsid
-rw-------. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph  &lt;span class="m"&gt;55&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 keyring
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph   &lt;span class="m"&gt;8&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 kv_backend
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph  &lt;span class="m"&gt;21&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 magic
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph   &lt;span class="m"&gt;4&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 mkfs_done
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph  &lt;span class="m"&gt;41&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 osd_key
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph  &lt;span class="m"&gt;24&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 path_block.db
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph   &lt;span class="m"&gt;6&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 ready
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph  &lt;span class="m"&gt;10&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 &lt;span class="nb"&gt;type&lt;/span&gt;
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph   &lt;span class="m"&gt;2&lt;/span&gt; Apr  &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:27 whoami
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="bluestore-rocksdb-ceph-volume"&gt;bluestore &amp;amp; rocksdb &amp;amp; ceph-volume&lt;/h2&gt;
&lt;p&gt;ceph 的组件多采用插件的机制，包括后端存储，KV 数据库，磁盘管理等。各组件之间可以灵活的组合。&lt;/p&gt;
&lt;p&gt;基于后端存储包括 filestore, kvstore，memstore 和新的 bluestore。 Ceph Luminous 引用了 bluestore 的存储类型，不依赖文件系统，直接管理物理磁盘，相比filestore, 在 io 写入的时候路径更短，也避免了二次写入的问题，性能会更加好。&lt;/p&gt;
&lt;p&gt;KV 存储主要包括 LevelDB, MemDB 和新的 RocksDB。 RocksDB 是 Facebook 基于 LevelDB 开发的 key-value 数据，并对闪存(flash)有更友好的优化。&lt;/p&gt;
&lt;p&gt;磁盘管理之前只有个 ceph-disk, 现在新引入了 ceph-volume。基于 lvm 来管理磁盘，并会逐渐废弃掉 ceph-disk。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ceph-bluestore.png" src="images/2018/ceph-bluestore.png"&gt;&lt;/p&gt;
&lt;p&gt;基中比较有意思的是 RocksDB 的实现，RocksDB 原本只基于文件系统的。但是得益于它本身的灵活性，bluestore 实现了一套 RocksDB 的 Env 接口，还在 BlueStore 上面实现了一套 BlueFS 的接口与 BluestoreEnv 对接。使得 RocksDB 可以存储在 BlueStore 上面。&lt;/p&gt;
&lt;h2 id="wal-db"&gt;wal &amp;amp; db 的大小问题&lt;/h2&gt;
&lt;p&gt;在 ceph bluestore 的情况下，wal 是 RocksDB 的 write-ahead log, 相当于之前的 journal 数据，db 是 RocksDB 的 metadata 信息。在磁盘选择原则是 block.wal &amp;gt; block.db &amp;gt; block。当然所有的数据也可以放到同一块盘上。&lt;/p&gt;
&lt;p&gt;默认情况下， wal 和 db 的大小分别是 512 MB 和 1GB, 包括 Sage Weil 的 PPT 里面也是这样标明的&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;。现在没有一个太好的理论值，它和 ceph 里面的每个 OSD 里面的对象个数有关系。更多讨论可以参看&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;。 现在社区推荐的是 block size * 4% 的值。也就是说如果你的 block 盘大小是 1TB，那 block.db 的大小最少是 40GB。&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是，如果所有的数据都在单块盘上，那是没有必要指定 wal &amp;amp; db 的大小的。如果 wal &amp;amp; db 是在不同的盘上，由于 wal/db 一般都会分的比较小，是有满的可能性的。如果满了，这些数据会迁移到下一个快的盘上(wal - db - main)。所以最少不会因为数据满了，而造成无法写入&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2 id="bluestore-osd"&gt;使用 bluestore 时的 osd 分区&lt;/h2&gt;
&lt;p&gt;如果是使用的 ceph-disk 管理磁盘，他会建立一个 100MB 的分区，来存放 keyring / whoami 这些信息，这和之前的逻辑是一样的。&lt;/p&gt;
&lt;p&gt;如果是使用 ceph-volume 管理磁盘，&lt;code&gt;/var/lib/ceph/osd/ceph-0&lt;/code&gt; 分区会从 tmpfs 挂载过来(也就是内存)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mount &lt;span class="p"&gt;|&lt;/span&gt; grep osd
tmpfs on /var/lib/ceph/osd/ceph-0 &lt;span class="nb"&gt;type&lt;/span&gt; tmpfs &lt;span class="o"&gt;(&lt;/span&gt;rw,relatime,seclabel&lt;span class="o"&gt;)&lt;/span&gt;
$ ls -Alh /var/lib/ceph/osd/ceph-0
lrwxrwxrwx. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph &lt;span class="m"&gt;19&lt;/span&gt; Apr  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:36 block -&amp;gt; /dev/ceph-pool/osd0
lrwxrwxrwx. &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;22&lt;/span&gt; Apr  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:36 block.db -&amp;gt; /dev/ceph-pool/osd0.db
lrwxrwxrwx. &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;23&lt;/span&gt; Apr  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:36 block.wal -&amp;gt; /dev/ceph-pool/osd0.wal
-rw-------. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph &lt;span class="m"&gt;37&lt;/span&gt; Apr  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:36 ceph_fsid
-rw-------. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph &lt;span class="m"&gt;37&lt;/span&gt; Apr  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:36 fsid
-rw-------. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph &lt;span class="m"&gt;55&lt;/span&gt; Apr  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:36 keyring
-rw-------. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph  &lt;span class="m"&gt;6&lt;/span&gt; Apr  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:36 ready
-rw-------. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph &lt;span class="m"&gt;10&lt;/span&gt; Apr  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:36 &lt;span class="nb"&gt;type&lt;/span&gt;
-rw-------. &lt;span class="m"&gt;1&lt;/span&gt; ceph ceph  &lt;span class="m"&gt;2&lt;/span&gt; Apr  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:36 whoami
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至于目录中的这些文件则是从 bluestore 盘一开始的 &lt;code&gt;BDEV_LABEL_BLOCK_SIZE=4096&lt;/code&gt; 位置读取过来的。通过 以下命令，可以把所有的 label 打印出来&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ceph-bluestore-tool  show-label --path /var/lib/ceph/osd/ceph-0
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;/var/lib/ceph/osd/ceph-0/block&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;osd_uuid&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;c349b2ba-690f-4a36-b6f6-2cc0d0839f29&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;2147483648&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;btime&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2018-04-04 10:22:25.216117&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;bluefs&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;ceph_fsid&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;14941be9-c327-4a17-8b86-be50ee2f962e&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;kv_backend&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;rocksdb&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;magic&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;ceph osd volume v026&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;mkfs_done&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;osd_key&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;AQDgNsRaVtsRIBAA6pmOf7y2GBufyE83nHwVvg==&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;ready&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;ready&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;whoami&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相关代码参看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ceph/ceph/blob/d65b8844d16d71df01b57f368badc100db505506/src/ceph-volume/ceph_volume/devices/lvm/activate.py#L144" target="_blank"&gt;ceph-volume activate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ceph/ceph/blob/d65b8844d16d71df01b57f368badc100db505506/src/os/bluestore/bluestore_tool.cc#L316-L396" target="_blank"&gt;ceph-bluestore-tool prime-osd-dir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用ceph-volume， 不管 store 使用的是 filestore 还是 bluestore, 都会把一些 tag 存在 lvm 上面， 可以使用以下命令查看(做了格式化处理)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$lvs -o lv_tags /dev/mapper/ceph--pool-osd
LV Tags
ceph.block_device=/dev/ceph-pool/osd
ceph.block_uuid=dRW0FO-KiVS-vBjB-PE42-RnSd-mL04-FRQmAz
ceph.cephx_lockbox_secret=
ceph.cluster_fsid=14941be9-c327-4a17-8b86-be50ee2f962e
ceph.cluster_name=ceph
ceph.crush_device_class=None
ceph.encrypted=0
ceph.osd_fsid=c349b2ba-690f-4a36-b6f6-2cc0d0839f29
ceph.osd_id=0
ceph.type=block
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="osd"&gt;osd 的盘是如何挂载的&lt;/h2&gt;
&lt;p&gt;ceph 依赖 systemd 来管理挂载，不需要配置 &lt;code&gt;/etc/fstab&lt;/code&gt; 文件。在初始化 osd 的时候, ceph 会 enable 一个 ceph-volume@x.service 服务，其中 x 的格式如 &lt;code&gt;{lvm|simple}-{osd id}-{osd uuid}&lt;/code&gt;, 这个服务会在系统的&lt;code&gt;local-fs.target&lt;/code&gt; 组里面，当系统挂载本地盘的时候，会自动挂载上。&lt;/p&gt;
&lt;p&gt;这个 ceph-volume@.service 定义如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$systemctl cat ceph-volume@lvm-0-b7b4fa98-d36e-430b-9789-a432a078292c
# /usr/lib/systemd/system/ceph-volume@.service
[Unit]
Description=Ceph Volume activation: %i
After=local-fs.target
Wants=local-fs.target

[Service]
Type=oneshot
KillMode=none
Environment=CEPH_VOLUME_TIMEOUT=10000
ExecStart=/bin/sh -c &amp;#39;timeout $CEPH_VOLUME_TIMEOUT /usr/sbin/ceph-volume-systemd %i&amp;#39;
TimeoutSec=0
[Install]
WantedBy=multi-user.target
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到， 他是把参数传递给了 &lt;code&gt;ceph-volume-systemd&lt;/code&gt; 命令， 而这个命令又把参数解析后，传给了 &lt;code&gt;ceph-volume&lt;/code&gt; 命令，最后的执行的命令是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ceph-volume lvm trigger {osd id} {osd uuid]
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;需要&lt;code&gt;ceph-volume-systemd&lt;/code&gt; 这个命令的原因应该是systemd只能传一个参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个 &lt;code&gt;trigger&lt;/code&gt; 会调用 &lt;code&gt;ceph-volume lvm activate&lt;/code&gt; 命令，去准备相对应挂载及里面的数据初始化。&lt;/p&gt;
&lt;p&gt;最后， &lt;code&gt;ceph-volume lvm activate&lt;/code&gt; 会调用 &lt;code&gt;ceph-bluestore-tool pirme-osd-dir&lt;/code&gt; 命令来初始化里面的数据。&lt;/p&gt;
&lt;h2 id="_2"&gt;其它&lt;/h2&gt;
&lt;h3 id="ceph-osd-purge"&gt;ceph osd purge&lt;/h3&gt;
&lt;p&gt;ceph Limunous 新加了一个 &lt;code&gt;ceph osd purge&lt;/code&gt; 命令，很好用，可以一个命令，把某个 osd 相关的信息都清除掉。包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;osd&lt;/li&gt;
&lt;li&gt;crush rule&lt;/li&gt;
&lt;li&gt;auth key&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ceph-disk-lvm"&gt;ceph-disk lvm&lt;/h3&gt;
&lt;p&gt;ceph-disk 应试不支持 lvm 的， 参见 http://tracker.ceph.com/issues/5461&lt;/p&gt;
&lt;p&gt;不过 kolla 是否支持，可以验证下， 因为 kolla 的脚本里面不依赖 ceph-disk&lt;/p&gt;
&lt;h2 id="_3"&gt;版本&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;更新内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2018-04-07&lt;/td&gt;
&lt;td&gt;初版&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018-11-25&lt;/td&gt;
&lt;td&gt;增加 block.db 推荐大小值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/sageweil1/bluestore-a-new-storage-backend-for-ceph-one-year-in" target="_blank"&gt;https://www.slideshare.net/sageweil1/bluestore-a-new-storage-backend-for-ceph-one-year-in&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;&lt;a href="http://lists.ceph.com/pipermail/ceph-users-ceph.com/2017-September/020822.html" target="_blank"&gt;http://lists.ceph.com/pipermail/ceph-users-ceph.com/2017-September/020822.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;&lt;a href="http://lists.ceph.com/pipermail/ceph-users-ceph.com/2017-September/021037.html" target="_blank"&gt;http://lists.ceph.com/pipermail/ceph-users-ceph.com/2017-September/021037.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;&lt;a href="http://docs.ceph.com/docs/master/rados/configuration/bluestore-config-ref/#sizing" target="_blank"&gt;http://docs.ceph.com/docs/master/rados/configuration/bluestore-config-ref/#sizing&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;&lt;a href="http://lists.ceph.com/pipermail/ceph-users-ceph.com/2018-September/029643.html" target="_blank"&gt;http://lists.ceph.com/pipermail/ceph-users-ceph.com/2018-September/029643.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;&lt;a href="http://www.sysnote.org/2016/08/19/ceph-bluestore/" target="_blank"&gt;ceph存储引擎bluestore解析&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-7"&gt;
&lt;p&gt;&lt;a href="https://ceph.com/community/new-luminous-bluestore/" target="_blank"&gt;https://ceph.com/community/new-luminous-bluestore/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-8"&gt;
&lt;p&gt;&lt;a href="http://liyichao.github.io/posts/ceph-bluestore-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html" target="_blank"&gt;ceph bluestore 基本原理&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-8" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Sat, 07 Apr 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2018-04-07:/ceph-bluestore-and-ceph-volume.html</guid><category>Ceph</category></item><item><title>Kolla 从升级到零宕机升级</title><link>http://xcodest.me/kolla-queens-and-rocky.html</link><description>&lt;h2 id="done-in-queens"&gt;Done in Queens&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;镜像构建支持 squash layer, 可以把多个 docker 镜像存储层合并成一层。从而有效的降低镜像存储和传输过程中的资源消耗。&lt;/li&gt;
&lt;li&gt;Ceph 版本从 Jewel 升级到 Luminous， 同时支持了 cephfs 服务及 ceph nfs 服务。Luminous 是 Ceph 最新的长期版本，从去年8月份发布以来，经历了几个小版本的发布，相对来说更加稳定。相比 Jewel， Luminous 在性能上有了彻底性的优化,性能更好。默认使用了异步的消息机制，资源消耗更低。支持多主的 MDS 服务，cephfs 的可用性更高。&lt;/li&gt;
&lt;li&gt;支持 OpenStack 的 Blazar服务， 该服务是做 OpenStack 服务资源预定的。用户可以在一段时间内申请保留特定类型及数量的资源，以备将来使用。&lt;/li&gt;
&lt;li&gt;支持 vitrage 服务的部署。Vitrage 是 OpenStack 的问题分析服务。他可能处理 OpenStack 内部 的报警，事件等，然后通过一系统的分析后，向用户展示可见的报告。可以即使的发现问题。并可以配置一些触发流程，自动的恢复系统故障。更加方便 OpenStack 的运行和维护。&lt;/li&gt;
&lt;li&gt;部分服务支持最小宕机时间升级。Kolla 已经使得 OpenStack 升级变为可能，并且流程也相当简单。这个周期，Kolla 开始朝向怎么保证升级过程中的最小宕机时间，甚至是零宕机努力。现在已经完成了 Cinder 服务和 Keystone 的最小宕机时间的功能。Rocky 周期会完成更多的服务。进一步保证升级的流畅性。&lt;/li&gt;
&lt;li&gt;支持外部的 DB 服务。在某些使用环境中，数据库可能有专门的机器提供，也有专门的DBA来管理维护。这种情况下，Kolla 就没有必要建立自己的数据库了。通过这个功能，你可以很方便的使用已经存在的数据库实例。&lt;/li&gt;
&lt;li&gt;支持开发模式。这个对 OpenStack 的开发者很是方便。以住，开发者可能要通过 devstack 搭建完整的 OpenStack 来开发，但是部署复杂，难度高。现在 kolla-ansible 已经支持了开发模式。 通过配置要开发环境的 &lt;code&gt;dev_mode&lt;/code&gt;, 如 &lt;code&gt;horizon_dev_mode: true&lt;/code&gt;, 那么 horizon 容器内的代码会从物理机上挂载进去，开发者对代码修改后，就可以直接看到修改后的效果。十分方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="plan-in-rocky"&gt;Plan in Rocky&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;支持 Prometheus 监控。对于复杂的 OpenStack 平台来主产，监控报警必不可少，否则平台难于维护。之前 Kolla 尝试过很多监控平台方案，但是都不是很理想。随着 prometheus 的成熟，Kolla 将其做为自己的默认监控报警方案。整体架构会是 prometheus + alertmanager + gnocchi 的方案，prometheus 用来做数据采集，alertmanager 做通知报警，gnocchi 做数据存储。&lt;/li&gt;
&lt;li&gt;ceph bluestore 支持。在上一个版本中，kolla 中的 ceph 版本已经升级到了 Luminous。但是并没有支持 bluestore 的存储机制，这个版本会把这个功能加上。&lt;/li&gt;
&lt;li&gt;服务的健康检查。服务的进程状态正常，并不能证明其可以提供服务。需要额外的机制来保证进程服务的可用性。这方面OpenStack社区也有单独的讨论组在寻求解决方案。对于 Kolla 的大部分服务来说，可以通过 docker 支持的 health check 机制来解决。&lt;/li&gt;
&lt;li&gt;数据备份及恢复。尽管所有的组件都做了高可用，但是一些关键数据的备份还是需要的，防止极端情况的出现。这个周期 Kolla 会提供一个数据库备份及恢复的机制，更好帮助用户做好数据安全。&lt;/li&gt;
&lt;li&gt;服务的滚动升级。所谓的滚动升级，就是在最小宕机甚至零宕机的情况下进行 OpenStack 平台的升级。这个周期会实现 OpenStack 主要模块的滚动升级。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;更多信息可以参看&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.openstack.org/releasenotes/kolla/queens.html" target="_blank"&gt;https://docs.openstack.org/releasenotes/kolla/queens.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.openstack.org/releasenotes/kolla-ansible/queens.html" target="_blank"&gt;https://docs.openstack.org/releasenotes/kolla-ansible/queens.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2018-March/128044.html" target="_blank"&gt;http://lists.openstack.org/pipermail/openstack-dev/2018-March/128044.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Tue, 20 Mar 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2018-03-20:/kolla-queens-and-rocky.html</guid><category>OpenStack</category><category>Kolla</category></item><item><title>关于虚拟机密码你所有需要知道的一切</title><link>http://xcodest.me/everything-about-vm-password.html</link><description>&lt;p&gt;虽然各种云的虚拟机都推荐使用 SSH 密钥登录，但是还是有很多人喜欢使用密码登录，而且有的时候需要通过 console 来登录系统。那么如何更好的设置、修改虚拟机的密码呢?本文以 OpenStack 为例，介绍如何设置及修改虚拟机密码。&lt;/p&gt;
&lt;h2 id="_1"&gt;内置密码&lt;/h2&gt;
&lt;p&gt;这是最简单的，制作镜像的时候，直接给 root 账号配置一个密码。但是问题也不言而喻。所有的示例都有相同的默认密码，如果用户忘记改的话，其它人很容易的就能扫到你的机器，从而登录你的机器。&lt;/p&gt;
&lt;h2 id="libvirt"&gt;启动的时候通过 libvirt 进行密码注入&lt;/h2&gt;
&lt;p&gt;方法是在 &lt;code&gt;nova.conf&lt;/code&gt; 里面开始如下配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[libvirt]&lt;/span&gt;
&lt;span class="na"&gt;inject_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;inject_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;inject_partition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;-1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在虚拟机启动的时候，通过 &lt;code&gt;--admin-pass&lt;/code&gt; 传入一个指定的密码。但是这个方法也有一系列的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持 Boot from volume&lt;/li&gt;
&lt;li&gt;代码层面上，如果注入失败了，没有任何错误信息报出来。&lt;/li&gt;
&lt;li&gt;libvirt 注入对物理机来说并不安全，有安全隐患。&lt;/li&gt;
&lt;li&gt;密码并没有持久化(存入数据库)，也不应该做持久化，在 &lt;code&gt;evacuate&lt;/code&gt; 或 &lt;code&gt;unshelve&lt;/code&gt; 的时候，这些密码信息会被丢掉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以这个方法也不是推荐使用，更详细的信息，可能参看我另一篇文章「&lt;a href="http://xcodest.me/inject-file-in-rbd.html" target="_blank"&gt;rbd 是否支持注入&lt;/a&gt;」。&lt;/p&gt;
&lt;h2 id="metadata-api"&gt;通过 metadata api 注入&lt;/h2&gt;
&lt;p&gt;cloud-init 这个服务是从 AWS 学来的。它安装在虚拟机中，在启动虚拟机时，做一些初始化工作。如：硬盘分区自动扩展，SSH Public Key 注入，用户创建等。用户甚至可以注入一些 shell 脚本到虚拟机中运行。在自动化方面启了很大的作用。Heat 的实现就依赖于 cloud-init 服务。&lt;/p&gt;
&lt;p&gt;在 OpenStack 上，cloud-init 应该从 http://169.254.169.254 去拿到所需要的信息。而这个服务是通过 iptables 转到了 neutron-metadata-agent 服务上&lt;/p&gt;
&lt;p&gt;通过 cloud-init 注入也有几种方式，下面分别来说明。&lt;/p&gt;
&lt;h3 id="_2"&gt;脚本&lt;/h3&gt;
&lt;p&gt;因为在虚拟机启动的时候，是可以传入 shell 脚本的 user_data，所以可以在这个 shell 脚本里面修改 root 密码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; user_data.sh
#!/bin/sh
passwd root&amp;lt;&amp;lt;EOF
root_pass
root_pass
EOF

nova boot --user-data ./user_data.sh --image ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="cloud-init-configuration"&gt;cloud init configuration&lt;/h3&gt;
&lt;p&gt;user data 也可以是 cloud-init 支持的一个 yaml 结构文件，所以还可以通过如下方式改密码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#cloud-config
password: password
chpasswd:
  expire: False
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种方式要比「脚本」的方法优雅一些，推荐使用。而且cloud-init 本身功能很强大，值得深入挖掘下。&lt;/p&gt;
&lt;h3 id="config-drive"&gt;config drive&lt;/h3&gt;
&lt;p&gt;默认情况下，metadata api 是通过 &lt;code&gt;http://169.254.169.254&lt;/code&gt; 这个地址获取元数据信息。此外，nova 也支持使用 disk 的方式传入元数据。方便在网络环境不允许 metadata api 的情况下使用。性能也比 metadata api 好的多。&lt;/p&gt;
&lt;p&gt;config drive 的开启方法是在 &lt;code&gt;nova.conf&lt;/code&gt; 中配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[DEFAULT]&lt;/span&gt;
&lt;span class="na"&gt;force_config_drive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或在启动虚拟机的时候，加上如下参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nova boot --config-drive true --image ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;开启 config drive 后，除了上面提到的「脚本」和「cloud init configuration」方式，还可以使用 nova 的 &lt;code&gt;--admin-pass&lt;/code&gt; 参数。虽然这时密码是注入到了虚拟中，但是 cloud init 并不支持读取这里的密码，所以会失败。不过可以修改下 cloud init 支持这种方式。具体更多信息参看[1]。&lt;/p&gt;
&lt;h2 id="nova-set-password"&gt;通过 nova set-password&lt;/h2&gt;
&lt;p&gt;nova 还支持通过 libvirt 的 set-user-password 接口来修改正在运行的虚拟的密码。这个接口本质上是通过 qemu-guest-agent 的 &lt;code&gt;guest-set-user-password&lt;/code&gt; 接口来修改密码。所以对 libvirt 及 qemu-guest-agent 的版本都有要求。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;libvirt &amp;gt; 1.2.16           # host
qemu-guest-agent[2] &amp;gt; 2.3  # linux guest
qemu-guest-agent[3] &amp;gt; 2.5  # window guest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在看支持的 Guest 操作系统如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS 6 / CentOS 7&lt;/li&gt;
&lt;li&gt;Ubuntu 16.04 / Ubuntu 18.04&lt;/li&gt;
&lt;li&gt;Window XP 及之后所有的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;值的一提的是 CentOS 6 虽然用的 qemu-guest-agent 版本是 &lt;code&gt;qemu-guest-agent-0.12.1.2-2.491.el6_8.6.x86_64&lt;/code&gt;，但是红帽已经把相关 patch backport 了回头，所以也是支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用方法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做镜像的时候，安装 qemu-gest-agent 到虚拟机，并且开启随机启动。&lt;/li&gt;
&lt;li&gt;上传镜像的时候，加上相关的 metadata 信息： &lt;code&gt;glance image-create --property hw_qemu_guest_agent=yes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;虚拟机自动生成加密密码&lt;/h2&gt;
&lt;p&gt;很早之前，nova 还支持了虚拟机生成密码，然后加密后传回 nova 的功能[4]。其原理如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;虚拟机动态生成 root 的密码&lt;/li&gt;
&lt;li&gt;把 root 密码通过 ssh public key 加密&lt;/li&gt;
&lt;li&gt;把加密后的密码通过 &lt;code&gt;POST /openstack/latest/password&lt;/code&gt; 接口传回 nova&lt;/li&gt;
&lt;li&gt;用户通过&lt;code&gt;nova get-password&lt;/code&gt;命令来拿到密码后的密码&lt;/li&gt;
&lt;li&gt;用户使用自己的 ssh private key 进行密码揭密。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为密钥对等加密原因，除了「1」「5」可以看到明文密码外，其它步骤里面都是加密的。所以这种方式可以说是最安全的方案。连云平台提供商都不能看到真正的密码。&lt;/p&gt;
&lt;p&gt;不过这种方式只在 Windows 的 cloud init 版本 cloudbase-init 里面有实现[5]。Linux 版本的 cloud-init 并不支持。不过 Github 上面找到一个类似的实现[6]，虽然只支持 RHEL 7, 但是有需要的话，可以参考修改下。&lt;/p&gt;
&lt;h2 id="_4"&gt;如果我忘记了虚拟机密码怎么办&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果你还有虚拟机的 ssh private key，可能通过 ssh 登录机器修改密码&lt;/li&gt;
&lt;li&gt;如果你的虚拟机平台支持 &lt;code&gt;nova set-password&lt;/code&gt;, 可以在线改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果以上都不满足，就需要手动重置 root 密码，基本思路是在 Linux 启动的时候，进入一个不需要密码登录的环境，然后修改 root 密码，步骤如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过 horizon, 打开对应虚拟机的 console 界面&lt;/li&gt;
&lt;li&gt;软重启虚拟机，&lt;/li&gt;
&lt;li&gt;在 grub 界面按字母&lt;code&gt;e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找到 &lt;code&gt;linux&lt;/code&gt; 一行，这一行中加入 &lt;code&gt;init=/bin/bash&lt;/code&gt;, 并删掉 &lt;code&gt;console=tty0 console=ttyS0,115200&lt;/code&gt;， 把 &lt;code&gt;ro&lt;/code&gt; 改为 &lt;code&gt;rw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;按 &lt;code&gt;ctrl + x&lt;/code&gt; 继续启动&lt;/li&gt;
&lt;li&gt;这时你应试就可以直接登录到系统里面，通过 &lt;code&gt;passwd&lt;/code&gt; 命令直接修改密码&lt;/li&gt;
&lt;li&gt;硬重启操作系统 &lt;code&gt;nova reboot --hard&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="ref"&gt;REF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;a href="http://niusmallnan.com/_build/html/_templates/openstack/inject_passwd.html#cloud-init" target="_blank"&gt;http://niusmallnan.com/_build/html/_templates/openstack/inject_passwd.html#cloud-init&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href="https://github.com/qemu/qemu/commit/215a2771a7b6b29037ee8deba484815d816b6fdd" target="_blank"&gt;https://github.com/qemu/qemu/commit/215a2771a7b6b29037ee8deba484815d816b6fdd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;a href="https://github.com/qemu/qemu/commit/259434b8067e1c61017e9a5b8667b6526b474ff2" target="_blank"&gt;https://github.com/qemu/qemu/commit/259434b8067e1c61017e9a5b8667b6526b474ff2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[4] &lt;a href="https://review.openstack.org/#/c/17274/" target="_blank"&gt;https://review.openstack.org/#/c/17274/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[5] &lt;a href="https://github.com/openstack/cloudbase-init/blob/master/cloudbaseinit/metadata/services/httpservice.py" target="_blank"&gt;https://github.com/openstack/cloudbase-init/blob/master/cloudbaseinit/metadata/services/httpservice.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[6] &lt;a href="https://github.com/vvaldez/openstack-password-reset" target="_blank"&gt;https://github.com/vvaldez/openstack-password-reset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[0] &lt;a href="https://zhangchenchen.github.io/2017/01/19/openstack-reset-instance-password" target="_blank"&gt;https://zhangchenchen.github.io/2017/01/19/openstack-reset-instance-password&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Sat, 20 Jan 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2018-01-20:/everything-about-vm-password.html</guid><category>Linux</category><category>OpenStack</category></item><item><title>Source to Image 工具介绍</title><link>http://xcodest.me/s2i.html</link><description>&lt;h2 id="_1"&gt;介绍&lt;/h2&gt;
&lt;p&gt;Source to Image(S2I) 是一个创建 Docker 镜像的工具。也是 openshift 上面的主要构建镜像的方式之一。他的优点包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;速度&lt;/strong&gt;，S2I 可以实现很复杂的操作逻辑，而不会创建新的镜像层，所以运行起来很快。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;打补丁&lt;/strong&gt;，如果所依赖的镜像需要安全补丁，S2I 允许你一次性重新构建所有镜像。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高效&lt;/strong&gt;, 在构建过程中，S2I不允许运行任意的 yum install 命令，以防止降低开发迭代速度 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生态&lt;/strong&gt;，S2I 鼓励一个共享镜像生态。从而你的应用可以实现最佳实践。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="s2i"&gt;S2I 工作原理&lt;/h2&gt;
&lt;p&gt;S2I 的实现哲学是：所谓的镜像，就是一个运行环境 + 源代码。如是你是某一个类型的源代码，如果 Python, Ruby, HTML 等，那运行环境基本就是固定的。因此针对某类代码，只要提供好一个标准运行环境的基础镜像。使用的时候，先把用户的代码放到这个镜像中，生成一个新的镜像就可以。S2I 很适合给特定语言使用。&lt;/p&gt;
&lt;p&gt;S2I 会依赖一个特殊的 base 镜像，这个镜像主要包括基础的运行环境，如 Python, PHP，Nginx等。以及几个特殊的 S2I 脚本， 如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assemble&lt;/code&gt; 主要负责将你的源代码安装到这个特殊的镜像中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt; 主要指明你的源代码如何运行起来的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;usage&lt;/code&gt; 打印使用说明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;redhat 官方有一些已经编写好的镜像例子&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;，可以从找到。像 &lt;a href="https://github.com/sclorg/s2i-python-container" target="_blank"&gt;Python&lt;/a&gt;, &lt;a href="https://github.com/sclorg/s2i-ruby-container" target="_blank"&gt;Ruby&lt;/a&gt;。利用这些镜像，再加上你的源代码，可以快速构建出应用镜像。&lt;/p&gt;
&lt;h2 id="s2i_1"&gt;安装 S2I 工具&lt;/h2&gt;
&lt;p&gt;S2I 是一个 Go 编写的程序，你可以从 Github 上面下载已经编译的二进制文件&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;，也可以自己编译。下面是手动编译的方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nv"&gt;S2I_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;github.com/openshift/source-to-image
&lt;span class="gp"&gt;$&lt;/span&gt; go get &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;S2I_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GOPATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/src/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;S2I_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GOPATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/src/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;S2I_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/_output/local/bin/linux/amd64/
&lt;span class="gp"&gt;$&lt;/span&gt; make all
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="s2i_2"&gt;使用 S2I 构建镜像&lt;/h2&gt;
&lt;p&gt;下面我们来使用 S2I 的功能，快速构建一个 Python 应用。&lt;/p&gt;
&lt;p&gt;首先，先构建一个通用的 Python 2.7 基础镜像&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone https://github.com/sclorg/s2i-python-container.git
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; s2i-python-container/2.7

&lt;span class="gp"&gt;$&lt;/span&gt; docker build . -t local/s2i-python27
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这一步操作，和普通的 Docker 镜像构建是一样的，并没有什么不同。通查看 &lt;code&gt;Dockerfile&lt;/code&gt; 可以看到，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dockerfile 的父镜像是 &lt;code&gt;centos/s2i-base-centos7&lt;/code&gt;&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;, 这是一个 CentOS 提供的 S2I 基础镜像。&lt;/li&gt;
&lt;li&gt;这个镜像中安装了一样常用的 Python 软件包。&lt;/li&gt;
&lt;li&gt;唯一特殊的是把 &lt;code&gt;./s2i/bin/&lt;/code&gt; 目录拷贝到了 &lt;code&gt;STI_SCRIPTS_PATH&lt;/code&gt; ( 也就是 &lt;code&gt;/usr/libexec/s2i&lt;/code&gt; ) 位置。查看这个目录中的文件，就会看到上面提到的 &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;assemble&lt;/code&gt; 及 &lt;code&gt;usage&lt;/code&gt; 三个文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样我们就得到了一个叫&lt;code&gt;local/s2i-python27:latest&lt;/code&gt; 的基本镜像。下一步，把 Python 源代码打包入python 的基本镜像中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; test/django-test-app
&lt;span class="gp"&gt;$&lt;/span&gt; s2i build test/django-test-app  &lt;span class="se"&gt;\&lt;/span&gt;
    local/s2i-python27:latest &lt;span class="se"&gt;\&lt;/span&gt;
    django-test-app:latest
&lt;span class="go"&gt;---&amp;gt; Installing application source ...&lt;/span&gt;
&lt;span class="go"&gt;---&amp;gt; Installing dependencies ...&lt;/span&gt;
&lt;span class="go"&gt;Collecting Django==1.8.1 (from -r requirements.txt (line 1))&lt;/span&gt;
&lt;span class="go"&gt;Downloading Django-1.8.1-py2.py3-none-any.whl (6.2MB)&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;Build completed successfully&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个过程中，S2I 会做以下几个事情 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用 &lt;code&gt;local/s2i-python27:latest&lt;/code&gt; 镜像启动一个临时容器&lt;/li&gt;
&lt;li&gt;把 &lt;code&gt;test/django-test-app&lt;/code&gt; 代码放到容器里面的 &lt;code&gt;/tmp/src&lt;/code&gt; 位置&lt;ul&gt;
&lt;li&gt;这里先把源代码转成tar包，再通过容器的 stdout 把 tar 文件传入容器中，并解压到 &lt;code&gt;/tmp/&lt;/code&gt; 位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;assemble&lt;/code&gt; 脚本进行源代码的安装&lt;/li&gt;
&lt;li&gt;等 3 运行完成退出后，容器也就退出了&lt;/li&gt;
&lt;li&gt;容器退出后，把容器提交为一个镜像&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker commit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这时，一个名叫&lt;code&gt;django-test-app:latest&lt;/code&gt;就构建好了，查看他的历史可以看到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; docker &lt;span class="nb"&gt;history&lt;/span&gt; django-test-app 
&lt;span class="go"&gt;IMAGE         CREATED BY                                      SIZE     &lt;/span&gt;
&lt;span class="go"&gt;c1775906f248  /bin/sh -c tar -C /tmp -xf - &amp;amp;&amp;amp; /usr/libexec…   21.6MB&lt;/span&gt;
&lt;span class="go"&gt;df3a71bbe741  /bin/sh -c #(nop)  CMD [&amp;quot;/bin/sh&amp;quot; &amp;quot;-c&amp;quot; &amp;quot;$STI…   0B&lt;/span&gt;
&lt;span class="go"&gt;c699d75eb185  /bin/sh -c #(nop)  USER 1001                    0B   &lt;/span&gt;
&lt;span class="go"&gt;d3fa140aca9e  /bin/sh -c source scl_source enable python27…   18.4MB&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对比&lt;code&gt;centos/s2i-base-centos7&lt;/code&gt;就会发现， 上面这个镜像只增加了一个层次。&lt;/p&gt;
&lt;p&gt;最后直接启动镜像验证&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; docker run -it --rm django-test-app
&lt;span class="go"&gt;---&amp;gt; Migrating database ...&lt;/span&gt;
&lt;span class="go"&gt;Operations to perform:&lt;/span&gt;
&lt;span class="go"&gt;  Synchronize unmigrated apps: staticfiles, messages&lt;/span&gt;
&lt;span class="go"&gt;  Apply all migrations: admin, contenttypes, auth, sessions&lt;/span&gt;
&lt;span class="go"&gt;Synchronizing apps without migrations:&lt;/span&gt;
&lt;span class="go"&gt;  Creating tables...&lt;/span&gt;
&lt;span class="go"&gt;    Running deferred SQL...&lt;/span&gt;
&lt;span class="go"&gt;  Installing custom SQL...&lt;/span&gt;
&lt;span class="go"&gt;Running migrations:&lt;/span&gt;
&lt;span class="go"&gt;  Rendering model states... DONE&lt;/span&gt;
&lt;span class="go"&gt;  Applying contenttypes.0001_initial... OK&lt;/span&gt;
&lt;span class="go"&gt;  Applying auth.0001_initial... OK&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;Django version 1.8.1, using settings &amp;#39;project.settings&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;Starting development server at http://0.0.0.0:8080/&lt;/span&gt;
&lt;span class="go"&gt;Quit the server with CONTROL-C.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://github.com/openshift/source-to-image/releases" target="_blank"&gt;https://github.com/openshift/source-to-image/releases&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;&lt;a href="https://github.com/sclorg?q=s2i" target="_blank"&gt;https://github.com/sclorg?q=s2i&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;&lt;a href="https://blog.openshift.com/create-s2i-builder-image/" target="_blank"&gt;https://blog.openshift.com/create-s2i-builder-image/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;&lt;a href="https://hub.docker.com/r/centos/s2i-base-centos7/" target="_blank"&gt;https://hub.docker.com/r/centos/s2i-base-centos7/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;&lt;a href="https://github.com/openshift/source-to-image" target="_blank"&gt;https://github.com/openshift/source-to-image&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Tue, 16 Jan 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2018-01-16:/s2i.html</guid><category>Docker</category><category>Container</category></item><item><title>vSphere, ESXi 和 vCenter 的区别</title><link>http://xcodest.me/difference-between-vsphere-esxi-and-vcenter.html</link><description>&lt;blockquote&gt;
&lt;p&gt;最近在看 VMware 一直没有搞清楚这几个产品之间的区别和联系。正好在网上搜索到一个好文，翻译下来。&lt;/p&gt;
&lt;p&gt;本文翻译自：http://www.mustbegeek.com/difference-between-vsphere-esxi-and-vcenter/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近对 VMware 虚拟化解决方案有很多的疑惑。毫无疑问，VMware是虚拟化解决方案的老大。但是第一次接触 Vmware 虚拟化平台的人面对 VMware vSphere 和他的组件经常感觉到疑惑。所以今天我将解释下 vSphere 和他的组件。能弄清楚 vSphere，EXSi 和 vCenter 的区别是很重要的。为了更深入了解和体验 vSphere, 你还可以&lt;a href="http://www.mustbegeek.com/installing-vsphere-in-vmware-workstation/" target="_blank"&gt;在 VMware Workstation 中安装 vSphere&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="vsphereesxi-vcenter"&gt;vSphere，ESXi 和 vCenter 的区别&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;VMware Inc.&lt;/strong&gt; 是一家软件公司。它开发了许多&lt;a href="http://www.vmware.com/products/" target="_blank"&gt;产品&lt;/a&gt;，尤其是各种云解决方案 。他的云解决方案包括&lt;a href="https://www.vmware.com/products/vcloud-suite.html" target="_blank"&gt;云产品&lt;/a&gt;，&lt;a href="https://www.vmware.com/products/datacenter-virtualization.html" target="_blank"&gt;数据中心产品&lt;/a&gt;和&lt;a href="https://www.vmware.com/products/desktop-virtualization.html" target="_blank"&gt;桌面产品&lt;/a&gt;等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;vSphere&lt;/strong&gt; 是在数据中心产品下的一套软件。vSphere 类似微软的 Office 办公套件，Office 办公套件包含了许多软件如Word, Excel, Access 等。和 Office 一样，vSphere 也是一个软件的集合。他包括了 vCenter, ESXi 和 vSphere 等。所以，这些软件联合起来就是 vSphere。vSphere 不是一个你可以安装使用的软件。它只是一个包含其它组件的集合。&lt;/p&gt;
&lt;p&gt;ESXi, vSphere client 和 vCeneter 都是 vSphere 的组件。&lt;strong&gt;ESXi&lt;/strong&gt;是 vSphere 中最重要的一个组件。ESXi 是虚拟化服务。所有的虚拟机都是运行在 ESXi 服务上面。为了安装，管理和访问这些虚拟机，你需要另外的 vSphere 套件，也就是 vSphere client 或 vCenter。&lt;strong&gt;vSphere client&lt;/strong&gt;允许管理员访问 ESXi 服务并管理虚拟机。vSphere client 是安装在客户机(也就是管理员的笔记本)上面。vSphere client 被用来连接 ESXi 服务器和管理任务。那么什么是 vCenter?为什么虚拟它?尝试下在没有 vCenter server 的时候，只用 vSphere client 来&lt;a href="http://www.mustbegeek.com/create-copy-of-existing-virtual-machine-in-esxi-server/" target="_blank"&gt;克隆存在的虚拟机&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;vCenter server&lt;/strong&gt; 和 vSphere client 很像，但是它和功能更加强大。vCenter server 是安装在 Window 服务器或 Linux 服务器里面。VMware vCenter server 是一个中心化的管理应用。你可以通过它管理所有的虚拟机和 ESXi 物理机。vSphere client 可以通过访问 vCenter Server 来管理 EXSi 服务器。vCenter server 是一个企业级的产品，有许多企业级的功能，像 vMotion, VMware High Availability, VMware Update Manager 和 VMware Distributed Resource Scheduler(DRS)。你可以方便的&lt;a href="http://www.mustbegeek.com/clone-virtual-machine-in-vmware-vcenter/" target="_blank"&gt;通过 vCenter server 克隆存在的虚拟机&lt;/a&gt;。所以，vCenter 也是 vSphere 套件的一个重要组成部分。你需要单独购买 vCenter 的 license。&lt;/p&gt;
&lt;p&gt;&lt;img alt="vSphere-products.png" src="images/2018/vSphere-product.png"&gt;&lt;/p&gt;
&lt;p&gt;这个图描述了 vSphere 套间之前的关系。vSphere 是一个产品套件，&lt;a href="http://www.mustbegeek.com/install-configure-vmware-esxi-6-0/" target="_blank"&gt;ESXi 是安装在物理机上面的服务&lt;/a&gt;。vSphere Client 安装在笔记本或 PC 机上面，用来访问 ESXi 服务并安装和管理上面的虚拟机。vCenter Server 安装在了 ESXi 服务器的虚拟机里面。vCenter 也可以安装在单独的物理服务器上面，但是虚拟化不应该更好么? vCenter 服务通常用在有很多 EXSi 服务和许多虚拟机的大规模环境中。vCenter 也可以使用 vSphere client 来管理。所以 vSphere client 可以在小环境中直接管理 ESXi 服务。也可以在大规模的环境中，通过 vCenter 服务间接管理 ESXi 服务。&lt;/p&gt;
&lt;p&gt;你可以在你的电脑中&lt;a href="http://www.mustbegeek.com/virtualization/installing-vsphere-in-vmware-workstation/" target="_blank"&gt;安装 vSphere&lt;/a&gt;来体验这些技术。更多信息，请参看&lt;a href="http://www.vmware.com/" target="_blank"&gt;VMware 官网&lt;/a&gt;。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 08 Jan 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2018-01-08:/difference-between-vsphere-esxi-and-vcenter.html</guid><category>vmware</category></item><item><title>Intel CPU 漏洞是什么，又如何应对</title><link>http://xcodest.me/meltdown-and-spectre.html</link><description>&lt;p&gt;新年刚过，一个 Intel CPU 的漏洞消息如晴天霹雳，掀起了一波讨论浪潮。Intel 的股价也应声而且倒。&lt;/p&gt;
&lt;p&gt;&lt;img alt="intel-stock" src="images/2018/intel-stock.png"&gt;&lt;/p&gt;
&lt;p&gt;这个漏洞几乎影响了现在所有正在使用的 CPU 型号，囊括了包含Intel, AMD, ARM在内的所有主流 CPU 厂商。影响之大，前所未有。究竟这是怎么一个问题，又如何避免?&lt;/p&gt;
&lt;h2 id="_1"&gt;时间线&lt;/h2&gt;
&lt;p&gt;这个问题最早在2017年6月1日就已经被 Google Project Zero 团队报到了各大 CPU 厂商。&lt;/p&gt;
&lt;p&gt;11月份左右自个操作系统厂商开始意识到这个问题，并开始了修补工作。&lt;/p&gt;
&lt;p&gt;之所以今天才引起轰动，是因为 Project Zero 团队于1月3日把漏洞信息发布到了自己的博客上面 &lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2 id="_2"&gt;漏洞描述&lt;/h2&gt;
&lt;p&gt;关于这个漏洞，有三个变种的问题，分别是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bounds check bypass (CVE-2017-5753)&lt;/li&gt;
&lt;li&gt;branch target injection (CVE-2017-5715)&lt;/li&gt;
&lt;li&gt;rogue data cache load (CVE-2017-5754)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于这三种变种问题，现在有两种已知的攻击方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://spectreattack.com/spectre.pdf" target="_blank"&gt;Spectre&lt;/a&gt; (幽灵)，基于变种 1 和变种 2&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meltdownattack.com/meltdown.pdf" target="_blank"&gt;Meltdown&lt;/a&gt; (熔断)，基于变种 3&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="meltdown"&gt;Meltdown&lt;/h2&gt;
&lt;p&gt;Meltdown 允许没有授权的进程访问系统级的内存数据。这个漏洞主影响 Intel 系统的 CPU, AMD 并不受影响。所有实现了&lt;a href="https://en.wikipedia.org/wiki/Out-of-order_execution" target="_blank"&gt;out-of-order execution&lt;/a&gt;的Intel CPU 都可能受影响。这几乎包括了 1995 年后 Intel 生产的所有 CPU(除了 2013 年之前生产的 Intel Itanium and Intel Atom)。&lt;/p&gt;
&lt;h3 id="_3"&gt;影响&lt;/h3&gt;
&lt;p&gt;这个问题，最大的影响是各大公有云厂商， 像 Google Cloud Platform, AWS, 阿里云等。&lt;/p&gt;
&lt;p&gt;这个问题的发现者称，Xen(半虚拟化) 和 containers (docker, lxc, OpenVZ) 都受到影响。对于全虚拟化，当攻击客户机时，只能读取到客户机的内核内存，并不能读到宿主机的内核内存。&lt;/p&gt;
&lt;p&gt;现在多数去平台都是使用的 KVM 全虚拟化，所以影响稍微小一些。但是也不容小觑。&lt;/p&gt;
&lt;h3 id="_4"&gt;修复情况&lt;/h3&gt;
&lt;p&gt;修复情况： 各大系统实现了一套叫 Kernel page-table isolation(KPTI) 的技术，来避免这个漏洞。该漏洞已经包含在了 Linux kernel 4.15 中。也 backport 到了 linux kernel 4.14.11 中。 macOS 在  10.13.2 中也修复了这个问题。window 10 在1月3号也放出了相关补丁。&lt;/p&gt;
&lt;p&gt;还有报告声称：KPTI 降低了 CPU 多达 30% 的性能。但是也有报告称：自从 Skylake 架构后，在 KPTI 下，性能损失比之前几代的要低的多。&lt;/p&gt;
&lt;p&gt;KPTI 是大家吐槽最多的点之一，现在看来，性能影响并不是太大。&lt;/p&gt;
&lt;h3 id="_5"&gt;操作系统修复方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Redhat&lt;/strong&gt; 相关修复已经于1月3日推送到了主仓库中，通过更新系统，并重启操作系统可避免这个问题。更多信息能看&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt; 操作系统貌似补丁还没有放出，进展参看&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="spectre"&gt;Spectre&lt;/h2&gt;
&lt;p&gt;Spectre 允许其它&lt;strong&gt;用户进程&lt;/strong&gt;访问&lt;strong&gt;另一用户进程&lt;/strong&gt;的任何内存地址。根本原因是预测执行技术( speculative execution )的技术缺陷。报告的实验中破译数据的速度可达 503 KB/s，错误率低至万分之二。实验中已经可以读取 Firefox 56 的内存，并从中找到网页请求的头数据和浏览器储存的密码。&lt;/p&gt;
&lt;p&gt;Meltdown 可以视为特别简单的一个 Spectre 特例情况。&lt;/p&gt;
&lt;h3 id="_6"&gt;影响&lt;/h3&gt;
&lt;p&gt;几乎所有的电子系统都会受 Spectre 影响，包括台式电脑，笔记本和移动终端设备。而且 Spectre 影响 Intel, AMD 和 ARM 的处理器。&lt;/p&gt;
&lt;p&gt;当前，Spectre 只影响到了用户级的进程。但是将来可能会有更加严重的影响。他不像 Meltdown, Spectre 要靠处理器架构上面的改变才可以消除。而且将来，Spectre 对云提供商的影响可能大过 Meltdown。Meltdown 只是允许未授权的应用去读取同台机器上的系统级内存里面的敏感数据。而 Spectre 能够诱骗虚拟化层向其运行的客户机传输数据。&lt;/p&gt;
&lt;h3 id="_7"&gt;修复&lt;/h3&gt;
&lt;p&gt;一部分 Spectre 特例情况的修复工作在进行中。但是这个问题很难修复，会存在很长一段时间。&lt;/p&gt;
&lt;h2 id="_8"&gt;我们能做什么&lt;/h2&gt;
&lt;p&gt;见于这个漏洞破坏很大，并且影响极其深远。我们应该立刻行动起来, 应对该问题。&lt;/p&gt;
&lt;p&gt;对于各个战线(尤其是公有云)的运维同志，请及时升级自己的操作系统，打上相关的补丁。&lt;/p&gt;
&lt;p&gt;对于大部分普通人来说，想避免这个问题，可以从以下几个方面做起。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用正版的操作系统。&lt;/li&gt;
&lt;li&gt;即时安装系统推送的安全补丁。&lt;/li&gt;
&lt;li&gt;不要安装运行未知来源的软件。&lt;/li&gt;
&lt;li&gt;不要用盗版软件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="more-info"&gt;More Info&lt;/h2&gt;
&lt;p&gt;Following is copied from ttx post&lt;sup id="fnref-11"&gt;&lt;a class="footnote-ref" href="#fn-11"&gt;11&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Where can I learn more ?&lt;/p&gt;
&lt;p&gt;You can find lots of explanations over the Internet. To understand the basic flaw and the CPU technologies involved, I recommend reading &lt;a href="https://www.raspberrypi.org/blog/why-raspberry-pi-isnt-vulnerable-to-spectre-or-meltdown/" target="_blank"&gt;Eben Upton's great post&lt;/a&gt;. If that's too deep or you need a good analogy to tell your less-technical friends, I find &lt;a href="https://medium.com/@rgmerk/an-explanation-of-meltdown-and-spectre-for-non-programmers-7e98b0a28da4" target="_blank"&gt;this one by Robert Merkel&lt;/a&gt; not too bad.&lt;/p&gt;
&lt;p&gt;For technical details on the vulnerability themselves, &lt;a href="https://googleprojectzero.blogspot.fr/2018/01/reading-privileged-memory-with-side.html" target="_blank"&gt;Jann Horn's post on Google Project Zero blog&lt;/a&gt; should be first on your list. You can also read the Spectre and Meltdown papers.&lt;/p&gt;
&lt;p&gt;For more information on the various mitigation techniques, I recommend starting with this article from &lt;a href="https://security.googleblog.com/2018/01/more-details-about-mitigations-for-cpu_4.html" target="_blank"&gt;Google's Security blog&lt;/a&gt;. For information about Linux kernel patches in particular, I recommend &lt;a href="http://kroah.com/log/blog/2018/01/06/meltdown-status/" target="_blank"&gt;Greg Kroah-Hartman's post&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html" target="_blank"&gt;https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;&lt;a href="https://access.redhat.com/errata/RHSA-2018:0007" target="_blank"&gt;https://access.redhat.com/errata/RHSA-2018:0007&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;&lt;a href="https://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SpectreAndMeltdown" target="_blank"&gt;https://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SpectreAndMeltdown&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/question/265012502" target="_blank"&gt;https://www.zhihu.com/question/265012502&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Meltdown_(security_vulnerability)" target="_blank"&gt;https://en.wikipedia.org/wiki/Meltdown_(security_vulnerability)&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)" target="_blank"&gt;https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-7"&gt;
&lt;p&gt;&lt;a href="http://xcodest.me/meltdown-and-spectre.html" target="_blank"&gt;http://xcodest.me/meltdown-and-spectre.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-8"&gt;
&lt;p&gt;&lt;a href="https://access.redhat.com/security/vulnerabilities/speculativeexecution" target="_blank"&gt;https://access.redhat.com/security/vulnerabilities/speculativeexecution&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-8" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-9"&gt;
&lt;p&gt;&lt;a href="https://lists.centos.org/pipermail/centos-announce/2018-January/022696.html" target="_blank"&gt;https://lists.centos.org/pipermail/centos-announce/2018-January/022696.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-9" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-10"&gt;
&lt;p&gt;&lt;a href="https://lists.centos.org/pipermail/centos-announce/2018-January/thread.html" target="_blank"&gt;https://lists.centos.org/pipermail/centos-announce/2018-January/thread.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-10" title="Jump back to footnote 10 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-11"&gt;
&lt;p&gt;&lt;a href="https://ttx.re/openstack-spectre-meltdown-faq.html" target="_blank"&gt;https://ttx.re/openstack-spectre-meltdown-faq.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-11" title="Jump back to footnote 11 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Thu, 04 Jan 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2018-01-04:/meltdown-and-spectre.html</guid><category>Linux</category><category>OS</category></item><item><title>rbd 是否支持注入</title><link>http://xcodest.me/inject-file-in-rbd.html</link><description>&lt;h2 id="_1"&gt;引子&lt;/h2&gt;
&lt;p&gt;很多 OpenStack 与 Ceph 部署集成的文档都会告诉你，libivrt 的文件和密码注入是在 Ceph 上面是不支持的。需要使用下面的配置文件关闭。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[libvirt]&lt;/span&gt;
&lt;span class="na"&gt;inject_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;inject_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;inject_partition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;-2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是真的只是不支持这么简单么? 首先看 nova 的注入是如何工作的。&lt;/p&gt;
&lt;h2 id="nova"&gt;nova 是怎么注入的文件的&lt;/h2&gt;
&lt;p&gt;nova 使用 libguestfs 来文件密码的注入&lt;/p&gt;
&lt;p&gt;libguestfs主要有三个大的部分：&lt;code&gt;guestfsd&lt;/code&gt;, &lt;code&gt;guestfs-lib&lt;/code&gt; ,&lt;code&gt;guestfish&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;guestfsd是一个daemon&lt;/strong&gt;，但是它不是运行在 host 上的 daemon，它运行在 guest 上，libguestfs 首先用&lt;code&gt;febootstrap&lt;/code&gt;和&lt;code&gt;febootstrap-supermin-helper&lt;/code&gt;两个工具将 host 中的 kernel，用得到的一些 modules，配置文件和一些工具重新组合到一起，接着在后台启动一个 qemu 进程启动这个由&lt;code&gt;febootstrap&lt;/code&gt;生成的 image。在用 qemu 启动的这个 guest 里运行&lt;code&gt;guestfsd&lt;/code&gt;。&lt;code&gt;guestfsd&lt;/code&gt;通过 socket 和 host 进行通信，之间建立了一个通信的协议，它可以通过 socket 接受来自host端&lt;code&gt;guestfs-lib&lt;/code&gt;写到 socket 的数据。guestfsd 通过分析接受到的数据，进而执行相应的操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;guestfs-lib是一个库&lt;/strong&gt;，它实现了一些 libguestfs 的库函数 &lt;code&gt;guestfs_*&lt;/code&gt;。这些库函数向 socket 发送相应的数据，数据就会被 guest 端的 guestfsd 接收到，进而分析所要执行的操作。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;guestfish是对 guestfs-lib 接口函数的一些应用&lt;/strong&gt;，guestfish 的命令都是通过调用&lt;code&gt;guestfs-lib&lt;/code&gt;的库函数来实现的。&lt;/p&gt;
&lt;p&gt;如果在 nova 中开启了 inject 功能，nova 会调用 libguestfs 的接口，把文件或密码注入到镜像中去，然后再去真正的启动用户的虚拟机。那支持 ceph 里面的镜像么?&lt;/p&gt;
&lt;h2 id="libguestfs-rbd"&gt;libguestfs 对 rbd 的支持&lt;/h2&gt;
&lt;p&gt;libguestfs 对 rbd 的支持是从 1.21.21 这个版本开始的&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;，并且测试并不充分&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;, 这个版本也是13年5月份才发布的。到现在 CentOS6 上面的 libguestfs 版本还是 1.20.11。所以早期时候，文档中建议关掉 inject 功能，是确实 libguestfs 不支持RBD上面的镜像。&lt;/p&gt;
&lt;p&gt;但是 CentOS7 上面，libguestfs 已经支持这个功能，所以是可以打开 nova 的注入功能的。那我们是不是就可以把这个功能打开了?&lt;/p&gt;
&lt;h2 id="libvirt"&gt;libvirt 注入的问题&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;不支持 Boot from volume&lt;/strong&gt;&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;, 当从 Volume 启动的时候，并不支持文件注入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;社区也准备废弃这个功能&lt;/strong&gt;，有几个原因。1是代码层面上，如果注入失败了，没有任何错误信息报出来。2是文件注入并不安全。3是这些注入的文件并没有持久化(存入数据库)，在 &lt;code&gt;evacuate&lt;/code&gt; 或 &lt;code&gt;unshelve&lt;/code&gt; 的时候，这些文件会被丢掉。 4是可以通过 metadata-api 或 config-drive 更方便的实现文件注入功能。有兴趣可以读下相关信息&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref-6"&gt;&lt;a class="footnote-ref" href="#fn-6"&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref-7"&gt;&lt;a class="footnote-ref" href="#fn-7"&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;结论&lt;/h2&gt;
&lt;p&gt;通过 nova inject 注入的方式并不被社区推荐，应该采用 metadata-api 或 config drive 方式才是更加可取。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://github.com/libguestfs/libguestfs/commit/694a091d3faac78acbd0b5a368856b569c7ba5e2" target="_blank"&gt;https://github.com/libguestfs/libguestfs/commit/694a091d3faac78acbd0b5a368856b569c7ba5e2&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;&lt;a href="https://github.com/libguestfs/libguestfs/commit/186bb67c6e8496d04a6f5646df9b2fb483cdc189" target="_blank"&gt;https://github.com/libguestfs/libguestfs/commit/186bb67c6e8496d04a6f5646df9b2fb483cdc189&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;&lt;a href="https://github.com/openstack/nova/blob/master/nova/virt/libvirt/driver.py#L3269" target="_blank"&gt;https://github.com/openstack/nova/blob/master/nova/virt/libvirt/driver.py#L3269&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;&lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-November/107195.html" target="_blank"&gt;http://lists.openstack.org/pipermail/openstack-dev/2016-November/107195.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;&lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-July/098703.html" target="_blank"&gt;http://lists.openstack.org/pipermail/openstack-dev/2016-July/098703.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;&lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2017-March/113171.html" target="_blank"&gt;http://lists.openstack.org/pipermail/openstack-dev/2017-March/113171.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-7"&gt;
&lt;p&gt;&lt;a href="https://review.openstack.org/509013" target="_blank"&gt;https://review.openstack.org/509013&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-8"&gt;
&lt;p&gt;&lt;a href="https://blueprints.launchpad.net/nova/+spec/disable-file-injection-by-default" target="_blank"&gt;https://blueprints.launchpad.net/nova/+spec/disable-file-injection-by-default&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-8" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 25 Dec 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2017-12-25:/inject-file-in-rbd.html</guid></item><item><title>如何在 OpenStack 中隐藏 Glance 镜像</title><link>http://xcodest.me/hide-glance-image.html</link><description>&lt;h2 id="_1"&gt;问题&lt;/h2&gt;
&lt;p&gt;如果你的 OpenStack 环境中使用了 Ceph，而且开启了 Copy-on-Write Clone 功能。会发现如果 Glance 镜像启动了虚拟机，这个镜像是删除不掉的。包括 Boot from Volume 的镜像也会有类似的问题。但是用户会有这样的需求，既然删除不掉，我如何才能防止用户继续使用这个镜像。&lt;/p&gt;
&lt;h2 id="1"&gt;方法 1&lt;/h2&gt;
&lt;p&gt;这时，有一种方式是把公共镜像变为私有镜像。这样用户再建机器时，就看不到这个镜像了。但是这样会带来另外一个问题，已经启动虚拟机也会看不到镜像的信息。&lt;/p&gt;
&lt;p&gt;&lt;img alt="instance-without-image-info" src="images/glance-deactivate/instance-without-image-info.png"&gt;&lt;/p&gt;
&lt;h2 id="2"&gt;方法 2&lt;/h2&gt;
&lt;p&gt;这时还有更好的一个办法，Glance API 支持把镜像属性变为非可用状态。使用方法如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; openstack image &lt;span class="nb"&gt;set&lt;/span&gt; --deactivate &amp;lt;image&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把镜像变成了非可用状态，此时用户就不能从这个镜像启动新的虚拟机了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-can-not-boot" src="images/glance-deactivate/image-can-not-boot.png"&gt;&lt;/p&gt;
&lt;p&gt;但是，用户还可以看到这个镜像的信息，已经启动的虚拟机不受影响。&lt;/p&gt;
&lt;p&gt;&lt;img alt="instance-without-image-info" src="images/glance-deactivate/instance-with-image-info.png"&gt;&lt;/p&gt;
&lt;p&gt;如果想把镜像再变成可用状态，可以使用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; openstack image &lt;span class="nb"&gt;set&lt;/span&gt; --activate &amp;lt;image&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在这个功能只能通过 API 来使用，界面上还不支持。&lt;/p&gt;
&lt;h2 id="_2"&gt;参考信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://wiki.openstack.org/wiki/Glance-deactivate-image&lt;/li&gt;
&lt;li&gt;https://blueprints.launchpad.net/glance/+spec/deactivate-image&lt;/li&gt;
&lt;li&gt;https://review.openstack.org/#/c/132717/&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Sun, 24 Dec 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2017-12-24:/hide-glance-image.html</guid><category>Glance</category><category>OpenStack</category></item><item><title>使用 minikube 搭建 kubernetes 单机环境</title><link>http://xcodest.me/minikube.html</link><description>&lt;p&gt;minikube 可以快速搭建 kubernetes 单机环境，方便开发及测试使用。其支持大部分kubernetes的功能，列表如下&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;li&gt;NodePorts&lt;/li&gt;
&lt;li&gt;ConfigMaps and Secrets&lt;/li&gt;
&lt;li&gt;Dashboards&lt;/li&gt;
&lt;li&gt;Container Runtime: Docker, and rkt&lt;/li&gt;
&lt;li&gt;Enabling CNI (Container Network Interface)&lt;/li&gt;
&lt;li&gt;Ingress&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="x01"&gt;
&lt;h2&gt;0x01 原理&lt;/h2&gt;
&lt;p&gt;minikube 会下载一个 iso，并启动一台 virtualbox 虚拟机。把 kubernetes 在虚拟机里面跑起来。所以 minikube 可以在 windows 上运行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x02"&gt;
&lt;h2&gt;0x02 安装&lt;/h2&gt;
&lt;p&gt;由于某些原因，kubernetes 上面的资源可能下载不下来，最好你有一个好用的 VPN 或者 http 代理。&lt;/p&gt;
&lt;p&gt;下载 minikube 工具&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; curl -L https://github.com/kubernetes/minikube/releases/download/v0.24.1/minikube-linux-amd64 &lt;span class="se"&gt;\&lt;/span&gt;
    -o /usr/local/bin/minikube
&lt;span class="gp"&gt;$&lt;/span&gt; chmod +x /usr/local/bin/minikube
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;minikube 默认是使用 virtualbox 来启动虚拟机。我在 Linux 上面习惯使用 KVM, 所以还需要单独下载 kvm 的驱动。值的一提的是现在有 kvm 及 kvm2 两个驱动，其中 kvm 已经废弃掉，推荐使用 kvm2。&lt;/p&gt;
&lt;p&gt;下载 kvm2 驱动&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; curl -L https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2 &lt;span class="se"&gt;\&lt;/span&gt;
    -o /usr/local/bin/docker-machine-driver-kvm2
&lt;span class="gp"&gt;$&lt;/span&gt; chmod +x /usr/local/bin/docker-machine-driver-kvm2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装 kubectl 命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; curl -L https://storage.googleapis.com/kubernetes-release/release/&lt;span class="k"&gt;$(&lt;/span&gt;version&lt;span class="k"&gt;)&lt;/span&gt;/bin/linux/amd64/kubectl &lt;span class="se"&gt;\&lt;/span&gt;
     -o /usr/local/bin/kubectl
&lt;span class="gp"&gt;$&lt;/span&gt; chomd +x /usr/local/bin/kubectl
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="x03-kubernetes"&gt;
&lt;h2&gt;0x03 启动 kubernetes&lt;/h2&gt;
&lt;p&gt;使用 minikube 启动 kubernetes 很简单，就一条命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; minikube start --vm-driver kvm2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你的网络访问有问题，运行这个命令时，最好接着 VPN 或使用 http 代理，因为虚拟机里面会下载一些镜像。使用 http 代理可以使用如下命令行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;http_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://10.10.0.22:8185
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;https_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://10.10.0.22:8185
&lt;span class="gp"&gt;$&lt;/span&gt; minikube start --vm-driver kvm2 &lt;span class="se"&gt;\&lt;/span&gt;
    --docker-env &lt;span class="nv"&gt;http_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$http_proxy&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --docker-env &lt;span class="nv"&gt;https_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$https_proxy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没有问题，你会看到如下信息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; minikube start --vm-driver kvm2
&lt;span class="go"&gt;Starting local Kubernetes v1.8.0 cluster...&lt;/span&gt;
&lt;span class="go"&gt;Starting VM...&lt;/span&gt;
&lt;span class="go"&gt;Getting VM IP address...&lt;/span&gt;
&lt;span class="go"&gt;Moving files into cluster...&lt;/span&gt;
&lt;span class="go"&gt;Setting up certs...&lt;/span&gt;
&lt;span class="go"&gt;Connecting to cluster...&lt;/span&gt;
&lt;span class="go"&gt;Setting up kubeconfig...&lt;/span&gt;
&lt;span class="go"&gt;Starting cluster components...&lt;/span&gt;
&lt;span class="go"&gt;Kubectl is now configured to use the cluster.&lt;/span&gt;
&lt;span class="go"&gt;Loading cached images from config file.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="x04"&gt;
&lt;h2&gt;0x04 测试&lt;/h2&gt;
&lt;p&gt;通过 minikube 打开dashboard&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; minikube dashboard
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 kubectl 查看现有服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl --namespace kube-system get svc
&lt;span class="go"&gt;NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE&lt;/span&gt;
&lt;span class="go"&gt;kube-dns               ClusterIP   10.96.0.10      &amp;lt;none&amp;gt;        53/UDP,53/TCP   27m&lt;/span&gt;
&lt;span class="go"&gt;kubernetes-dashboard   NodePort    10.97.208.124   &amp;lt;none&amp;gt;        80:30000/TCP    27m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建一个新服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl run hello-minikube --image&lt;span class="o"&gt;=&lt;/span&gt;gcr.io/google_containers/echoserver:1.4 --port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt;
&lt;span class="go"&gt;deployment &amp;quot;hello-minikube&amp;quot; created&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; kubectl expose deployment hello-minikube --type&lt;span class="o"&gt;=&lt;/span&gt;NodePort
&lt;span class="go"&gt;service &amp;quot;hello-minikube&amp;quot; exposed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问新创建的服务。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl get pod
&lt;span class="go"&gt;NAME                              READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span class="go"&gt;hello-minikube-57889c865c-8fpq9   1/1       Running   0          13m&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; curl &lt;span class="k"&gt;$(&lt;/span&gt;minikube service hello-minikube --url&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;CLIENT VALUES:&lt;/span&gt;
&lt;span class="go"&gt;client_address=172.17.0.1&lt;/span&gt;
&lt;span class="go"&gt;command=GET&lt;/span&gt;
&lt;span class="go"&gt;real path=/&lt;/span&gt;
&lt;span class="go"&gt;query=nil&lt;/span&gt;
&lt;span class="go"&gt;request_version=1.1&lt;/span&gt;
&lt;span class="go"&gt;request_uri=http://192.168.39.136:8080/&lt;/span&gt;

&lt;span class="go"&gt;SERVER VALUES:&lt;/span&gt;
&lt;span class="go"&gt;server_version=nginx: 1.10.0 - lua: 10001&lt;/span&gt;

&lt;span class="go"&gt;HEADERS RECEIVED:&lt;/span&gt;
&lt;span class="go"&gt;accept=*/*&lt;/span&gt;
&lt;span class="go"&gt;host=192.168.39.136:32619&lt;/span&gt;
&lt;span class="go"&gt;user-agent=curl/7.57.0&lt;/span&gt;
&lt;span class="go"&gt;BODY:&lt;/span&gt;
&lt;span class="go"&gt;-no body in request-%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl delete deployment hello-minikube
&lt;span class="go"&gt;deployment &amp;quot;hello-minikube&amp;quot; deleted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="x05-kubernetes"&gt;
&lt;h2&gt;0x05 删除 kubernetes 集群&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; minikube stop
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="x06-ref"&gt;
&lt;h2&gt;0x06 REF&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/minikube/releases"&gt;https://github.com/kubernetes/minikube/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/getting-started-guides/minikube/"&gt;https://kubernetes.io/docs/getting-started-guides/minikube/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 11 Dec 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2017-12-11:/minikube.html</guid><category>Docker</category><category>Kubernetes</category></item><item><title>Core Dump</title><link>http://xcodest.me/core-dump.html</link><description>&lt;p&gt;容器化后，容器里面的进程如果出现 core dump ，默认情况下，dump 出来的文件是存放在容器内部的根目录的。这样会导致以下几个问题&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;如果 Docker 使用的 LVM 的驱动，每个容器默认大小只有 10G, 很容易占用了全部的容器空间，而导致容器不能启动。&lt;/li&gt;
&lt;li&gt;Core Dump 文件存到容器中，也很容易被删除掉，从而不容易排查问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;想要解决这个问题，就要先了解什么是 Core Dump。&lt;/p&gt;
&lt;div class="section" id="x01-core-dump"&gt;
&lt;h2&gt;0x01 - core dump&lt;/h2&gt;
&lt;p&gt;Core dump 功能能够把进程出问题的时候的信息保存下来，方便我们来调试。触发方法，可以通过给某个进程发送:code:&lt;cite&gt;SIGSEGV&lt;/cite&gt; 信号&lt;/p&gt;
&lt;pre class="literal-block"&gt;
kill -SIGSEGV &amp;lt;pid&amp;gt;
ls core.&amp;lt;pid&amp;gt;
&lt;/pre&gt;
&lt;p&gt;dump 出来的文件可以通过 &lt;code&gt;gdb&lt;/code&gt; 来查看内容，基本使用方法如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gdb /path/to/binary /path/to/core.dump.file
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;bt&lt;/code&gt; commands to get the information.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bt full&lt;/code&gt; commands to get the detailed backtrace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info locals&lt;/code&gt; to see all the local variables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print variable-name&lt;/code&gt; to print the variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;frame frame-number&lt;/code&gt; to go to desired frame number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;up n&lt;/code&gt; and &lt;code&gt;down n&lt;/code&gt; commands to select frame n frames up and select frame n frames down respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认情况下，生成的转存文件保存在当前目录下面，并且每个文件很大。从而占用大量空间。 通过 ulimit 可以控制，但是需要注意的是这种方法只能控制 单个core 文件的大小，并不能控制总 core dump 文件的大小或个数，而且也有可能生成不完整的 core dump 文件。
方法如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
// 单位是 KB, 0 意味着关闭
ulimit -c 0
// or
ulimit -c 100
// or
ulimit -c ulimited
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="x02"&gt;
&lt;h2&gt;0x02 - 容器化&lt;/h2&gt;
&lt;p&gt;容器里面，ulimit 是由 systemd 及 docker 共同控制的。
systemd 的 docker.service 可以控制 dockerd 进程的上限&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[Service]
LimitNOFILE=1048576
LimitNPROC=infinity
LimitCORE=infinity
&lt;/pre&gt;
&lt;p&gt;与此同时， docker 也可以控制单个容器的 ulimit 大小&lt;/p&gt;
&lt;pre class="literal-block"&gt;
docker run --ulimit core=1024000 centos:7
&lt;/pre&gt;
&lt;p&gt;或在 dockerd 启动的时候，设置所有容器的默认的 ulimit 大小&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dockerd --ulimit core=1024000
&lt;/pre&gt;
&lt;p&gt;但是，容器内的进程core dump的时候，还是保存到了容器内部，会严重影响docker的运行。然后完全关掉 core dump 功能也不是一个好办法。这个时候就需要借助 systemd 来转存。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x03-systemd"&gt;
&lt;h2&gt;0x03 - Systemd&lt;/h2&gt;
&lt;p&gt;现在主流的操作系统都已经转到了 systemd, 所在这个办法适用于大部分操作系统。&lt;/p&gt;
&lt;p&gt;自从 linux 2.6.19，支持通过 &lt;code&gt;/proc/sys/kernel/core_pattern&lt;/code&gt; 来配置转存的 core dump, 方法如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt;  /etc/sysctl.conf
kernel.core_pattern = |/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %e
EOF
&lt;/pre&gt;
&lt;p&gt;这个是配置到宿主机的内核上，因为容器共用宿主机的内核，所以当容器里面的进程需要 core dump 时，会转存到宿主机上的 systemd。而且systemd在保存的时候，经过了压缩，还可以控制存储空间的总大小，从而避免core dump吃掉太多硬盘空间。具体参看 &lt;code&gt;/etc/systemd/coredump.conf&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x04-coredumpctl"&gt;
&lt;h2&gt;0x04 - coredumpctl&lt;/h2&gt;
&lt;p&gt;转存到宿主机上，可以通过 coredumpctl 来进程查看，基本操作如下。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
coredumpctl list
coredumpctl dump &amp;lt;match&amp;gt;
coredumpctl info &amp;lt;match&amp;gt;
coredumpctl gdb &amp;lt;match&amp;gt;
&lt;/pre&gt;
&lt;p&gt;使用这种方法，可以避免 Core Dump 占用容器空间有问题，同时还可以保存转存的文件，方便之后的调试查看。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x05-ref"&gt;
&lt;h2&gt;0x05 - REF&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://lwn.net/Articles/280959/"&gt;https://lwn.net/Articles/280959/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man5/core.5.html"&gt;http://man7.org/linux/man-pages/man5/core.5.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Core_dump"&gt;https://wiki.archlinux.org/index.php/Core_dump&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 04 Dec 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2017-12-04:/core-dump.html</guid><category>Linux</category><category>Docker</category></item><item><title>A brief history of MySQL</title><link>http://xcodest.me/a-brief-history-of-mysql.html</link><description>&lt;p&gt;在开源软件中，一提到关系型数据库，大家最先想到的是一定是 MySQL, MySQL在过去由于性能高、成本低、可靠性好，在很早的时候，就占据了数据库的霸主的地位，成为最流行的开源数据库。非常流行的开源软件组合LAMP中的“M”指的就是MySQL。但是有开源的地方，就有江湖, 一言不合就 fork 。现在以 MySQL 为基础的变种数据库也有好几个，下面我们来依次认识下。&lt;/p&gt;
&lt;div class="section" id="mysql"&gt;
&lt;h2&gt;MySQL&lt;/h2&gt;
&lt;p&gt;MySQL 最早始于 1995 年，到现在已经有 22 年的历史了。原开发者为瑞典的MySQL AB公司，该公司于2008年被昇阳微系统（Sun Microsystems）收购。2009年，甲骨文公司（Oracle）收购昇阳微系统公司，MySQL成为Oracle旗下产品。&lt;/p&gt;
&lt;p&gt;但被甲骨文公司收购后，Oracle大幅调涨MySQL商业版的售价，自由软件社区们对于Oracle是否还会持续支持MySQL社区版（MySQL之中唯一的免费版本）有所隐忧，MySQL的创始人麦克尔·维德纽斯以MySQL为基础，成立分支计划MariaDB。而原先一些使用MySQL的开源软件逐渐转向MariaDB或其它的数据库。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mariadb"&gt;
&lt;h2&gt;MariaDB&lt;/h2&gt;
&lt;p&gt;MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，10.0.9版起使用XtraDB来代替MySQL的InnoDB。
XtraDB 是 InnoDB 存储引擎的增强版，被设计用来更好的使用更新计算机硬件系统的性能，同时还包含有一些在高性能环境下的新特性。XtraDB 存储引擎是完全的向下兼容，在 MariaDB 中，XtraDB 存储引擎被标识为&amp;quot;ENGINE=InnoDB&amp;quot;，这个与 InnoDB 是一样的，所以你可以直接用XtraDB 替换掉 InnoDB 而不会产生任何问题。XtraDB 现在由主要由 Percona 公司维护，也是 Percona Server 的核心组件。
MariaDB直到5.5版本，均依照MySQL的版本。因此，使用MariaDB5.5的人会从MySQL 5.5中了解到MariaDB的所有功能。从2012年11月12日起发布的10.0.0版开始，不再依照MySQL的版号。10.0.x版以5.5版为基础，加上移植自MySQL 5.6版的功能和自行开发的新功能。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="percona-server-for-mysql"&gt;
&lt;h2&gt;Percona Server for MySQL&lt;/h2&gt;
&lt;p&gt;Percona Server 也是一个 MySQL 的 fork 版本，由 Percona 公司维护。 Percona Server 相比 MySQL 包含许多性能上的提升[1]_，如上面提到的 XtraDB 就是 Percona 公司的。 而且还有丰富的 MySQL 周边工具&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Percona XtraDB Cluster, 基于 Galera 的 Percona 集群解决方案&lt;/li&gt;
&lt;li&gt;Percona XtraBackup， 支持 MySQL 在线全量或增量备份工具， 相比 mysqldump 性能再好&lt;/li&gt;
&lt;li&gt;Percona Toolkit，大量  MySQL 的管理工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="galera"&gt;
&lt;h2&gt;Galera&lt;/h2&gt;
&lt;p&gt;Galera 并不是 MySQL 的变种，而是由 Codeship 公司于 2007 发布的支持多主同步备份的 MySQL 组件。 由于简单实用，性能高效，现在被广泛使用，并已经集成到 MariaDB 和 Percona XtraDB cluster 中。 他的特点如下
同步复制&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;多主服务器的拓扑结构&lt;/li&gt;
&lt;li&gt;可以在任意节点上进行读写&lt;/li&gt;
&lt;li&gt;自动剔除故障节点&lt;/li&gt;
&lt;li&gt;自动加入新节点&lt;/li&gt;
&lt;li&gt;真正行级别的并发复制&lt;/li&gt;
&lt;li&gt;客户端连接跟操作单台MySQL数据库的体验一致&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OpenStack 社区推荐的 MySQL 高可用方案就是利用 Galera&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;REF&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[1]&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.percona.com/software/mysql-database/percona-server/benchmarks"&gt;https://www.percona.com/software/mysql-database/percona-server/benchmarks&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Sat, 12 Aug 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2017-08-12:/a-brief-history-of-mysql.html</guid><category>Database</category><category>MySQL</category></item><item><title>容器与OpenStack从相杀到相爱</title><link>http://xcodest.me/containerize-openstack.html</link><description>&lt;p&gt;OpenStack 项目开始于2010年，由 Rackspace 和 NASA合作发起的，旨在为公共及私有云的建设与管理提供软件的开源项目。2012年的发布的 OpenStack Essex 和 Folsom 算是真正意义上被广泛使用的版本。很多公司最早使用或改造的版本都是从这个时候开始的。&lt;/p&gt;
&lt;p&gt;现在我们提到容器，一般就是指 Docker 公司的 Docker 产品。 Docker 项目始于 2013年。由于其简单易用，性能无损耗及沙箱机制，很快就流行了起来。当时就有一种声音，容器会取代虚拟机，因此 OpenStack 面对着巨大的压力。为了应对这种快速的技术革新，OpenStack 基金会后来将项目管理变成了“Big Tent” 模式。从此 OpenStack 的子项目数量发了质的飞跃，也促进了大量优秀 OpenStack 子项目的诞生。&lt;/p&gt;
&lt;p&gt;现在看来，虚拟机技术和容器技术各有自己的使用场景。两者不是相杀，而是相爱关系。近几年OpenStack 社区涌现了大量与容器相关的项目：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;nova-docker，Nova 的 docker 驱动&lt;/li&gt;
&lt;li&gt;Magnum，在 OpenStack 上面管理容器编排引擎，包括 Docker Swarm，Kubernetes，Apache Mesos等&lt;/li&gt;
&lt;li&gt;Kolla， 利用容器来简化 OpenStack 部署&lt;/li&gt;
&lt;li&gt;Zun，在 OpenStack 上统一管理容器&lt;/li&gt;
&lt;li&gt;Kuryr，Docker 的网络插件，可以让 Docker 使用 Neutron 的网络&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;OpenStack 容器化的必要性&lt;/h2&gt;
&lt;p&gt;在容器化部署 OpenStack 项目开始之前，已经有大量 OpenStack 部署方案存在，包括当时整个社区主流的老牌部署工具 Puppet， 新兴的工具例如 SaltStack, Ansible, Chef 都有相关的部署模块。然而这些部署方案并没有简化 OpenStack 的部署，只是实现了过程的自动化。本质上是没有太大区别的。有些问题并没有很好的解决，例如包的依赖关系，升级困难等。&lt;/p&gt;
&lt;p&gt;吃自己的狗食，这在软件开发过程中很重要的一个原则。都说这东西好，自己都不用，怎么推给用户? 大家都知道容器好，各个厂商也都在积极的推广，但是你自己的产品容器化了么? 如果没有，怎么能说服客户呢? Kolla 的诞生就是吃自己狗食的结果，真正的利用容器来简化提升 OpenStack 的部署。&lt;/p&gt;
&lt;p&gt;与此同时，容器化还带来许多好处。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;简化安装流程，提升部署效率。容器化后，把整个安装过程简化成了生成配置文件、启动容器这么简单的两个步骤。宿主机上只依赖 Docker Engine 和 Docker-py ，不用安装其它任何二进制包。同时也提升了安装的效率。现在安装 100 个节点半小时左右就可以部署成功。如果使用传统的安装方式的话，最少要花一天的时间。&lt;/li&gt;
&lt;li&gt;环境隔离。容器化后，每个服务都是运行在单独的容器里面，运行环境是相互隔离的，这也就避免了包依赖导致的问题。同时，也使得单服务升级成为可能。例如使用 Ocata 版本的 Horizon 对接 Newton 版本的 Nova。&lt;/li&gt;
&lt;li&gt;升级和回滚。由于 OpenStack 模块众多，传统的部署方案很难来做 OpenStack 的升级，而且一旦升级失败，也无法做回滚操作。但是容器化后就不同了， 升级就是用新的容器替换旧的容器。回滚就是用旧容器替换新的容器。一切都变的简单自然。&lt;/li&gt;
&lt;li&gt;OpenStack 很多很有潜力的项目，以前因为发行版没有打包，导致用户测试、验证都很困难，用户投入生产使用，也面临重重的困难。这其实也是导致目前为止，用户还是停留在几个核心项目使用的主要障碍。kolla 支持以源代码的方式进行镜像构建，可以把大量对用户有价值的项目放到 Kolla 里，加快项目成熟的速度和开发周期。&lt;/li&gt;
&lt;li&gt;加快创新的速度，OpenStack 的完善单靠自身还是不够的，需要依赖外面很多项目。例如skydive,现在很多项目都是用容器进行发布，集成kolla的代价和周期就非常短。集成到 kolla，不需要考虑 OpenStack 版本、环境依赖甚至操作系统版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;OpenStack容器化技术难点&lt;/h2&gt;
&lt;p&gt;由于 Docker 一直在成长，因此必然面临不成熟的问题。在这也给整个容器化过程带来了许多困难。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;镜像构建&lt;/h3&gt;
&lt;p&gt;由于 OpenStack 部署涉及到的模块相当多，这其中既包括基础服务，如RabbitMQ，MySQL等，也包括 OpenStack 本身的众多服务，如 Keyston，Nova等。同时 Dockerfile 本身的描述能力又很有限。这些服务如何快速构建，是首要解决的问题。&lt;/p&gt;
&lt;p&gt;利用 Jinja2 模板，动态生成 Dockerfile 的文件，有效的简化了 Dockerfile 的内容并增强了 Dockerfile 的描述能力。
利用 Dockerfile 的镜像依赖功能，将公共数据安装到基础镜像中，私有数据安装在最终的镜像中，有效的提升了构建的速度，降低了所有镜像的总大小。现在一共有200多个镜像，总大小不超过4GB。&lt;/p&gt;
&lt;p&gt;同时支持 binary 和 source 两种构建方案，而且支持 CentOS, Ubuntu, OracleLinux 做为基础镜像，可以满足用户不同的需求。&lt;/p&gt;
&lt;p&gt;同时也支持在不修改代码的情况下，对镜像进行定制。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pid-1"&gt;
&lt;h3&gt;PID 1 进程&lt;/h3&gt;
&lt;p&gt;容器里面的第一个进程的进程号是 1, 由于Linux 内核中会对 pid 1 有特殊的意义，所以很多情况下会造成容器不能正常停止或大量僵尸进程的存在 。
一般情况下，当给一个进程发送信号时，内核会先检查是否有用户定义的处理函数，如果没有，就会回退到默认行为。例如使用 SIGTERM 直接杀死进程。然而 ，如果进程的 PID 是1, 内核会特殊对待它：如果没有注册用户处理函数 ， 内核不会回退到默认行为， 也就什么也不做 。多数的应用程序都不会注册 SIGTERM 的处理函数，当他接收 SIGTERM 信号时，什么也不会发生。最后只能通过 SIGKILL 杀死进程。同时， PID 1 进程还应该要负责容器内所有孤儿进程的资源回收。否则就会出现僵尸进程。&lt;/p&gt;
&lt;p&gt;解决方案在 Docker 1.13 之前，可能通过手动加入一个的 init 管理程序( 例如 tini )。如下&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Add Tini
ENV TINI_VERSION v0.15.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini
ENTRYPOINT [&amp;quot;/tini&amp;quot;, &amp;quot;--&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;Docker 1.13 之后，已经内置了一个 init 管理程序，使用如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
docker run --init -d centos &amp;lt;command&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;容器初始化&lt;/h3&gt;
&lt;p&gt;某些容器在启动之前，是要进行一定的初始化操作的，比方说 MySQL 服务，MySQL 的数据文件 /var/lib/mysql 目录肯定要放到一个单独的 docker volume 上面的。然而 docker volume 里面本身是空的，需要通过 mysql_install 命令初始化基础表，同时配置好 root 密码。这类操作只是在第一次启动 MySQL 之前是需要的，之后就没有必要了。所以解决方案是在真正启动 MySQL 之前，创建一个 bootstrap_mysql 的容器来进行初始化，初始化完成后就删除掉。之后在启动真正的 MySQL 容器。多数的有状态的服务都有类似需求，都可以通过这种方案来解决。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;配置文件&lt;/h3&gt;
&lt;p&gt;Docker 一直没有把配置文件的管理处理好。它推崇通过环境变量来处理，然而并不是所有的应用都可以适应这种要求。尤其是像 RabbitMQ 这种已经成熟的应用，和 OpenStack 这种有好上千个配置项的项目。如果配置文件固定死，镜像本身就很难做到通用。&lt;/p&gt;
&lt;p&gt;Kolla 的解决方案是：当容器启动的时候，需要通过 volume 的方式把配置文件加载到容器中的特殊位置，Kolla 在所有的镜像里内置一个脚本，通过读取加载进来的 config.json 文件，把配置文件拷贝到真正的目标位置。&lt;/p&gt;
&lt;p&gt;这么做的好处是，配置文件可以依据真正的部署环境，动态的增加或减少。比方说开启 ceph 的时候，就需要把 ceph.conf 的配置文件放到 /etc/ceph/ceph.conf 位置。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="namespace"&gt;
&lt;h3&gt;Namespace&lt;/h3&gt;
&lt;p&gt;Kolla 的一个实现原则就是单容器单进程。然而在Docker 1.10 版本之前，并不支持修改挂载点的挂载模式。所以之前的实现是单容器里面，通过 supervisord 把 neutron 的几个 agent 启动到同一个容器里面。这样几个 agents 创建的 namespace 才可以相互访问。从 Docker 1.10 版本起，支持了全部的挂载模式。通过利用 shared 的挂载方式，使得创建的 namespace 可以共享，从而可以把全部的 agent 运行到各自的容器里面。这一升级彻底实现了单容器单进程的目标，大大简化了部署结构。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;容器化 OpenStack 现状&lt;/h2&gt;
&lt;p&gt;现在有好几个厂商都在做容器化解决方案，其中包括 openstack-ansible，stackanetes，fuel-ccp， Kolla 等。但是只有 Kolla 最活跃，使用的最多，而且已经有了大量生产环境的案例。&lt;/p&gt;
&lt;p&gt;下图是 2017 年 OpenStack 用户调查的结果，可以看出 Kolla 的关注度已经跃居首位，有了很大的提升，有超过10%用户在测试环境使用Kolla, 其中4%的用户已经用于生产环境。&lt;/p&gt;
&lt;img alt="user survey 2017 deployment tool" class="align-center" src="images/kolla/user-survey-2017-deployment-tool.png" style="width: 690px;" /&gt;
&lt;p&gt;九州云已经有多个容器化 OpenStack 的生产环境，其中最早一个是某台湾客户于2016年6月份搭建完成并投入生产，共有53个物理节点，采用计算和存储融合的方式，到现在一直运行良好。&lt;/p&gt;
&lt;p&gt;Kolla 项目现在已经拆分成了三个子项目，包括解决镜像构建的 kolla, 利用 Ansible 编排部署的 kolla-ansible 项目，以及把 OpenStack 部署在 kubernetes 上面的 kolla-kubernetes 项目。后两者都是统一使用前者构建的镜像。&lt;/p&gt;
&lt;p&gt;现在 kolla-ansible 已经支持了所有 OpenStack big tent 项目，及大部分主流项目，可以满足不同用户的使用需求。同时 kolla-kubernetes 项目也很快会发布1.0 的版本。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kolla"&gt;
&lt;h2&gt;Kolla的成功&lt;/h2&gt;
&lt;p&gt;从立项开始，Kolla 项目的活跃度就一直保持在前几名，参与公司也是非常多的。包括 Redhat，Mirantis，Cisco，Intel，IBM 这些老牌大公司都在里面有大量贡献。反观有些项目，活跃度低不说，参与的公司也少，没有新鲜的血液，很难走的长久。值的一提的是，中国有多家公司在 Kolla 项目中均有大量的贡献。&lt;/p&gt;
&lt;img alt="kolla commits" class="align-center" src="images/kolla/kolla-commits.png" style="width: 690px;" /&gt;
&lt;p&gt;Kolla项目成功的另一个关键是技术的革新和正确的选择，包括：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;立项的时间 ：Kolla 项目开始于 2013年9月，是所有容器化部署 OpenStack 项目中最早启动的。&lt;/li&gt;
&lt;li&gt;部署工具采用了 Ansible 无疑是相当正确的选择。一是功能强大而且简单易用，不像 puppet 那么复杂，很快就可以上手。二是后来 Ansible 被 Redhat 收购后，发展相当迅猛，在 OpenStack 社区的使用率已经超过了 puppet。&lt;/li&gt;
&lt;li&gt;Docker 1.10 版本的发布。这个版本发布于2016年2月份，修复了大量问题，并增加了上面提到的挂载点模式的支持。当时 Kolla 也正在做大规模重构工作，正好利用版本发布的最后两个月时间把整体架构定了下来。从此 Kolla 的部署架构没有太大规模的调整，而且有些生产环境就是使用的 2016年4月份发布的 Mitaka 版本。如果当时 Docker 的版本没有解决这些问题或晚一个月发布，Kolla 的成熟肯定要晚半年时间。&lt;/li&gt;
&lt;li&gt;适时的放弃 kolla-mesos 转向 kolla-kubernetes 项目。 2016年初 kubernetes 1.2 版本发布让社区看到了 kubernetes 将来的发展，并立即中止了才开始半年时间的 kolla-mesos 项目，开始了 kolla-kubernets 项目。现在看来，这也是相当正确的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以 Kolla 的成功占据了天时、地利及人和。成功也是偶然中的必然。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;未来&lt;/h2&gt;
&lt;p&gt;Kolla 基本进入了一个成熟稳定的时期，在 Pike 这个周期内，虽然没有太大的架构变动，不过依然会增加很多新功能，比如支持Debian系统，支持DPDK，支持ARM和 Power 服务器，支持 VMware 和 HyperV 虚拟化以及更加全面的集成测试等。同时kolla-kubernetes 也同样值得期待。&lt;/p&gt;
&lt;p&gt;容器化 OpenStack 大大的简化了整个部署流程，真正实现了一键部署，给用户带来了极大的方便。可以预见，随着 OpenStack 安装的简化，将会吸引更过的用户部署和使用OpenStack，而随着一键升级、一键维护等功能的逐步完善，相信用户对OpenStack的使用将会更加普遍，更加得心应手。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Thu, 10 Aug 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2017-08-10:/containerize-openstack.html</guid><category>Docker</category><category>OpenStack</category></item><item><title>OpenStack Ocata Releasenotes</title><link>http://xcodest.me/openstack-ocata-releasenotes.html</link><description>&lt;div class="section" id="nova"&gt;
&lt;h2&gt;Nova&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ocata 版本加入了许多 Cell V2 的功能。但是不是所有的都可以用于生产。现在部署 Nova 需要最少创建一个 Cell。&lt;/li&gt;
&lt;li&gt;FilterScheduler 只能基于 Placement 服务做调度。现在只支持CPU, RAM 和 Disk 资源。将来会支持更多资源类型。&lt;/li&gt;
&lt;li&gt;Nova api 的 microversion 版本支持到 v2.42.&lt;/li&gt;
&lt;li&gt;增加了一个 nova-status 命令，方便运维人员做升级检查&lt;/li&gt;
&lt;li&gt;增加对 OSProfiler 工具的支持。方便分析 OpenStack 控制平面的性能。&lt;/li&gt;
&lt;li&gt;serial console 支持 ironic。&lt;/li&gt;
&lt;li&gt;Vlan tags 信息可以通过 metadata 服务获取。&lt;/li&gt;
&lt;li&gt;增强 Hyer-V 的支持。&lt;/li&gt;
&lt;li&gt;增强对 Virtuozzo 的支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="keystone"&gt;
&lt;h2&gt;Keystone&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fernet 成为默认的 Token Provider&lt;/li&gt;
&lt;li&gt;PKI 和 PKIz token provider 被移除。&lt;/li&gt;
&lt;li&gt;增加 OSProfile 支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="glance"&gt;
&lt;h2&gt;Glance&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;支持无宕机的数据库升级&lt;/li&gt;
&lt;li&gt;Minor Version API 升级到 2.5&lt;/li&gt;
&lt;li&gt;镜像可见性增加 community 选项。&lt;/li&gt;
&lt;li&gt;支持 ploop 格式的镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cinder"&gt;
&lt;h2&gt;Cinder&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;增加 Active-Active 的高可用支持(实验)。&lt;/li&gt;
&lt;li&gt;大量的 Driver 增强，包括: Dell SC，Ceph, Datera, Hitachi 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="neutron"&gt;
&lt;h2&gt;Neutron&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Linux Bridge agent 支持 QoS DSCP。&lt;/li&gt;
&lt;li&gt;Resource tag 机制支持 subnet, port, subnetpool 和 router.&lt;/li&gt;
&lt;li&gt;增加对 Placement API 的支持。&lt;/li&gt;
&lt;li&gt;增加 neutron-netns-cleanup 工具进行 namespace 清理。&lt;/li&gt;
&lt;li&gt;支持 oslo.privsep&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ceilometer"&gt;
&lt;h2&gt;Ceilometer&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;增加对 Cinder volume, snapshot 和 backup 大小的计量。&lt;/li&gt;
&lt;li&gt;通过 libvirt api 来获取 metadata 信息，不用再请求 Nova API。&lt;/li&gt;
&lt;li&gt;废弃 ceilometer-api 和 ceilometer-collector。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="heat"&gt;
&lt;h2&gt;Heat&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;增加 OS::Aodh::CompositeAlarm&lt;/li&gt;
&lt;li&gt;增加 OS::Cinder::QoSAssociation&lt;/li&gt;
&lt;li&gt;增加 OS::Designate::Zone 和 OS::Designate::RecordSet&lt;/li&gt;
&lt;li&gt;增加 OS::Keystone::Domain&lt;/li&gt;
&lt;li&gt;增加 OS::Neutron::Quota&lt;/li&gt;
&lt;li&gt;增加 OS::Nova::Quota&lt;/li&gt;
&lt;li&gt;增加 OS::Sahara::Job&lt;/li&gt;
&lt;li&gt;增加 OS::Zaqar::Notification 和 OS::Zaqar::MistralTrigger&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="horizon"&gt;
&lt;h2&gt;Horizon&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;支持 Keystone to keystone feration。&lt;/li&gt;
&lt;li&gt;Access &amp;amp; Security 移到了单独的 panel 里面&lt;/li&gt;
&lt;li&gt;增加对 osprofiler 的支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ironic"&gt;
&lt;h2&gt;Ironic&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Port Group 允许用户做 Bond&lt;/li&gt;
&lt;li&gt;API 支持 power off, soft reboot 和 sending non-maskable interrupts&lt;/li&gt;
&lt;li&gt;删除 AMT, iBoot, msftocs, seamicro, VirtualBox, and Wake-On-Lan 驱动。&lt;/li&gt;
&lt;li&gt;Ironic API 支持审计&lt;/li&gt;
&lt;li&gt;增加对 Dynamic Driver 的支持。&lt;/li&gt;
&lt;li&gt;支持从一个 conductor 节点部署不同CPU 类型的机器.&lt;/li&gt;
&lt;li&gt;支持 OneView Driver.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sahara"&gt;
&lt;h2&gt;Sahara&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;支持 Kafka MapR 插件&lt;/li&gt;
&lt;li&gt;支持 CDH 5.9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="kolla"&gt;
&lt;h2&gt;Kolla&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;增加 Freezer, Karbor, Monasca, Panko, Zun, Redis 等镜像构建&lt;/li&gt;
&lt;li&gt;支持用户指定 policy.json 文件。&lt;/li&gt;
&lt;li&gt;增加 kolla-host 命令，用来初始化系统及安装 docker。&lt;/li&gt;
&lt;li&gt;增加静态 uid, gid 支持。&lt;/li&gt;
&lt;li&gt;实现部署 Designate, Cloudkitty, Panko, Ocatavia, Collectd 等服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Sun, 12 Mar 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2017-03-12:/openstack-ocata-releasenotes.html</guid><category>OpenStack</category></item><item><title>Nova Cell V2 详解</title><link>http://xcodest.me/nova-cell-v2.html</link><description>&lt;p&gt;现在，OpenStack 在控制平面上的性能瓶颈主要在 Message Queue 和 Database 。尤其是 Message Queue , 随着计算节点的增加，性能变的越来越差。为了应对这种情况， Nova 很早之前提出来 nova-cell (以下以 cellv1 代替)  的解决方案。目的是在把大的 OpenStack 集群分成小的单元，每个单元有自己的 Message Queue 和 Database。以此来解决规模增加时引起的性能问题。而且不会向 Region 那样，把各个集群独立运行。在 cell 里面，Keystone、Neutron、Cinder、Glance 等资源还是共享的。&lt;/p&gt;
&lt;div class="section" id="cell-v1"&gt;
&lt;h2&gt;cell v1&lt;/h2&gt;
&lt;p&gt;cellv1 最初的想法很好，但是局限于早期 nova 的架构，硬生生的加个 nova-cell 服务来在各个 cell 间传递消息，使得架构更加复杂。以下是 cellv1 的架构&lt;/p&gt;
&lt;img alt="nova cell v1 architecture" class="align-center" src="images/nova-cell/nova-cell-v1-arch.jpg" style="width: 371px; height: 374px;" /&gt;
&lt;p&gt;cell v1 的问题在于：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;一直以来，cell v1 被标记为实验性质&lt;/li&gt;
&lt;li&gt;相关的测试很少，而且也没有 v1 + neutron 的测试&lt;/li&gt;
&lt;li&gt;现在来说功能已经冻结，不会加入新的功能&lt;/li&gt;
&lt;li&gt;不严重的 Bug 根本不会去修复&lt;/li&gt;
&lt;li&gt;使用案例很少。现在经常提到的使用案例也只有CERN（欧洲原子能研究中心）。一般规模下，完全没有必要搭建 cell v1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，现在进行部署的话，如果用 cell, 就尽量使用 cell v2 吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cell-v2"&gt;
&lt;h2&gt;cell v2&lt;/h2&gt;
&lt;p&gt;cell v2 自 Newton 版本引入，Ocata 版本变为必要组件。以后默认部署都会初始化一个单 cell 的架构。&lt;/p&gt;
&lt;p&gt;cell v2 的架构图如下，看着比 cell v1 清爽不少。&lt;/p&gt;
&lt;img alt="nova cell v2 architecture" class="align-center" src="images/nova-cell/nova-cell-v2-arch.jpg" style="width: 554px; height: 319px;" /&gt;
&lt;p&gt;从架构图上，可以看到：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;api 和 cell 有了明显的边界。 api 层面只需要数据库，不需要 Message Queue。&lt;ul&gt;
&lt;li&gt;nova-api 现在依赖 nova_api 和 nova_cell0 两个数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nova-scheduler 服务只需要在 api 层面上安装，cell 不需要参数调度。这样实现了一次调度就可以确定到具体在哪个 cell 的哪台机器上启动&lt;ul&gt;
&lt;li&gt;这里其实依赖 placement 服务, 以后的文章会提到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cell 里面只需要安装 nova-compute 和 nova-conductor 服务，和其依赖的 DB 和 MQ&lt;/li&gt;
&lt;li&gt;所有的 cell 变成一个扁平架构。比之前的多层父子架构要简化很多。&lt;/li&gt;
&lt;li&gt;api上面服务会直接连接 cell 的 MQ 和 DB, 所以不需要类似 nova-cell 这样子的额外服务存在。性能上也会有及大的提升&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="nova-api-nova-cell0"&gt;
&lt;h3&gt;nova_api &amp;amp; nova_cell0&lt;/h3&gt;
&lt;p&gt;自 Newton 版本，nova 就一直拆分 nova 数据库， 为 cell v2 做准备。 把一些全局数据表从 nova 库搬到了 nova_api, 下面是现在 nova_api 里面的所有表。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
+------------------------------+     +------------------------------+
| Tables_in_nova_api           |     | Tables_in_nova_api           |
+------------------------------+     +------------------------------+
| aggregate_hosts              |     | inventories                  |
| aggregate_metadata           |     | key_pairs                    |
| aggregates                   |     | migrate_version              |
| allocations                  |     | placement_aggregates         |
| build_requests               |     | project_user_quotas          |
| cell_mappings                |     | quota_classes                |
| flavor_extra_specs           |     | quota_usages                 |
| flavor_projects              |     | quotas                       |
| flavors                      |     | request_specs                |
| host_mappings                |     | reservations                 |
| instance_group_member        |     | resource_classes             |
| instance_group_policy        |     | resource_provider_aggregates |
| instance_groups              |     | resource_providers           |
| instance_mappings            |     |                              |
+------------------------------+     +------------------------------+
&lt;/pre&gt;
&lt;p&gt;可以看到像 flavor, instance groups, quota 这些表已经迁移了过来。&lt;/p&gt;
&lt;p&gt;nova_cell0 数据库的 schema 和 nova 是一样的，他存在的只要用途是：当 instance 调度失败时， instance 的信息不属于任何一个 cell, 所以放到 cell0 上面。因此里面的数据并不是太重要。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cell-related-tables"&gt;
&lt;h3&gt;Cell Related Tables&lt;/h3&gt;
&lt;p&gt;Cell 相关的数据库表都在 nova_api 里面，包括 cell_mappings, host_mappings, instance_mappings。其表结构如下：&lt;/p&gt;
&lt;img alt="nova cell v2 uml" class="align-center" src="images/nova-cell/nova-cell-v2-uml.jpg" style="width: 391px; height: 204px;" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;cell_mappings 表 cell 的 Database 和 Mesage Queue 的连接。用于和子 cell 通讯&lt;/li&gt;
&lt;li&gt;host_mappings 是用于 nova-scheduler, 可以确认分配到的机器。这里其实也有一个坑，之前 nova-compute 启动起来，就可以直接使用了，cell v2 之后，就需要手动运行 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nova-manage&lt;/span&gt; cell_v2 discover_host&lt;/tt&gt; , 把 host mapping 到 cell_mappings 表里面，那台计算节点才会加入到调度中。&lt;/li&gt;
&lt;li&gt;instance_mappings 表里有所有 instance id, 这样在查询 instance 时，就可以从这个表里查到他所在的 cell, 然后直连 cell 拿到 instance 具体信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cell"&gt;
&lt;h3&gt;cell 流程&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
                        api/cell boundary
                                +
 nova show &amp;lt;uuid&amp;gt;               |
             |                  |
             v      3           |
        nova-api+--------------------&amp;gt;cell-db
         +     +                |
         |     +----+           |
        1|          | 2         |      1. Determine which cell the instance is in
         v          v           |      2. Get db connection for cell
instance_mapping  cell_mapping  |      3. Query cell db for data
                                +
&lt;/pre&gt;
&lt;p&gt;当想要获取一个机器的详细信息时:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;nova-api 先从 instance_mappings 表拿到 instance 的 cell_id&lt;/li&gt;
&lt;li&gt;再从 cell_mappings 表拿到所在 cell 的 DB connection&lt;/li&gt;
&lt;li&gt;直接连接 cell  的 DB 拿到机器的详细信息&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
                        api/cell boundary
                                +
 nova reboot &amp;lt;uuid&amp;gt;             |
              +                 |
              |                 |
              v    3            |
        nova-api+--------------------&amp;gt;cell-mq+-----&amp;gt;compute
         +     +                |
         |     +---+            |
        1|         | 2          |      1. Determine which cell the instance is in
         v         v            |      2. Get mq connection for cell
instance_mapping cell_mapping   |      3. Send RPC message to compute
                                +
&lt;/pre&gt;
&lt;p&gt;当要重启一台机器时：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;nova-api 先从 instance_mappings 表里拿到 instance 所在的 cell_id&lt;/li&gt;
&lt;li&gt;从 cell_mappings 里拿到所在 cell 的 message queue 连接&lt;/li&gt;
&lt;li&gt;nova-api 直接给 mq 的相关队列发重启机器的消息&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
                        api/cell boundary
                                +
 nova boot  ...                 |
         +        3             |
         |    +----------------------&amp;gt;cell-db
         v    +   4             |
        nova-api+--------------------&amp;gt;cell-mq+-&amp;gt;conductor+-&amp;gt;compute
         +    +                 |
         |    +-------------+   |
        2|     1            |   |
         v                  |   |       1. Schedule the instance
instance_mapping            |   |       2. Record which cell the instance was scheduled to
                            |   +       3. Create instance record
                            v           4. Send RPC message to conductor to build
                       scheduling
&lt;/pre&gt;
&lt;p&gt;当新建机器时:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;nova-api 接到用户的请求信息，先转发到 nova-scheduler 进行调度，
nova-scheduler 通过 placement service, 直接确定分配到哪台机器上&lt;/li&gt;
&lt;li&gt;nova-api 把 instance 的信息存入instance_mappings 表&lt;/li&gt;
&lt;li&gt;nova-api 把机器信息存到目标 cell 的 database&lt;/li&gt;
&lt;li&gt;nova-api 给 cell 的 message queue 的相关队列发消息，启动机器&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;Cell v2 的优点&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;数据库和消息队列作为 nova 的一等公民。&lt;/li&gt;
&lt;li&gt;在 cell 的数据库里没有冗余数据，所有共享数据都在 nova-api 中&lt;/li&gt;
&lt;li&gt;全局数据和 cell 数据有一条清晰的界线&lt;/li&gt;
&lt;li&gt;非 cell 用户很容易的就可以迁移到 cell v2 上面。不需要更改现在的部署架构&lt;/li&gt;
&lt;li&gt;cell v1 的用户也可以迁移到 cell v2 上。只要手动建立起所有的mapping, 关掉现在存在的 nova-cell 服务，清掉最上层 cell 的数据库。但是最上层 cell 本质上和其它 cell 是不同的。 所以需要调整架构&lt;/li&gt;
&lt;li&gt;增减 cell 变的十分简单，而且在把某个cell 加入之前，可以在其它环境进行测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;Cell v2 相关命令&lt;/h3&gt;
&lt;p&gt;因为 cell v2 完全靠 database 的操作为建立，所以也没有相关的 api 接口。 主要靠 nova-manage cell_v2 命令。详细说明参见 &lt;a class="footnote-reference" href="#id7" id="id3"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nova-manage cell_v2

    create_cell
    delete_cell
    list_cells

    map_cell0
    discover_hosts
    simple_cell_setup

    map_cell_and_hosts
    map_instances
    verify_instance
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;其它&lt;/h3&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;计算节点自动发现&lt;/h4&gt;
&lt;p&gt;上面提到了现在 nova-compute 服务上线后，不会自动加到 nova-api 的 host_mappings 里面，也就不会加到 nova-scheduler 的调度中。 需要手动运行 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nova-manage&lt;/span&gt; cell_v2 discover_hosts&lt;/tt&gt; 命令。这显示略显繁琐。&lt;/p&gt;
&lt;p&gt;在小型一些的环境上，推荐打开自动发现功能，就不用手动跑命令了。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[scheduler]
discover_hosts_in_cells_interval=-1

#This value controls how often (in seconds) the scheduler should attempt
#to discover new hosts that have been added to cells. If negative (the
#default), no automatic discovery will occur.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h4&gt;性能分析&lt;/h4&gt;
&lt;p&gt;为了拿到 instance 的详细信息，需要查询 nova_api 数据库，相比之前要多查询一次数据库( 虽然是有三个表，但是可以用多表连接查询，一次就可以拿到所有的结果 )。但是一来数据相当少，而且很容易加上一层 cache, 并不会对性造成什么影响。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="kolla"&gt;
&lt;h3&gt;Kolla 实现&lt;/h3&gt;
&lt;p&gt;现在 Kolla 已经支持自动部署一个基本的 cell 环境，而且支持从没有 cell 的 Newton 升级到有 cell 的 Ocata 版本。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ref"&gt;
&lt;h2&gt;REF&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://docs.openstack.org/developer/nova/man/nova-manage.html#nova-cells-v2"&gt;https://docs.openstack.org/developer/nova/man/nova-manage.html#nova-cells-v2&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[2]&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.openstack.org/videos/video/nova-cells-v2-whats-going-on"&gt;Presentation that Andrew Laski gave at the Austin (Newton) summit&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[3]&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://docs.openstack.org/developer/nova/cells.html"&gt;https://docs.openstack.org/developer/nova/cells.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[4]&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://paste.openstack.org/show/144068/"&gt;Flow chart&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[5]&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://wiki.openstack.org/wiki/Nova-Cells-v2"&gt;https://wiki.openstack.org/wiki/Nova-Cells-v2&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[6]&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.ustack.com/news/what-is-nova-cells-v2/"&gt;https://www.ustack.com/news/what-is-nova-cells-v2/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[7]&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://www.cnblogs.com/wanglm/articles/5749813.html"&gt;http://www.cnblogs.com/wanglm/articles/5749813.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Thu, 23 Feb 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2017-02-23:/nova-cell-v2.html</guid><category>OpenStack</category><category>Kolla</category></item><item><title>Ansible with-items auto flatten list of lists</title><link>http://xcodest.me/ansible-with-items-auto-flatten-list-of-lists.html</link><description>&lt;p&gt;Ansible has &lt;tt class="docutils literal"&gt;with_items&lt;/tt&gt; directive, which make task iterating the lists in
&lt;tt class="docutils literal"&gt;with_items&lt;/tt&gt;. A normal usage is like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: copy file
  copy: src={{ item }} dest=/root/.ssh/{{ item }}
  with_items:
    - id_rsa
    - id_rsa.pub
&lt;/pre&gt;
&lt;p&gt;But if you use list of lists, it will not work as your expect.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: copy file
  copy: src={{ item.0 }} dest=/root/.ssh/{{ item.1 }}
  with_items:
    - [ id_rsa, id_rsa_foo ]
    - [ id_rsa.pub, rd_rsa_foo.pub ]
&lt;/pre&gt;
&lt;p&gt;Ansible will flatten the lists just like what &lt;tt class="docutils literal"&gt;with_flatten&lt;/tt&gt; does. As a
result, it will work like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: copy file
  copy: src={{ item.0 }} dest=/root/.ssh/{{ item.1 }}
  with_items:
    - id_rsa
    - id_rsa_foo
    - id_rsa.pub
    - id_rsa_foo.pub
&lt;/pre&gt;
&lt;p&gt;This is not what we want, of curse. The workaround is wrapping the list of
lists. like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- name: copy file
  copy: src={{ item.0 }} dest=/root/.ssh/{{ item.1 }}
  with_items:
    -
      - [ id_rsa, id_rsa_foo ]
      - [ id_rsa.pub, rd_rsa_foo.pub ]
&lt;/pre&gt;
&lt;p&gt;This is a historical issue rather than a bug. Here is the related ansible
bug[0] and doc fix[1].&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;[0] &lt;a class="reference external" href="https://github.com/ansible/ansible/issues/5913"&gt;https://github.com/ansible/ansible/issues/5913&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1] &lt;a class="reference external" href="https://github.com/ko-zu/ansible/commit/0a1a5cde86df0424441b78dd9e67b96159cfd70f"&gt;https://github.com/ko-zu/ansible/commit/0a1a5cde86df0424441b78dd9e67b96159cfd70f&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Tue, 27 Dec 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2016-12-27:/ansible-with-items-auto-flatten-list-of-lists.html</guid><category>Ansible</category></item><item><title>CentOS 根分区自动扩展</title><link>http://xcodest.me/centos-root-partition-auto-grow.html</link><description>&lt;p&gt;CentOS 5 太老了，完全不支持。&lt;/p&gt;
&lt;p&gt;CentOS 6 要实现分区自动扩展，要安装以下三个包&lt;/p&gt;
&lt;pre class="literal-block"&gt;
yum -y install cloud-init cloud-utils-growpart dracut-modules-growroot
# 生新生成 initramfs
dracut -f
systemctl enable cloud-init
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;dracut&lt;/tt&gt; 把 &lt;tt class="docutils literal"&gt;growroot&lt;/tt&gt; 的脚本封装到 &lt;tt class="docutils literal"&gt;initramfs&lt;/tt&gt; 里面。 把系统启动时，
&lt;tt class="docutils literal"&gt;initramfs&lt;/tt&gt; 利用 &lt;tt class="docutils literal"&gt;growpart&lt;/tt&gt; 命令把根分区进行扩展。然后启动真正的
&lt;tt class="docutils literal"&gt;kernel&lt;/tt&gt;, 之后 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cloud-init&lt;/span&gt;&lt;/tt&gt; 服务会自动把文件系统进行扩展。&lt;/p&gt;
&lt;p&gt;之所以使用 &lt;tt class="docutils literal"&gt;initramfs&lt;/tt&gt; 这种方式，原因[0]：&lt;/p&gt;
&lt;blockquote&gt;
Growpart called by cloud-init only works for kernels &amp;gt;3.8. Only newer
kernels support changing the partition size of a mounted partition. When
using an older kernel the resizing of the root partition happens in the
initrd stage before the root partition is mounted and the subsequent
cloud-init growpart run is a no-op.&lt;/blockquote&gt;
&lt;p&gt;CentOS 7 使用的是 3.10 ( &amp;gt; 3.8 ) 的内核，所以并不需要 dracut-modules-growroot
包( 源里面也并没有这个包 )。 只安装以下两个包就可以了。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
yum -y install cloud-init cloud-utils-growpart
systemctl enable cloud-init
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;[0] &lt;a class="reference external" href="http://openstack.openstack.narkive.com/opyLuPqC/centos-6-5-cloud-init-growpart-resizefs-does-not-work-on-first-boot"&gt;http://openstack.openstack.narkive.com/opyLuPqC/centos-6-5-cloud-init-growpart-resizefs-does-not-work-on-first-boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 14 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2016-11-14:/centos-root-partition-auto-grow.html</guid><category>Linux</category><category>OpenStack</category></item><item><title>Docker init 进程</title><link>http://xcodest.me/docker-init-process.html</link><description>&lt;p&gt;应用容器化后，重启容器的时候，经常会很慢，而且docker daemon 日志中经常会抛出以&lt;br&gt;
下错误&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dockerd[559]: msg=&amp;quot;Container 5054f failed to exit within 10 seconds of
signal 15 - using the force&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认的的 signal 15 根本就没有使其退出，最后还是 10 秒超时后强制退出(kill)的。而&lt;br&gt;
且有时还会出现大量僵尸进程&lt;/p&gt;
&lt;p&gt;这可不是一个好现象。本文解释其原因及解决方法。&lt;/p&gt;
&lt;h2 id="_1"&gt;背景知识&lt;/h2&gt;
&lt;h3 id="_2"&gt;信号&lt;/h3&gt;
&lt;p&gt;这个是 Linux 最常见一个概念，一般杀死进程时都会用到 &lt;code&gt;kill &amp;lt;pid&amp;gt;&lt;/code&gt; 。 不同的信&lt;br&gt;
号有不同的默认行为。用户可以注册自己的信号处理函数，来覆盖掉默认行为。&lt;/p&gt;
&lt;h3 id="_3"&gt;僵尸进程&lt;/h3&gt;
&lt;p&gt;僵尸进程是终止运行的进程，为什么它们是有害的? &lt;/p&gt;
&lt;p&gt;虽然应用申请的内存已经释放了，但是你依然能通过 &lt;code&gt;ps&lt;/code&gt; 看到它。这是因为有一些内&lt;br&gt;
核资源没有释放。下面是 Linux &lt;code&gt;waitpid&lt;/code&gt; 的 man page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;As long as a zombie is not removed from the system via a wait, it will
consume a slot in the kernel process table, and if this table fills, it
will not be possible to create further processes.&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_4"&gt;容器化后的问题&lt;/h2&gt;
&lt;p&gt;容器化后，由于单容器单进程，已经没有传统意义上的 init 进程了。应用进程直接占用&lt;br&gt;
了 pid 1 的进程号。从而导致以下两个问题。&lt;/p&gt;
&lt;h3 id="_5"&gt;进程不能正常终止&lt;/h3&gt;
&lt;p&gt;Linux 内核中会对 pid 1 进程发送特殊的信号量。&lt;/p&gt;
&lt;p&gt;一般情况下，当给一个进程发送信号时，内核会先检查是否有用户定义的处理函数，如果&lt;br&gt;
没有，就会回退到默认行为。例如使用 SIGTERM 直接杀死进程。然而，如果进程的 PID&lt;br&gt;
是 1, 内核会特殊对待它。如果没有没有注册用户处理函数，内核不会回退到默认行为，&lt;br&gt;
什么也不做。换句话说，如果你的进程没有处理信号的函数，给他发送 &lt;code&gt;SIGTERM&lt;/code&gt; 会一&lt;br&gt;
点效果也没有。&lt;/p&gt;
&lt;p&gt;常见的使用是 docker run my-container script. 给 &lt;code&gt;docker run&lt;/code&gt; 进程发送&lt;br&gt;
&lt;code&gt;SIGTERM&lt;/code&gt; 信号会杀掉 &lt;code&gt;docker run&lt;/code&gt; 进程，但是容器还在后台运行。&lt;/p&gt;
&lt;h3 id="_6"&gt;孤儿僵尸进程不能正常回收&lt;/h3&gt;
&lt;p&gt;当进程退出时，它会变成僵尸进程，直到它的父进程调用 &lt;code&gt;wait()&lt;/code&gt; ( 或其变种 ) 的系&lt;br&gt;
统调用。process table 里面会把它的标记为 &lt;code&gt;defunct&lt;/code&gt; 状态。一般情况下，父进程应&lt;br&gt;
该立即调用 &lt;code&gt;wait()&lt;/code&gt;, 以防僵尸进程时间过长。&lt;/p&gt;
&lt;p&gt;如果父进程在子进程之前退出，子进程会变成孤儿进程, 它的父进程会变成 PID 1。因此&lt;br&gt;
，init 进程就要对这些进程负责，并在适当的时候调用 &lt;code&gt;wait()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;但是，通常情况下，大部分进程不会处理偶然依附在自己进程上的随机子进程，所以在容器&lt;br&gt;
中，会出现许多僵尸进程。&lt;/p&gt;
&lt;h2 id="_7"&gt;解决方案&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;让所有的应用能正确的处理以上的情况，不太现实。好在现在有很多解决方案，例如&lt;br&gt;
dumb-init [0] 。他像是一个小型 init 服务，他启动一个子进程并转发所有接收到的信&lt;br&gt;
号量给子进程。而且不需要修改应用代码。&lt;/p&gt;
&lt;p&gt;此时你的应用进程已经不是 pid 1 了，所以已经没有上面提到的问题。而且 dumb-init&lt;br&gt;
也会转发所有的信号给子进程，应用的形为和在没有 dumb-init 时是一样的。如果应用进&lt;br&gt;
程死掉了，dumb-init 进程也会死掉，并会清理所有其它的子进程。&lt;/p&gt;
&lt;p&gt;使用方法如下, 在 Dockerfile 里面加上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# install dumb-init
RUN wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64
RUN chmod +x /usr/local/bin/dumb-init

# Runs &amp;quot;/usr/bin/dumb-init -- /my/script --with --args&amp;quot;
ENTRYPOINT [&amp;quot;/usr/bin/dumb-init&amp;quot;, &amp;quot;--&amp;quot;]
CMD [&amp;quot;/my/script&amp;quot;, &amp;quot;--with&amp;quot;, &amp;quot;--args&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;类似的方案 tini [1], pidunu[3]&lt;/p&gt;
&lt;h2 id="_8"&gt;参考资料&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;[0] https://github.com/Yelp/dumb-init&lt;br&gt;
[1] https://github.com/krallin/tini&lt;br&gt;
[2] https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem&lt;br&gt;
[3] https://github.com/rciorba/pidunu&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 07 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2016-11-07:/docker-init-process.html</guid><category>Linux</category><category>Docker</category></item><item><title>Reset Password in Systemd</title><link>http://xcodest.me/reset-password-in-systemd.html</link><description>&lt;p&gt;现在基本是用 ssh key 来登录系统了。之前可以直接在 GRUB 直接进单用户改密码。使用了 systemd 的系统，后已经不可以这么使用了。原因是 Systemd 的单用户模式使用了 &lt;tt class="docutils literal"&gt;/usr/sbin/sulogin&lt;/tt&gt; 这个 shell, 也必须输入密码才可以。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# /usr/lib/systemd/system/rescue.service
[Unit]
Description=Rescue Shell
Documentation=man:sulogin(8)
DefaultDependencies=no
Conflicts=shutdown.target
After=sysinit.target plymouth-start.service
Before=shutdown.target

[Service]
Environment=HOME=/root
WorkingDirectory=-/root
ExecStartPre=-/bin/plymouth --wait quit
ExecStartPre=-/bin/echo -e 'You are in rescue mode. After logging in, type &amp;quot;journalctl -xb&amp;quot; to view\\nsystem logs, &amp;quot;systemctl reboot&amp;quot; to reboot, &amp;quot;systemctl default&amp;quot; or ^D to\\nboot into default mode.'
ExecStart=-/bin/sh -c &amp;quot;/usr/bin/sulogin; /usr/bin/systemctl --job-mode=fail --no-block default&amp;quot;
Type=idle
StandardInput=tty-force
StandardOutput=inherit
StandardError=inherit
KillMode=process
IgnoreSIGPIPE=no
SendSIGHUP=yes
&lt;/pre&gt;
&lt;p&gt;自 systemd 215 版本后，新加了一个 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;systemd.debug-shell&lt;/span&gt;&lt;/tt&gt; 的内核参数，内容如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# /usr/lib/systemd/system/debug-shell.service
[Unit]
Description=Early root shell on /dev/tty9 FOR DEBUGGING ONLY
Documentation=man:sushell(8)
DefaultDependencies=no
IgnoreOnIsolate=yes
ConditionPathExists=/dev/tty9

[Service]
Environment=TERM=linux
ExecStart=/bin/sh
Restart=always
RestartSec=0
StandardInput=tty
TTYPath=/dev/tty9
TTYReset=yes
TTYVHangup=yes
KillMode=process
IgnoreSIGPIPE=no
# bash ignores SIGTERM
KillSignal=SIGHUP

# Unset locale for the console getty since the console has problems
# displaying some internationalized messages.
Environment=LANG= LANGUAGE= LC_CTYPE= LC_NUMERIC= LC_TIME= LC_COLLATE= LC_MONETARY= LC_MESSAGES= LC_PAPER= LC_NAME= LC_ADDRESS= LC_TELEPHONE= LC_MEASUREMENT= LC_IDENTIFICATION=

[Install]
WantedBy=sysinit.target
&lt;/pre&gt;
&lt;p&gt;可以看到，systemd 直接在 &lt;tt class="docutils literal"&gt;tty9&lt;/tt&gt; 上面开了一个 sh, 不用密码就可以登录。&lt;/p&gt;
&lt;p&gt;使用方法很简单，在 GRUB 界面上，输入 &lt;tt class="docutils literal"&gt;e&lt;/tt&gt; 进入编辑模式，找到 &lt;tt class="docutils literal"&gt;linux16&lt;/tt&gt; 那一行，在后面加入 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;systemd.debug-shell&lt;/span&gt;&lt;/tt&gt; 就可以了。之后 &lt;tt class="docutils literal"&gt;Ctrl + x&lt;/tt&gt; 继续启动就可以了。启动完成后，&lt;tt class="docutils literal"&gt;Ctrl + Alt + F9&lt;/tt&gt; 进入 &lt;tt class="docutils literal"&gt;tty9&lt;/tt&gt;， 就可以欢快的改密码了&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Sun, 28 Aug 2016 10:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2016-08-28:/reset-password-in-systemd.html</guid><category>Linux</category><category>Systemd</category></item><item><title>Code Review 神器 -- Gertty</title><link>http://xcodest.me/effective-code-review-tool-gertty.html</link><description>
&lt;p&gt;现在很多项目都使用 Gerrit 做为代码 Review 工具。OpenStack 所有的项目就是放在 Gerrit 上的。Gerrit 提供了一个 Web 页面来做 Code Review。今天我介绍一个更加高效的工具来处理 Gerrit Review。它的名字叫 gertty。&lt;/p&gt;
&lt;p&gt;Gertty 的 OpenStack 下面的一个项目&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;，官方的介绍是：Gertty is a console-based interface to the Gerrit Code Review system。就是一个基于终端的 Gerrit 代码 Review 工具。&lt;/p&gt;
&lt;p&gt;相比较 Web 版本，它的优势体现在&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作流程 - Gertty 的界面设计和邮件、网络消息的设计很类似，很容易上手。而且它特别适合多个项目时处理大量 Review 请求。&lt;/li&gt;
&lt;li&gt;离线使用 - Gertty 会把 Gerrit 上你订阅的项目的所有的数据同步到本地。包括 Git 仓库，所有的 Review 信息。你本地所有的 Review 操作也会同步到 Gertty。&lt;/li&gt;
&lt;li&gt;速度 - 因为 Gertty 会把数据都同步到本地，你的操作也会存放到本地，之后在统一同步到服务器，所以速度是很快的。&lt;/li&gt;
&lt;li&gt;方便 - Gertty 把所有的 Changes 都同步到了本地，你可以很方便的 checkout 到正在 Review 的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_1"&gt;安装&lt;/h1&gt;
&lt;p&gt;gertty 就是一个 Python 写的应用，所以安装很方便。可以从 pypi 安装，也可以从直接从源码安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install gertty
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从源码安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/openstack/gertty.git
cd gertty
pip install .
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="_2"&gt;配置&lt;/h1&gt;
&lt;p&gt;Gertty 使用一个 YAML 格式的配置文件。可以从源码里找到一些例子&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;。我们以 OpenStack 为例。&lt;/p&gt;
&lt;p&gt;首先要选配置在 Gerrit 上面配置自己的 HTTP Passowrd。打开 https://review.openstack.org/#/settings/http-password , 去修改里面的 Password&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gerrit HTTP Password" class="img-responsive" src="images/openstack_gerrit_http_password.png"/&gt;&lt;/p&gt;
&lt;p&gt;如果使用源码安装，请把把源码里的 &lt;code&gt;examples/openstack-gertty.yaml&lt;/code&gt; 文件拷贝到 &lt;code&gt;~/.gertty.yml&lt;/code&gt;，修改该文件内容如下(主要是 servers 下面的内容)，其它部分不用修改：&lt;/p&gt;
&lt;p&gt;如果使用 pip 安装的，在 &lt;code&gt;/usr/local/share/gertty/examples/openstack-gertty.yaml&lt;/code&gt; 这个位置可以找到所需要的文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;servers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;openstack&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;url&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://review.openstack.org/&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;username&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Jeffrey4l&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;xxxx&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git-root&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接运行 &lt;code&gt;gertty&lt;/code&gt;, 看到如下欢迎界面。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gertty Welcome" class="img-responsive" src="images/gertty_welcome.png"/&gt;&lt;/p&gt;
&lt;p&gt;如里面的说明，按&lt;code&gt;F1&lt;/code&gt;或&lt;code&gt;?&lt;/code&gt; 进帮助， 我们按 &lt;code&gt;L&lt;/code&gt; 进项目列表，找到自己感兴趣的项目按 &lt;code&gt;s&lt;/code&gt; 进行订阅。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gertty Welcome" class="img-responsive" src="images/gertty_subscribe_project.png"/&gt;&lt;/p&gt;
&lt;p&gt;按 &lt;code&gt;F2&lt;/code&gt; 可以看到自己的 changes&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gertty Welcome" class="img-responsive" src="images/gertty_my_opened_changes.png"/&gt;&lt;/p&gt;
&lt;p&gt;按 &lt;code&gt;F3&lt;/code&gt; 可以看到需要自己 review 的代码&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gertty Welcome" class="img-responsive" src="images/gertty_incoming_changes.png"/&gt;&lt;/p&gt;
&lt;p&gt;基中，高亮的是需要自己 review 的代码，灰色的是已经 review 过的。&lt;/p&gt;
&lt;p&gt;选择一个进入后，能看到已经所有的 review 信息。包括 CI 的结果，评论，所有的 PatchSet。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gertty Review Code" class="img-responsive" src="images/gertty_review_changeset.png"/&gt;&lt;/p&gt;
&lt;p&gt;再按 &lt;code&gt;d&lt;/code&gt;， 可以查看修改的 diff&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gerrty Code Diff" class="img-responsive" src="images/gertty_code_diff.png"/&gt;&lt;/p&gt;
&lt;p&gt;在任何界面都可以按 &lt;code&gt;F1&lt;/code&gt; 或 &lt;code&gt;?&lt;/code&gt; 打开帮助，查看该界面下有哪些按键可以用。&lt;/p&gt;
&lt;h1 id="_3"&gt;总结&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;由于 gertty 把所有数据都同步下来了，做 review 确实很快。&lt;/li&gt;
&lt;li&gt;gertty.yaml 配置文件里支持修改按键功能，如果觉得默认键位不舒服，可以进行修改，可定制性很高。更多的配置项信息可以看 &lt;code&gt;examples/reference-gertty.yml&lt;/code&gt; 文件里的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://github.com/openstack/gertty" target="_blank"&gt;https://github.com/openstack/gertty&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;&lt;a href="https://github.com/openstack/gertty/tree/master/examples" target="_blank"&gt;https://github.com/openstack/gertty/tree/master/examples&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 11 Apr 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2016-04-11:/effective-code-review-tool-gertty.html</guid><category>CodeReview</category></item><item><title>cloud-init 导致虚拟机启动太慢</title><link>http://xcodest.me/cloud-init-cause-vm-boot-slow.html</link><description>
&lt;h2 id="_1"&gt;问题&lt;/h2&gt;
&lt;p&gt;在一个准生产环境中，一直发现虚拟机启动太慢的问题，现像是虚拟机很早就能 ping 到，但是就是 ssh 不进去。要么报端口没有开启，要么就 Public Key 不对。整个过程大概要2分多钟才能直接 ssh 进去。&lt;/p&gt;
&lt;h2 id="_2"&gt;背景知识&lt;/h2&gt;
&lt;p&gt;cloud-init 这个服务是从 AWS 学来的。它安装在虚拟机中，在启动虚拟机时，做一些初始化工作。如：硬盘分区自动扩展，SSH Public Key 注入，用户创建等。用户甚至可以注入一些 shell 脚本到虚拟机中运行。在自动化方便启了很大的作用。Heat 的实现就依赖于 cloud-init 服务。&lt;/p&gt;
&lt;p&gt;在 OpenStack 上，cloud-init 应该从 &lt;code&gt;http://169.254.169.254&lt;/code&gt; 去拿到所需要的信息。而这个服务是通过 iptables 转到了 neutron-metadata-agent 服务上&lt;/p&gt;
&lt;h2 id="_3"&gt;环境&lt;/h2&gt;
&lt;p&gt;使用 Kolla 安装的 OpenStack Mitaka 版本的多机环境，镜像使用的是 CentOS 7 和 Ubuntu 14.04, 均是从官方下载的。由于一些安全限制，虚拟机不能访问外网。&lt;/p&gt;
&lt;h2 id="_4"&gt;调试&lt;/h2&gt;
&lt;p&gt;测试虚拟机用的 CentOS 7 系统，&lt;/p&gt;
&lt;p&gt;首先看虚拟机的 console log, 发现如下信息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Starting kdump:[  OK  ]
Starting cloud-init: Cloud-init v. 0.7.5 running 'init' at Wed, 30 Mar 2016 14:58:36 +0000. Up 40.68 seconds.
...
Starting cloud-init: Cloud-init v. 0.7.5 running 'modules:config' at Wed, 30 Mar 2016 14:59:59 +0000. Up 124.27 seconds.
Starting cloud-init: Cloud-init v. 0.7.5 running 'modules:final' at Wed, 30 Mar 2016 15:00:01 +0000. Up 126.22 seconds.
...
Cloud-init v. 0.7.5 finished at Wed, 30 Mar 2016 15:00:01 +0000. Datasource DataSourceOpenStack [net,ver=2].  Up 126.41 seconds
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发现: cloud-init 服务从开始启动到最后完成，花了 80 多秒，大部分的时间都是花在了 init 环节上。按说是不应该的。&lt;/p&gt;
&lt;p&gt;一开始我怀疑是硬盘分区自动扩展慢导致的，但把自动扩展关掉了也还是一样，时间基本没有变化。肯定是其它问题。&lt;/p&gt;
&lt;p&gt;万事找日志，要找真正的原因，还是从日志找起。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;/var/log/&lt;/code&gt; 下找日志，只发现了少量日志。大概看了一个 cloud-init 的源代码，日志应该会有很多的才对。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;-rw-r--r--. 1 root root    0 Mar 30 14:58 cloud-init.log&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--. 1 root root 1.7K Mar 30 15:00 cloud-init-output.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;又尝试修改了 &lt;code&gt;cloud.cfg&lt;/code&gt; 的配置，把日志都都打印到特定文件，如下。但是结果还是一样，没有啥新日志信息。(其时后来才发现，这个配置默认就存在，在 &lt;code&gt;/etc/cloud/cloud.cfg.d/&lt;/code&gt; 下面)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;output&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;all&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tee&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;/var/log/cloud-init-output.log'&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;联想到 CentOS 7 用的 systemd 管理器，试图从 systemd 里找日志。先找到了所有的 cloud-init 相关的服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; systemctl list-units &lt;span class="p"&gt;|&lt;/span&gt; grep cloud
&lt;span class="go"&gt;cloud-config.service       Apply the settings specified in cloud-config&lt;/span&gt;
&lt;span class="go"&gt;cloud-final.service        Execute cloud user/final scripts&lt;/span&gt;
&lt;span class="go"&gt;cloud-init-local.service   Initial cloud-init job (pre-networking)&lt;/span&gt;
&lt;span class="go"&gt;cloud-init.service         Initial cloud-init job (metadata service crawler)&lt;/span&gt;
&lt;span class="go"&gt;cloud-config.target        Cloud-config availability&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，cloud-init 安装的服务还是有多个的。不同的服务的启动时间点和所做的事情是不一样的。使用 &lt;code&gt;journalctl&lt;/code&gt; 挨个排查后，找到以下日志：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; journalctl -u cloud-init
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;Apr 03 13:19:33 cloud-init[780]: [CLOUDINIT] __init__.py[DEBUG]: Merging using located merger&lt;/span&gt;
&lt;span class="go"&gt;Apr 03 13:21:13 cloud-init[780]: [CLOUDINIT] DataSourceGCE.py[DEBUG]: http://metadata.google.internal./computeMetadata/v1/ is not resolvable&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意前面的时间点，这两行日志间差了60多秒，而且后面是一个错误，明显是在等一个超时，时间是花在这的。至此原因找到了。&lt;/p&gt;
&lt;h2 id="_5"&gt;原因分析&lt;/h2&gt;
&lt;p&gt;cloud-init 是一个通用程序，能兼容多个云环境。他会从多个数据源里去读 Metadata 数据。其默认的顺序中，GoogleGCE 在 OpenStack 之前，而 GoogleGCE 的源里面，会访问一个 http://metadata.google.internal. 的网址，加上虚拟机不能访问外网，程序会卡在这里，直到超时。才会继续测试 OpenStack 的源是否可用。&lt;/p&gt;
&lt;h2 id="_6"&gt;解决方法&lt;/h2&gt;
&lt;p&gt;尽量不要直接使用官方的源，而是自己制作，尤其是 cloud-init 的配置项。要手动修改掉其默认的数据源，以避免以上情况的发生。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# /etc/cloud/cloud.cfg&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;datasource_list&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ConfigDrive'&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'OpenStack'&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Ec2'&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_7"&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cloud-init 的配置是通用配置，默认情况下适用于多种云环境。如 OpenStack， GoogleGCE 等&lt;/li&gt;
&lt;li&gt;日志很重要，很方便进行程序分析&lt;/li&gt;
&lt;li&gt;镜像还是要自己制作比较好，最好能利用工具做成自动化的。&lt;/li&gt;
&lt;li&gt;在使用 systemd 服务的系统里，有一部分日志会打到 systemd 里面。需要使用 &lt;code&gt;journalctl&lt;/code&gt; 来进行查看&lt;/li&gt;
&lt;li&gt;在第二天的一个培训环境中，我发现有同样的问题，就此看来，这个问题还是很常见并很容易触发。如果有条件，还是修复了得好，要不太影响用户体验了。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Sun, 10 Apr 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2016-04-10:/cloud-init-cause-vm-boot-slow.html</guid><category>OpenStack</category></item><item><title>OpenStack Kolla AIO Install</title><link>http://xcodest.me/kolla-aio-install.html</link><description>
&lt;p&gt;Kolla 依赖于以下几个主要组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ansible &amp;gt; 1.9.4, &amp;lt; 2.0&lt;/li&gt;
&lt;li&gt;Docker &amp;gt; 1.10.0&lt;/li&gt;
&lt;li&gt;docker-py &amp;gt; 1.7.0&lt;/li&gt;
&lt;li&gt;python jinja2 &amp;gt; 2.6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几点说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机器使用的是 kvm 虚拟机进行的测试。配置上使用 4G RAM, 2 CPU, 2 网卡的配置&lt;/li&gt;
&lt;li&gt;由于使用了 Docker，所以对于底层系统并还没什么要求，本文使用 CentOS 7 系统。&lt;/li&gt;
&lt;li&gt;Kolla master 分支上使用的是 RDO master 上的源，打包极不稳定，时常会有 Bug 出现。所以本文使用的是 CentOS + 源码的安装方式&lt;/li&gt;
&lt;li&gt;由于国内网络原因，一些国外的源(这些源还没有国内镜像)会相当慢，所以 build docker image 时会很慢，推荐使用 VPN&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_1"&gt;安装&lt;/h1&gt;
&lt;p&gt;安装好操作系统后，依次进行如下配置&lt;/p&gt;
&lt;h2 id="_2"&gt;源&lt;/h2&gt;
&lt;p&gt;加入 Docker 的源&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tee /etc/yum.repos.d/docker.repo &amp;lt;&amp;lt; 'EOF'
[dockerrepo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
EOF
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加入 EPEL 源&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install -y epel-release
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="kolla"&gt;安装 Kolla 所需依赖&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install -y ansible docker-engine git gcc python-setuptools
easy_install -U pip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker 现在使用了 shared mount 功能，默认没有打开，需要手动修改 Docker 启动文件 &lt;code&gt;/usr/lib/systemd/system/docker.service&lt;/code&gt; 的 MountFlags&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -i 's/MountFlags.*/MountFlags=shared/' /usr/lib/systemd/system/docker.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动 Docker 服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl daemon-reload
systemctl enable docker
systemctl start docker
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="kolla_1"&gt;下载 Kolla 代码并安装依赖&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/openstack/kolla.git
cd kolla
pip install -r requirements.txt -r test-requirements.txt tox
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="build-docker-image"&gt;Build Docker Image&lt;/h1&gt;
&lt;p&gt;以下如果没有特别说明，所有的操作都是在 Kolla 项目的目录里进行&lt;/p&gt;
&lt;p&gt;首先要先生成并修改配置文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tox -e genconfig
cp -rv etc/kolla /etc/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后修改 &lt;code&gt;/etc/kolla/kolla-build.conf&lt;/code&gt; 文件，它是用来控制 kolla build 过程的。修改后，其主要内容如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[DEFAULT]&lt;/span&gt;
&lt;span class="na"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;centos&lt;/span&gt;
&lt;span class="na"&gt;install_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;soruce&lt;/span&gt;
&lt;span class="na"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;lokolla&lt;/span&gt;
&lt;span class="na"&gt;push&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来就是进行漫长的 build, 这个过程主要依赖机器性能和网速。如果快的话，20多分钟就完成。如果有问题的话，会很久。不过依赖于 Docker Build 的 Cache 功能，就算重跑的话，之前已经 Build 好的也会很快完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./tool/build.py -p default
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数中的 &lt;code&gt;-p default&lt;/code&gt; 是指定了只 build 主要的 image, 包括: mariadb, rabbitmq, cinder, ceilometer, glance, heat, horizon, keystone, neutron, nova, swift等 . 这些可以只生成的 &lt;code&gt;kolla-build.conf&lt;/code&gt; 里找到。&lt;/p&gt;
&lt;p&gt;如果 Build 完成之后，使用 &lt;code&gt;docker images&lt;/code&gt; 能看到所有已经 build 好的镜像。&lt;/p&gt;
&lt;h1 id="deploy"&gt;Deploy&lt;/h1&gt;
&lt;p&gt;依然是先修改配置文件，与 Deploy 相关的主要是两个配置文件 &lt;code&gt;/etc/kolla/passwords.yml&lt;/code&gt; 和 &lt;code&gt;/etc/kolla/globals.yml&lt;/code&gt;。他们为 ansible 提供一些变量的设定。主要需要修改的是 &lt;code&gt;globals.yml&lt;/code&gt; 文件。修改后，其主要内容为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;config_strategy&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"COPY_ALWAYS"&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kolla_base_distro&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"centos"&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kolla_install_type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"source"&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kolla_internal_address&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"10.2.0.254"&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;network_interface&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"eth0"&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;neutron_external_interface&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"eth1"&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;openstack_logging_debug&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"true"&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;enable_cinder&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"no"&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;enable_heat&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"no"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;kolla 使用一个名为 &lt;code&gt;kolla-ansible&lt;/code&gt; 的封装脚本， 并提供以下几个命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./tools/kolla-ansible -h
Usage: ./tools/kolla-ansible COMMAND [options]

Options:
    --inventory, -i &amp;lt;inventory_path&amp;gt; Specify path to ansible inventory file
    --playbook, -p &amp;lt;playbook_path&amp;gt;   Specify path to ansible playbook file
    --keyfile, -k &amp;lt;key_file&amp;gt;         Specify path to ansible vault keyfile
    --help, -h                       Show this usage information
    --tags, -t &amp;lt;tags&amp;gt;                Only run plays and tasks tagged with these values

Commands:
    prechecks    Do pre-deployment checks for hosts
    deploy       Deploy and start all kolla containers
    post-deploy  Do post deploy on deploy node
    pull         Pull all images for containers (only pulls, no runnnig container changes)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以使用 &lt;code&gt;./tools/kolla-ansible prechecks&lt;/code&gt; 来检查一个机器是否满足安装条件。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;./tools/kolla-ansible deploy&lt;/code&gt; 来开始正式安装。安装会很快，我机器上，几分钟就安装完成了。&lt;/p&gt;
&lt;p&gt;最后，使用&lt;code&gt;./tools/kolla-ansible post-deploy&lt;/code&gt; 来生成 &lt;code&gt;/etc/kolla/admin-openrc.sh&lt;/code&gt; 文件用来加载认证变量。&lt;/p&gt;
&lt;h1 id="_3"&gt;查看安装后的状态&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;IMAGE                                                  COMMAND                 NAMES
lokolla/centos-source-keystone:2.0.0                   "kolla_start"           keystone
lokolla/centos-source-horizon:2.0.0                    "kolla_start"           horizon
lokolla/centos-source-neutron-metadata-agent:2.0.0     "kolla_start"           neutron_metadata_agent
lokolla/centos-source-neutron-l3-agent:2.0.0           "kolla_start"           neutron_l3_agent
lokolla/centos-source-neutron-dhcp-agent:2.0.0         "kolla_start"           neutron_dhcp_agent
lokolla/centos-source-neutron-openvswitch-agent:2.0.0  "kolla_start"           neutron_openvswitch_agent
lokolla/centos-source-neutron-server:2.0.0             "kolla_start"           neutron_server
lokolla/centos-source-openvswitch-vswitchd:2.0.0       "kolla_start"           openvswitch_vswitchd
lokolla/centos-source-openvswitch-db-server:2.0.0      "kolla_start"           openvswitch_db
lokolla/centos-source-nova-compute:2.0.0               "kolla_start"           nova_compute
lokolla/centos-source-nova-libvirt:2.0.0               "kolla_start"           nova_libvirt
lokolla/centos-source-nova-conductor:2.0.0             "kolla_start"           nova_conductor
lokolla/centos-source-nova-scheduler:2.0.0             "kolla_start"           nova_scheduler
lokolla/centos-source-nova-novncproxy:2.0.0            "kolla_start"           nova_novncproxy
lokolla/centos-source-nova-consoleauth:2.0.0           "kolla_start"           nova_consoleauth
lokolla/centos-source-nova-api:2.0.0                   "kolla_start"           nova_api
lokolla/centos-source-glance-api:2.0.0                 "kolla_start"           glance_api
lokolla/centos-source-glance-registry:2.0.0            "kolla_start"           glance_registry
lokolla/centos-source-rabbitmq:2.0.0                   "kolla_start"           rabbitmq
lokolla/centos-source-mariadb:2.0.0                    "kolla_start"           mariadb
lokolla/centos-source-memcached:2.0.0                  "kolla_start"           memcached
lokolla/centos-source-keepalived:2.0.0                 "kolla_start"           keepalived
lokolla/centos-source-haproxy:2.0.0                    "kolla_start"           haproxy
lokolla/centos-source-kolla-toolbox:2.0.0              "/bin/sleep infinity"   kolla_toolbox
lokolla/centos-source-heka:2.0.0                       "kolla_start"           heka
lokolla/centos-source-rsyslog:2.0.0                    "kolla_start"           rsyslog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了显示好看，我去掉了一些无关的列。通过上面，可以看出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多数 container 里是由 kolla_start 这个脚本启动起来的&lt;/li&gt;
&lt;li&gt;由于 kolla 使用的是 &lt;code&gt;--net=host&lt;/code&gt; 网络，所以没有必要做端口映射&lt;/li&gt;
&lt;li&gt;每个模块拆分成了多个container, 如 nova 被拆分成了nova_api, nova_libvirt, nova_conductor, nova_novncproxy, nova_compute等多个 container。很好的遵守了一个容器一个进程的原则。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Wed, 24 Feb 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2016-02-24:/kolla-aio-install.html</guid><category>Kolla</category><category>OpenStack</category></item><item><title>Kolla Mitaka Midcycle Discuss</title><link>http://xcodest.me/kolla-mitaka-midcycle-discuss.html</link><description>
&lt;p&gt;2016年2月9日-10日，Kolla Team 举办了 Mitaka 的中期会议，对遇到的问题、解决的方法及接下来的工作内容做了深入讨论。&lt;/p&gt;
&lt;h1 id="_1"&gt;讨论的优先级安排&lt;/h1&gt;
&lt;p&gt;首先对本次讨论进行了优先级安排&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upgrades： 这是现在的重中之重。如何能对现有的Kolla进行平滑的升级。包括 OpenStack 组件和基础服务组件(如 MariaDB 等)。&lt;/li&gt;
&lt;li&gt;diagnostics/logging: 主要是指 ELK。&lt;/li&gt;
&lt;li&gt;stability of deployment&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;backwards compatibility&lt;/li&gt;
&lt;li&gt;selinux&lt;/li&gt;
&lt;li&gt;kolla-ansible split&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upgrade"&gt;Upgrade&lt;/h1&gt;
&lt;p&gt;升级主要涉及到两部分。相关的BP在这里&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是OpenStack的各个组件&lt;/li&gt;
&lt;li&gt;是一些基础服务组件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="openstack"&gt;OpenStack 组件&lt;/h2&gt;
&lt;p&gt;由于 OpenStack 各个组件的结构基本相同，都是有DB, API, Scheduler等几个部分构成。所以这里的升级要简单一些，而且已经基本完成了编码工作，不过需要大量的测试来保证升级的可靠性&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2 id="_2"&gt;基础服务组件&lt;/h2&gt;
&lt;p&gt;由于各个组件的升级方式并不同，同一个组件不同版本间，可能也不相同。所以这部分相比较来说要困难的多。讨论中对各个组件进行了逐一讨论。包括升级的方式，有可能造成的影响等。详细信息见&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h1 id="diagnosticslogging"&gt;Diagnostics/Logging&lt;/h1&gt;
&lt;h1 id="security"&gt;Security&lt;/h1&gt;
&lt;p&gt;安全也是很重要的事情，Team 两次讨论了这个问题&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref-8"&gt;&lt;a class="footnote-ref" href="#fn-8"&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;在各个模块之前开启 SSL 功能&lt;sup id="fnref2-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;。当然默认是通过配置开启的。这样使 OpenStack 运行在一个更加安全的环境中。这个功能期望是在 Mitaka-3 中完成。&lt;/p&gt;
&lt;p&gt;容器中的安全&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用非 root 用户运行服务&lt;/li&gt;
&lt;li&gt;Container 内，配置文件是否能被修改&lt;/li&gt;
&lt;li&gt;rootwrap 不应该能修改&lt;/li&gt;
&lt;li&gt;开启 SELinux &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="backport"&gt;Backport&lt;/h1&gt;
&lt;p&gt;Liberty 是 Kolla Release 的第一个版本。而在现在的 Master 分支中，已经有了大量的新功能。Team 讨论了 Backport 的原因和意义&lt;sup id="fnref-6"&gt;&lt;a class="footnote-ref" href="#fn-6"&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;最主要的原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ansible 的 docker 模块有bug, 导致 ansible 与 1.8.2 以上的 docker 版本不兼容&lt;/li&gt;
&lt;li&gt;docker 1.9 后的named volume 功能很好的解决了&lt;ol&gt;
&lt;li&gt;可能出现在数据丢失。在使用 data container 时，如果 Base Image 发生改变，data container 也会被重新创建，从而造成数据丢失。&lt;/li&gt;
&lt;li&gt;可能造成短时间的网络不可用。原因也是 data container 里面创建的 namespace 会被删除。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方法有四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接把 stable/liberty 分支移动到 master 的位置。但是个人感觉不靠谱。&lt;/li&gt;
&lt;li&gt;把所有的 commmit squash 后提交到 stable/liberty 分支上&lt;/li&gt;
&lt;li&gt;stable/liberty 和 master 做一次 merge。&lt;/li&gt;
&lt;li&gt;只 backport kolla_docker module&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在看来，应该会采取方法 4。&lt;/p&gt;
&lt;h1 id="kolla-code-sharing"&gt;kolla code sharing&lt;/h1&gt;
&lt;p&gt;现在 Kolla 相关的项目有两个 https://github.com/openstack/kolla 和 https://github.com/openstack/kolla-mesos 。将来还会分拆出一个 kolla-ansible 项目来。现在， 单这两个项目下就有很多的重复代码，导致做了许多 copy, paster 的工作。这个 topic&lt;sup id="fnref-9"&gt;&lt;a class="footnote-ref" href="#fn-9"&gt;9&lt;/a&gt;&lt;/sup&gt; 就是来解决这个问题的。&lt;/p&gt;
&lt;p&gt;重复的东西&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extend_start.sh 在两个仓库中有很多重复的&lt;/li&gt;
&lt;li&gt;kolla_docker 等 ansible 模块&lt;/li&gt;
&lt;li&gt;很多 config 里面的定义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能的解决方法包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定期的把 &lt;code&gt;&amp;lt;kolla&amp;gt;/ansible&lt;/code&gt; 下的模板复制到 kolla-mesos 中&lt;/li&gt;
&lt;li&gt;两连都存在副本，定期进行双向的同步。&lt;/li&gt;
&lt;li&gt;创新一个新的仓库包含一些共用的模板&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="roadmap"&gt;Roadmap&lt;/h1&gt;
&lt;p&gt;Mitaka, Netron, Ocata， P版本的功路线图&lt;sup id="fnref-7"&gt;&lt;a class="footnote-ref" href="#fn-7"&gt;7&lt;/a&gt;&lt;/sup&gt;。你更期待什么功能呢?&lt;/p&gt;
&lt;h2 id="mitaka-3-roadmap"&gt;Mitaka-3 Roadmap&lt;/h2&gt;
&lt;p&gt;Mitaka 进入最后的阶段，还有一些重要功能在开发中，现在主要还有以下几点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;diagnostics&lt;/li&gt;
&lt;li&gt;reconfigure services on a redeploy&lt;/li&gt;
&lt;li&gt;infrastructure services upgrades such as mariadb&lt;/li&gt;
&lt;li&gt;migration path for data volumes&lt;/li&gt;
&lt;li&gt;functional tests in gate (boot a vm &amp;amp; ping test)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="newton-roadmap"&gt;Newton Roadmap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;voting gates&lt;/li&gt;
&lt;li&gt;jumbo frames MTU investigation&lt;/li&gt;
&lt;li&gt;kolla as replacement of devstack (bindmount sources etc)&lt;/li&gt;
&lt;li&gt;code dedupe between mesos/ansible (general templates)&lt;/li&gt;
&lt;li&gt;ansible 2.0+&lt;/li&gt;
&lt;li&gt;conditionalize docs&lt;/li&gt;
&lt;li&gt;selinux&lt;/li&gt;
&lt;li&gt;more functional tests in gates (mitaka will have boot an vm)&lt;/li&gt;
&lt;li&gt;documentation specifically operator guides&lt;/li&gt;
&lt;li&gt;network isolation documentation&lt;/li&gt;
&lt;li&gt;multinode gates&lt;/li&gt;
&lt;li&gt;mechanism to build/push stable images to dockerhub&lt;ul&gt;
&lt;li&gt;push per tag&lt;/li&gt;
&lt;li&gt;nightly push&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kolla-ansible split right at start of newton split the repos&lt;/li&gt;
&lt;li&gt;hot-reload of running config for openstack service&lt;/li&gt;
&lt;li&gt;Python API with no running services for managing Kolla&lt;/li&gt;
&lt;li&gt;BiFrost documentation and investigation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ocata-roadmap"&gt;Ocata Roadmap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;deploy full big tent (or develop plugin mechanism to deploy whatever) / maybe we could do a skeleton service&lt;/li&gt;
&lt;li&gt;kolla-saltstack, kolla-puppet investigation - may not even be needed when moving to Ansible 2.0&lt;/li&gt;
&lt;li&gt;horizon, neutron, and nova plugin support - this exists already? would like to do in Newton but not have bandwidth&lt;/li&gt;
&lt;li&gt;Monitoring&lt;/li&gt;
&lt;li&gt;Backup and Restore of OpenStack data&lt;/li&gt;
&lt;li&gt;Data caching (e.g. redis)&lt;/li&gt;
&lt;li&gt;kolla-kubernetes&lt;/li&gt;
&lt;li&gt;runc investigation&lt;/li&gt;
&lt;li&gt;rkt investigation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="p-roadmap"&gt;P Roadmap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;rollback support from upgrade&lt;/li&gt;
&lt;li&gt;canary deployment&lt;/li&gt;
&lt;li&gt;make Kolla operate optionally without net=host for upcoming kolla-mesos and kolla-kubernetes repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-priorities" target="_blank"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-priorities&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-upgrades" target="_blank"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-upgrades&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;&lt;a href="https://blueprints.launchpad.net/kolla?searchtext=upgrade" target="_blank"&gt;https://blueprints.launchpad.net/kolla?searchtext=upgrade&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-infrastructure-upgrades" target="_blank"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-infrastructure-upgrades&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-ssl" target="_blank"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-ssl&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2-5" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-backport" target="_blank"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-backport&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 6 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-7"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-roadmap" target="_blank"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-roadmap&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-7" title="Jump back to footnote 7 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-8"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-security" target="_blank"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-security&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-8" title="Jump back to footnote 8 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-9"&gt;
&lt;p&gt;&lt;a href="https://etherpad.openstack.org/p/kolla-mitaka-midcycle-kolla-code-sharing" target="_blank"&gt;https://etherpad.openstack.org/p/kolla-mitaka-midcycle-kolla-code-sharing&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-9" title="Jump back to footnote 9 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Tue, 16 Feb 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2016-02-16:/kolla-mitaka-midcycle-discuss.html</guid><category>Kolla</category></item><item><title>iptables forward the vrrp packets issue</title><link>http://xcodest.me/iptables-forward-the-vrrp-packets-issue.html</link><description>&lt;p&gt;&lt;img alt="功夫熊猫" src="images/kungfupanda.jpg"&gt;&lt;/p&gt;
&lt;p&gt;最近在整 Kolla 的多机部署，没有物理环境还是在虚拟机上搞。不过今天被一个 keepalived 的问题卡了将近一天的时间。倒也不是啥大问题，还是栽到了自己挖的坑里。&lt;/p&gt;
&lt;h2 id="_1"&gt;问题&lt;/h2&gt;
&lt;p&gt;先说一下自己的环境，我使用了三台 kvm 虚拟机，每台两张网卡，一个用于上外网(eth0 &lt;code&gt;10.2.0.0/24&lt;/code&gt;)，一个用于 neutron 的 tenant 网络使用(eth1)。问题就出在 eth0 上面。eth0 是桥在了我手动创建的一个桥上 (br0), 为了上外网，我打开了 &lt;code&gt;ip_forward&lt;/code&gt;， 并加了一条 iptables 转发规则：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;iptables -t nat -A POSTROUTING -s 10.2.0.0/24 ! -d 10.2.0.0/24 -j MASQUERAE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一般情况下是没有问题的，但是加了 &lt;code&gt;keepalived&lt;/code&gt; 就完了。vip 跑到了所有的机器上，感觉就是没有通讯上，或是选举有问题。重新核对了半天配置没有发现问题。由于 Kolla 里是用 docker 跑的 keepalived ，为了排除是 Docker 本身有问题，我还在虚拟机的系统上部署了 keepalived 的，还是同样的问题。&lt;/p&gt;
&lt;h2 id="_2"&gt;原因&lt;/h2&gt;
&lt;p&gt;最后在一次偶然的抓包中发现，所有机器上抓到的 vrrp 的包源地址居然都是网关(&lt;code&gt;10.2.0.1&lt;/code&gt;)发出来的，这还能不出问题? &lt;/p&gt;
&lt;p&gt;查了查 vrrp 包，原来是在四层协议上，和 tcp/udp 是并列的。再看一眼自己的 iptables ， 就知道是怎么回事了。后来把 iptables 改的明确了一些, 只 SNAT tcp,udp及icmp的协议，问题终于解决了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-A POSTROUTING -s 10.2.0.0/24 ! -d 10.2.0.0/24 -p tcp -j MASQUERADE
-A POSTROUTING -s 10.2.0.0/24 ! -d 10.2.0.0/24 -p udp -j MASQUERADE
-A POSTROUTING -s 10.2.0.0/24 ! -d 10.2.0.0/24 -p icmp -j MASQUERADE
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;教训&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;tcpdump 还是很有用的东西&lt;/li&gt;
&lt;li&gt;四层上的协议除了 tcp/udp 还是有很多的 &lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ref"&gt;REF&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers" target="_blank"&gt;https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2016-02-02:/iptables-forward-the-vrrp-packets-issue.html</guid><category>iptables</category><category>vrrp</category></item><item><title>OpenStack Kolla 项目介绍</title><link>http://xcodest.me/kolla-introduce.html</link><description>
&lt;h1 id="_1"&gt;项目目标&lt;/h1&gt;
&lt;p&gt;Kolla 提供了生产级别的 OpenStack Service Containers。基于社区的最佳实践，提供了&lt;br/&gt;
更好，更快，更可靠的, 操作 OpenStack 的部署工具。&lt;/p&gt;
&lt;h1 id="_2"&gt;解决的问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;平滑的升级/回滚 OpenStack&lt;/li&gt;
&lt;li&gt;隔离 OpenStack 的不同组件的依赖环境。尤其是那些使用同一模块不同版本的情况。&lt;/li&gt;
&lt;li&gt;保证环境的一致性。解决由于安装时间不同，造成的包版本不一致的情况。&lt;/li&gt;
&lt;li&gt;支持多种安装源：源代码安装，CentOS binary 安装等。可以替代掉 devstack。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实这些问题只要是由 Docker 来解决的。这也是 Kolla 使用 Docker 的原因。&lt;/p&gt;
&lt;h1 id="_3"&gt;架构&lt;/h1&gt;
&lt;p&gt;kolla 代码在&lt;a href="https://github.com/openstack/kolla" target="_blank"&gt;https://github.com/openstack/kolla&lt;/a&gt;。现在 Kolla 主要分成两个部分。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Docker Images Build &lt;/li&gt;
&lt;li&gt;Ansible 部署(这部分将来会迁移到 kolla-ansible 项目)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="docker-image-build"&gt;Docker Image Build&lt;/h2&gt;
&lt;p&gt;主要使用 Jinja2 模板生成 Dockerfile 文件。如果是源代码安装，还会把代码下载好。之后会通过 Docker-py 驱动 Docker 进行镜像构建。构建完成，还可以根据配置将镜像推送的指定的 Registry 服务器。&lt;/p&gt;
&lt;p&gt;现在支持的不同的 Linux 发行版本(Redhat系和Debian系)和不同的OpenStack安装包(源代码和二进制包)&lt;/p&gt;
&lt;p&gt;下图是现在所有镜像的依赖关系。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kolla Image Dependency Tree" class="img-responsive" src="images/kolla/image-dependency-201512.png"/&gt;&lt;/p&gt;
&lt;h2 id="ansible"&gt;Ansible 部署&lt;/h2&gt;
&lt;p&gt;提供一个完整的 Ansible Playbook，来部署Docker的镜像。并提供 all-in-one 和&lt;br/&gt;
multihost 的环境&lt;/p&gt;
&lt;h1 id="_4"&gt;开发人员情况&lt;/h1&gt;
&lt;p&gt;以下是 Kolla 项目截至到 2016-01-20 日的 review, commit 情况&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kolla Review 20160120" class="img-responsive" src="images/kolla/kolla_review_stackalytics_20160120.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kolla Commit 20160120" class="img-responsive" src="images/kolla/kolla_commit_stackalytics_20160120.png"/&gt;&lt;/p&gt;
&lt;p&gt;可以看出，主流的几大 OpenStack 厂商均贡献的大部分的代码。包括 Mirantis, RedHat, Oracle, Intel, 99Cloud, Cisco, Rakespace。&lt;/p&gt;
&lt;h1 id="_5"&gt;近况&lt;/h1&gt;
&lt;h2 id="201512"&gt;201512&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;废弃使用 Ansible 自带的 Docker module。使用自己实现的 docker 模块&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;, 并已经完成了所有 ansible roles 的改造。主要原因是：&lt;ol&gt;
&lt;li&gt;官方 Docker module 有bug&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;, 在docker 1.8.3 及以上的版本工作不正常, 而且进展缓慢。而 Kolla 使用的 Docker 版本只能锁定在 1.8.2，不能进行升级。&lt;/li&gt;
&lt;li&gt;Ansible 使用的是 GPL，而 OpenStack 项目使用的 Apache License。不能直接修改Ansible 的代码放到 Kolla 里使用。&lt;/li&gt;
&lt;li&gt;不想受限制于官方功能开发。有些想用的功能(比方说新加进去的&lt;code&gt;common_option&lt;/code&gt;, 官方是不会增加的)。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;使用 oslo.config 模块替代掉了原来的 argparser 代码&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;。并加上了使用 &lt;code&gt;oslo-config-generator&lt;/code&gt; 的功能自动生成配置文件。&lt;/li&gt;
&lt;li&gt;完善 Ubuntu Binary Container 的安装&lt;sup id="fnref-6"&gt;&lt;a class="footnote-ref" href="#fn-6"&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref-7"&gt;&lt;a class="footnote-ref" href="#fn-7"&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;ul&gt;
&lt;li&gt;由于 Ubuntu 并没有类似 RDO 的 relorean 源。倒是有一个 Mitaka Staging&lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;源，但是好久没有更新。所以社区之前一直没有加上这部分功能。现在虽然加上了，但是也是基于 Liberty 版本的。并不是 Master 上的代码。&lt;/li&gt;
&lt;li&gt;另一方面，Ubuntu 方面也正在积极的解决这个问题&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;。相信不久就会有。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;升级的 playbook 基本完成来&lt;sup id="fnref-8"&gt;&lt;a class="footnote-ref" href="#fn-8"&gt;8&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_6"&gt;使用到的技术&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Docker/LXC&lt;/li&gt;
&lt;li&gt;Ansible&lt;/li&gt;
&lt;li&gt;Python &lt;ul&gt;
&lt;li&gt;docker-py&lt;/li&gt;
&lt;li&gt;Jinja2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_7"&gt;近期规划&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;拆分 ansible 部分到新的项目 kolla-ansible。kolla 项目只用来做 docker images build. 部署工作由 kolla-ansible, kolla-mesos&lt;sup id="fnref-9"&gt;&lt;a class="footnote-ref" href="#fn-9"&gt;9&lt;/a&gt;&lt;/sup&gt;等工具来实现。&lt;/li&gt;
&lt;li&gt;如何进行平滑的 OpenStack 升级&lt;/li&gt;
&lt;li&gt;ELK的集成&lt;/li&gt;
&lt;li&gt;Swift 自动化&lt;/li&gt;
&lt;li&gt;Ceilometer Container&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.openstack.org/wiki/Kolla" target="_blank"&gt;Kolla Wiki Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://review.openstack.org/#/c/248812/" target="_blank"&gt;Add docker module in Kolla&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;&lt;a href="https://github.com/ansible/ansible-modules-core/issues/2257" target="_blank"&gt;Docker 1.8.3 is broken under certain conditions&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;&lt;a href="https://review.openstack.org/#/c/260389/" target="_blank"&gt;use oslo.config instead of raw argparse.ArgumentParser&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;&lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2015-December/083089.html" target="_blank"&gt;Mail List: Adding Ubuntu Liberty to Kolla-Mitaka&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-4" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;&lt;a href="https://launchpad.net/~ubuntu-cloud-archive/+archive/ubuntu/mitaka-staging" target="_blank"&gt;Staging PPA for mitaka&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-5" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-6"&gt;
&lt;p&gt;&lt;a href="https://review.openstack.org/#/c/261957/" target="_blank"&gt;Gerrit: Base and openstack-base ubuntu binary containers&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-6" title="Jump back to footnote 6 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-7"&gt;
&lt;p&gt;&lt;a href="https://blueprints.launchpad.net/kolla/+spec/binary-ubuntu" target="_blank"&gt;BP:Ubuntu binary containers&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-7" title="Jump back to footnote 7 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-8"&gt;
&lt;p&gt;&lt;a href="https://review.openstack.org/#/c/257568/" target="_blank"&gt;Gerrit: Playbook for keystone upgrade&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-8" title="Jump back to footnote 8 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-9"&gt;
&lt;p&gt;&lt;a href="https://github.com/openstack/kolla-mesos" target="_blank"&gt;kolla-mesos&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref-9" title="Jump back to footnote 9 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 11 Jan 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2016-01-11:/kolla-introduce.html</guid><category>Kolla</category><category>OpenStack</category></item><item><title>Get all the repo from OpenStack</title><link>http://xcodest.me/get-all-repos-from-openstack.html</link><description>&lt;p&gt;OpenStack的源因为你我都知道的原因，一直不稳定，导致 devstack 时经常失败。特定写了个脚本，可以拿到所有的仓库地址，方便做本地的mirror。&lt;/p&gt;
&lt;p&gt;脚本在 gist&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt; 上。&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install PyGithub
python openstack_repo.py -u &amp;lt;github_username&amp;gt; -p &amp;lt;github_password&amp;gt; \
    -o repos.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;跑一次才发现，OpenStack 组下已经有了600多个项目。好多啊。&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/b6c36b9f74b743eb4c82.js?file=openstack_repos.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding:utf-8 -*-
import github
import argparse
import codecs
import logging


DESCRIPTION=u'''

获取 openstack 和 openstack-dev 下所有仓库的列表，输出格式为：

    组织名 仓库名 仓库地址

username 和 password 不是必须的。但是不填写时，会受到 Github Rate Limit[0].
有认证的访问限制是每小时5000次。没有认证的访问限制是每小时60次。

[0] https://developer.github.com/v3/#rate-limiting
'''

def main():
    parser = argparse.ArgumentParser(
        description=DESCRIPTION,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('-u', '--username',
                        help='Usename to connect github')
    parser.add_argument('-p', '--password',
                        help='Password to connect github')
    parser.add_argument('-o', '--output',
                        help='Outout file. Default is stdout')
    parser.add_argument('-O', '--organization',
                        default='openstack,openstack-dev',
                        help='Organization to crawl repos from github')
    parser.add_argument('-d', '--debug',
                        action='store_true',
                        help='Show debug message')
    parser.add_argument('-v', '--verbose',
                        action='store_true',
                        help='Show verbse message')

    conf = parser.parse_args()
    log_level = logging.WARNING
    if conf.verbose:
        log_level = logging.INFO
    if conf.debug:
        log_level = logging.DEBUG

    logging.basicConfig(level=log_level)
    log = logging.getLogger()
    
    gh = github.Github(conf.username, conf.password)

    repos = []
    for org in conf.organization.strip().split(','):
        organization = gh.get_organization(org)
        for repo in organization.get_repos():
            log.info('Get: %s %s %s', org, repo.name, repo.clone_url)
            repos.append((organization, repo))

    if conf.output:
        with codecs.open(conf.output, 'w', 'utf8') as output:
            for org, repo in repos:
                output.write('{} {} {}\n'.format(org.login,
                                               repo.name,
                                               repo.clone_url))
    else:
        for org, repo in repos:
            print('{} {} {}'.format(org.login,
                                    repo.name,
                                    repo.clone_url))

if __name__ == "__main__":
    main()&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;https://gist.github.com/jeffrey4l/b6c36b9f74b743eb4c82&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Wed, 06 Jan 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2016-01-06:/get-all-repos-from-openstack.html</guid><category>OpenStach Python</category></item><item><title>Ansible Tower Usage</title><link>http://xcodest.me/ansible-tower-usage.html</link><description>
&lt;p&gt;安装好后的 Tower 如下图(图1)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible Tower" class="img-responsive" src="images/ansible/tower_preview.png"/&gt;&lt;/p&gt;
&lt;div class="text-center"&gt;
&lt;p&gt;&lt;strong&gt;图1&lt;/strong&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;从上面看，主要有 Projects, Inventories, Job Templates, Jobs 几个功能点。&lt;br/&gt;
还有一个主要的是后面的 Setup。我们一个一个来介绍下都是做什么用的。并建立起一个简单的例子&lt;/p&gt;
&lt;h1 id="projects"&gt;Projects&lt;/h1&gt;
&lt;p&gt;Projects 里的主要内容是一个 Playbook 的代码地址，可选项为Manual(手动指定位置)，Git, Mercutail, Subversion。&lt;/p&gt;
&lt;p&gt;我在Github上建立了一个简单的 PlayBook。我们来创建一个新的 Project。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;project_demo&lt;/span&gt;
&lt;span class="n"&gt;Organization&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;
&lt;span class="n"&gt;SCM&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt;
&lt;span class="n"&gt;SCM&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/jeffrey4l/&lt;/span&gt;&lt;span class="n"&gt;tower_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;git&lt;/span&gt;
&lt;span class="n"&gt;SCM&lt;/span&gt; &lt;span class="n"&gt;Branch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存就可以创建好一个Project. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Tower Project List" class="img-responsive" src="images/ansible/tower_project_list.png"/&gt;&lt;br/&gt;
&lt;div class="text-center" markdown="1"&gt; &lt;strong&gt;图2&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;在(图2)中，可以看到刚刚创建的 Project (project_demo)。后面是有4个操作按钮，分别是更新代码，定时更新，修改和删除。&lt;/p&gt;
&lt;p&gt;基中更新代码的其实就是启了一个ansible playbook去update你在创建Project时填入的项目地址。&lt;/p&gt;
&lt;h1 id="inventories"&gt;Inventories&lt;/h1&gt;
&lt;p&gt;这里的 Inventories 和在 Ansible里的概念是一样的。在这可以创建一个若干 Inventories。每个里面可以像在 Ansible 里一样，创建机器和群组。&lt;/p&gt;
&lt;p&gt;我们来创建一个 localhost 的机器。点击 + 号，在弹出的对话框里输入 localhost 就可以了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tower add host" class="img-responsive" src="images/ansible/tower_add_host.png"/&gt;&lt;br/&gt;
&lt;div class="text-center" markdown="1"&gt; &lt;strong&gt;图3&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;在里面，还可以增加 Host 对应的变量。Group 里还可以嵌套 Group, 这和Ansible是一样的。&lt;/p&gt;
&lt;h1 id="job-templates"&gt;Job Templates&lt;/h1&gt;
&lt;p&gt;这里是来定义 Job 的模板。定义好后，就可以手动或自动的跑 Job 了。这之前，我们还可创建一个认证信息，用来登录机器用。&lt;/p&gt;
&lt;p&gt;在 setup -&amp;gt; Credentials 里可以看到所有的认证信息。我们来创建一个基于 SSH Key的认证，用来登录 localhost, 跑我们的 project demo 项目。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;owns&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;creidential&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Machine&lt;/span&gt;
&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;span class="n"&gt;Private&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keygen&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并把上面的 Key 配置的本机上。&lt;/p&gt;
&lt;p&gt;接下来，创建我们的 Job Template&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tower add job template" class="img-responsive" src="images/ansible/tower_add_job_template.png"/&gt;&lt;br/&gt;
&lt;div class="text-center" markdown="1"&gt; &lt;strong&gt;图4&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
&lt;h1 id="job"&gt;Job&lt;/h1&gt;
&lt;p&gt;创建好模板后，直接在 template 界面里点 start 就可以运行了。点击后，会跳转到 Job 运行界面。稍等一会，就可以看到运行结果了。&lt;/p&gt;
&lt;h1 id="portal"&gt;Portal&lt;/h1&gt;
&lt;p&gt;Tower 还有一个 Portal 模式。很方便非开发运维人员使用。左面是Job Template, 点击直接运行, 右面是运行结果。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tower Portal Mode" class="img-responsive" src="images/ansible/tower_portal.png"/&gt;&lt;br/&gt;
&lt;div class="text-center" markdown="1"&gt; &lt;strong&gt;图5&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Sat, 02 Jan 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2016-01-02:/ansible-tower-usage.html</guid><category>Ansible Tower</category></item><item><title>Install Ansible Tower</title><link>http://xcodest.me/install-ansible-tower.html</link><description>
&lt;h1 id="_1"&gt;手动安装&lt;/h1&gt;
&lt;h2 id="_2"&gt;下载安装包&lt;/h2&gt;
&lt;p&gt;从 http://www.ansible.com/tower-trial 下载，需要填个人信息，提交后会自动下载。&lt;/p&gt;
&lt;p&gt;把安装包复制到要安装的机器中去，解压准备安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar xvf ansible-tower-setup-latest.tar.gz
cd ansible-tower-setup-2.4.3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个安装包本质上是一个playbook。其中&lt;code&gt;configure&lt;/code&gt;是用来生成配置文件的脚本，运行它会有几个问题，让你回答，回答完后就开始自动安装了。也可把这些问答写到一个文件中，让其自动化。建立名为&lt;code&gt;tower_setup_conf.yml&lt;/code&gt; 的文件，其内容为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;admin_password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;database&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;internal&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;munin_password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pg_password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;primary_machine&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;redis_password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;开始进行设置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./configure --options-file tower_setup_conf.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没有问题，脚本会提示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The configuration provided in tower_setup_conf.yml appears complete.

FINISHED!
You have completed the setup wizard. You may execute the installation of
Ansible Tower by issuing the following command:

sudo ./setup.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行安装脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ./setup.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其主要工作为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果没有安装ansible, 就安装上ansible&lt;/li&gt;
&lt;li&gt;使用ansible进行tower的安装&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装好后，终端会提示给你访问的地址，用浏览器打开就可以了。输入上面设置的admin账号密码登录。&lt;/p&gt;
&lt;p&gt;之后会出现设置 Tower License 的界面。可以从 http://www.ansible.com/license 申请到一个10个节点的免费 license。最后把 License 复制进去提交就可以了。&lt;/p&gt;
&lt;h1 id="vagrant"&gt;使用 Vagrant 进行安装&lt;/h1&gt;
&lt;p&gt;官方提供 Vagrant Images, 方便进行安装测试。使用方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant init tower http://vms.ansible.com/ansible-tower-2.4.3-virtualbox.box
vagrant up
vagrant ssh
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;http://docs.ansible.com/ansible-tower/latest/html/installandreference/tower_installer.html&lt;/li&gt;
&lt;li&gt;http://docs.ansible.com/ansible-tower/latest/html/installandreference/tower_install_wizard.html&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Thu, 31 Dec 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-12-31:/install-ansible-tower.html</guid><category>Ansible Tower</category></item><item><title>Ansible安装</title><link>http://xcodest.me/ansible-install.html</link><description>&lt;p&gt;由于 Ansible 是通过 SSH 进行通讯的，所以只用安装 master 端就可以了。并不像 puppet/SaltStack 那样在 slave/minion 端进行安装。&lt;/p&gt;
&lt;p&gt;由于是用 Python 编写的，安装起来和普通 Python 应用没有太大区别。可以通过源码，pypi, 操作系统的包管理进行安装。&lt;/p&gt;
&lt;h1 id="_1"&gt;系统包管理&lt;/h1&gt;
&lt;h2 id="rpm"&gt;RPM 系&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# install epel source
yum install -y epel-release
yum install ansible
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="apt"&gt;Apt 系&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install -y software-properties-common
apt-add-repository -y ppa:ansible/ansible
apt-get update
apt-get install -y ansible
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="pypi"&gt;pypi安装&lt;/h1&gt;
&lt;p&gt;通过pypi相当简单，直接用pip就可安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install ansible
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_2"&gt;源码安装&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# download the source from github&lt;/span&gt;
&lt;span class="c1"&gt;# ansible has two git submodules, so the --recursive is required.&lt;/span&gt;
git clone git://github.com/ansible/ansible.git --recursive
&lt;span class="nb"&gt;cd&lt;/span&gt; ./ansible

&lt;span class="c1"&gt;# install&lt;/span&gt;
pip install .
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Wed, 30 Dec 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-12-30:/ansible-install.html</guid><category>Ansible</category></item><item><title>Deploy Docker Registry Service</title><link>http://xcodest.me/deploy-docker-registry-service.html</link><description>&lt;p&gt;使用 Docker 时，很多情况下需要搭建自己的 registry 服务。把一些私有的 Image 放到上面用。官方有一个 registry 的&lt;a href="https://hub.docker.com/_/registry/" target="_blank"&gt;镜像&lt;/a&gt;可以拉下来，直接用。如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -p 5000:5000 -v &amp;lt;HOST_DIR&amp;gt;:/tmp/registry-dev registry
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是默认没有加上 ssl(如果没有，只能给本机提供服务)， proxy也没有开启。&lt;/p&gt;
&lt;p&gt;我自己写了一个 docker compose, 默认开启了以上两个功能，代码见&lt;a href="https://github.com/jeffrey4l/docker-registry" target="_blank"&gt;这里&lt;/a&gt;。默认使用了 host 的 /data/docker-registry/data 目录做数据 volume, 所以请保证这个目录存在。&lt;/p&gt;
&lt;p&gt;使用自己建立的 registry 服务时，要修改 docker 的服务启动脚本，加上如下参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--insecure-registry your.domain.com:5000 --registry-mirror=https://your.domain.com:5000
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/jeffrey4l/docker-registry&lt;/li&gt;
&lt;li&gt;https://github.com/docker/distribution/blob/master/docs/mirror.md&lt;/li&gt;
&lt;li&gt;https://hub.docker.com/_/registry/&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Tue, 15 Dec 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-12-15:/deploy-docker-registry-service.html</guid><category>Docker</category></item><item><title>Python Exception init args</title><link>http://xcodest.me/python-exception-init-args.html</link><description>&lt;p&gt;&lt;img alt="Talk is cheep" class="img-responsive" src="/images/talk_is_cheap.jpg"&gt;&lt;/p&gt;
&lt;p&gt;一直没有搞明白 &lt;code&gt;Exception&lt;/code&gt; 的 args 和 message 参数, 最近看了一下 CPython 源码，&lt;br&gt;
终于搞明白了。&lt;/p&gt;
&lt;p&gt;一开始(从2.5开始)的时候是有 &lt;code&gt;args&lt;/code&gt; 和 &lt;code&gt;message&lt;/code&gt; 两个参数的。2.6版本之后，把&lt;br&gt;
&lt;code&gt;message&lt;/code&gt; 废弃掉了，只留下了一个任意长度的 &lt;code&gt;args&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以下是2.5以后的代码，可以看到，如果args 长度是1，就会把 &lt;code&gt;self.message = args[0]&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;BaseException_new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyTypeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyBaseExceptionObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyBaseExceptionObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tp_alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* the dict is created on the fly in PyObject_GenericSetAttr */&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyTuple_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyString_FromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;BaseException_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyBaseExceptionObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_PyArg_NoKeywords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Py_TYPE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tp_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyTuple_GET_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Py_CLEAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyTuple_GET_ITEM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本来 message 就是 Exception的一个属性，在2.6以后，把它变成了一个 descriptor, 当&lt;br&gt;
调用时，如果它在 &lt;code&gt;self.__dict__&lt;/code&gt; 里，就直接打印，否则就返回 &lt;code&gt;self.message&lt;/code&gt; 的信息&lt;br&gt;
并打印出一个 &lt;code&gt;Warning&lt;/code&gt;。如果已经赋过一个值的话&lt;code&gt;self.message = xxxx&lt;/code&gt;, 它就会存在&lt;br&gt;
&lt;code&gt;self.__dict__&lt;/code&gt;里。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;BaseException_get_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyBaseExceptionObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* if &amp;quot;message&amp;quot; is in self-&amp;gt;dict, accessing a user-set message attribute */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_GetItemString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyErr_SetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyExc_AttributeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;message attribute was deleted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/* accessing the deprecated &amp;quot;builtin&amp;quot; message attribute of Exception */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyErr_WarnEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyExc_DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s"&gt;&amp;quot;BaseException.message has been deprecated as &amp;quot;&lt;/span&gt;
                     &lt;span class="s"&gt;&amp;quot;of Python 2.6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;BaseException_set_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyBaseExceptionObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* if val is NULL, delete the message attribute */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;PyDict_GetItemString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyDict_DelItemString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;Py_XDECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/* else set it in __dict__, but may need to create the dict first */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_New&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyDict_SetItemString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 python3 中，message 相关的信息已经完全删除掉了。&lt;/p&gt;
&lt;p&gt;所以，一般使用 &lt;code&gt;message&lt;/code&gt; 属性的话，推荐这样使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;My2Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;this is a message&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Fri, 20 Nov 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-11-20:/python-exception-init-args.html</guid><category>Python</category></item><item><title>Interrupt the Python multiprocessing.Pool in graceful way</title><link>http://xcodest.me/interrupt-the-python-multiprocessing-pool-in-graceful-way.html</link><description>&lt;p&gt;When using &lt;code&gt;KeyboardInterrupt&lt;/code&gt;(&lt;code&gt;Ctrl+c&lt;/code&gt;) interrupt the excution of the &lt;code&gt;multiprocess.Pool&lt;/code&gt;, it will not work as expected. Following is a demo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When run the code and try to &lt;code&gt;Ctrl+C&lt;/code&gt; to stop it, it will never be stopped.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python2 b.py                                                                      
^CProcess PoolWorker-1:
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/multiprocessing/process.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;258&lt;/span&gt;, in _bootstrap
    self.run&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/multiprocessing/process.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;114&lt;/span&gt;, in run
    self._target&lt;span class="o"&gt;(&lt;/span&gt;*self._args, **self._kwargs&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/multiprocessing/pool.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;113&lt;/span&gt;, in worker
    &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;True, func&lt;span class="o"&gt;(&lt;/span&gt;*args, **kwds&lt;span class="o"&gt;))&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;b.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;7&lt;/span&gt;, in worker
    time.sleep&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
KeyboardInterrupt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The root cause is explained in &lt;a href="http://stackoverflow.com/a/1408476/893981" target="_blank"&gt;stackoverflow&lt;/a&gt;. And the bug is &lt;a href="http://bugs.python.org/issue8296" target="_blank"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
This is a Python bug. When waiting for a condition in threading.Condition.wait(), KeyboardInterrupt is never sent. Repro:

&lt;pre&gt;
import threading
cond = threading.Condition(threading.Lock())
cond.acquire()
cond.wait(None)
print "done"
&lt;/pre&gt;

The KeyboardInterrupt exception won't be delivered until wait() returns, and it never returns, so the interrupt never happens. KeyboardInterrupt should almost certainly interrupt a condition wait.

Note that this doesn't happen if a timeout is specified; cond.wait(1) will receive the interrupt immediately. So, a workaround is to specify a timeout. To do that, replace

&lt;pre&gt;
    results = pool.map(slowly_square, range(40))
&lt;/pre&gt;

with

&lt;pre&gt;
    results = pool.map_async(slowly_square, range(40)).get(9999999)
&lt;/pre&gt;

or similar.
&lt;/blockquote&gt;

&lt;p&gt;By using this, we can interrupt the Pool by using &lt;code&gt;Ctrl+c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is a better version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker_init&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# ignore the SIGINI in sub process, just print a log&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sig_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal_num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;signal: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;signal_num&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig_int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;worker_init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xfff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# catch TimeoutError and get again&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeoutError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;timeout&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bugs.python.org/issue8296" target="_blank"&gt;Python Bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/a/149756" target="_blank"&gt;How Ctrl+c works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/1408476/893981" target="_blank"&gt;Keyboard Interrupts with python's multiprocessing Pool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Tue, 17 Nov 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-11-17:/interrupt-the-python-multiprocessing-pool-in-graceful-way.html</guid><category>Python</category></item><item><title>Glance Create Image from Existent Image in Ceph</title><link>http://xcodest.me/glance-create-image-from-existent-image-in-ceph.html</link><description>&lt;p&gt;当使用 Ceph + Glance 时，镜像需要使用 RAW 格式，这会导致创建镜像时非常的慢。有的时候，也需要把 Ceph 中现有的镜像导入到 Glance 中。这时可以使用 --location 参数来指定镜像所在的远程位置。也就可以使用现有的 Ceph 镜像来快速创建。&lt;/p&gt;
&lt;p&gt;可以先用 rbd 上传镜像，转换格式(也会比较慢，还不如直接上传 RAW 格式的镜像)。然后再做好对应的 snap , 并加以保护。是后一步的location必须按格式写(见[0])，这样才会使用rbd的 COW clone 功能。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# image format 2 support layering&lt;/span&gt;
rbd --image-format &lt;span class="m"&gt;2&lt;/span&gt; import /tmp/ubuntu14.04.2.dsk &lt;span class="nv"&gt;$uuid&lt;/span&gt;

&lt;span class="c1"&gt;# Convert to raw image type&lt;/span&gt;
qemu-img convert -O raw rbd:&lt;span class="nv"&gt;$pool&lt;/span&gt;/&lt;span class="nv"&gt;$uuid&lt;/span&gt; rbd:&lt;span class="nv"&gt;$pool&lt;/span&gt;/&lt;span class="nv"&gt;$uuid&lt;/span&gt;

&lt;span class="c1"&gt;# Make Snapshot and protect it which is require by image clone in nova libvirt.&lt;/span&gt;
rbd --pool images snap create --snap snap &lt;span class="nv"&gt;$uuid&lt;/span&gt;
rbd --pool images snap protect --image &lt;span class="nv"&gt;$uuid&lt;/span&gt; --snap snap

&lt;span class="c1"&gt;# Create Image in Glance&lt;/span&gt;
glance image-create --id &lt;span class="nv"&gt;$uuid&lt;/span&gt; --name ubuntu14.04.2 --disk-format raw --container-format bare --is-public True --location rbd://&lt;span class="nv"&gt;$fsid&lt;/span&gt;/images/&lt;span class="nv"&gt;$uuid&lt;/span&gt;/snap
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[0] &lt;a href="https://github.com/openstack/nova/blob/4a02d9415f64e8d579d1b674d6d2efda902b01fa/nova/virt/libvirt/rbd_utils.py#L179" target="_blank"&gt;https://github.com/openstack/nova/blob/4a02d9415f64e8d579d1b674d6d2efda902b01fa/nova/virt/libvirt/rbd_utils.py#L179&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[1] &lt;a href="http://www.sebastien-han.fr/down/OpenStack%20_%20Ceph%20-%20Liberty.pdf" target="_blank"&gt;http://www.sebastien-han.fr/down/OpenStack%20_%20Ceph%20-%20Liberty.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href="http://www.sebastien-han.fr/blog/2013/05/07/use-existing-rbd-images-and-put-it-into-glance/" target="_blank"&gt;http://www.sebastien-han.fr/blog/2013/05/07/use-existing-rbd-images-and-put-it-into-glance/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Thu, 04 Jun 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-06-04:/glance-create-image-from-existent-image-in-ceph.html</guid></item><item><title>Python MetaClass Magic</title><link>http://xcodest.me/python-metaclass-magic.html</link><description>&lt;p&gt;在 Nova 代码中[&lt;a href="https://github.com/openstack/nova/blob/c13f693d496f4ea5dbc78244fefd9ec2d6ea8de5/nova/api/openstack/wsgi.py#L1075" target="_blank"&gt;0&lt;/a&gt;]发现一个神奇的应用，利用 decrator 来区分同名的函数，根据 decrator 上面定义的版本，来调用不同的方法。仔细学习了一下。它是用到了 MetaClass。主要思路是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 decrator 里面，把被装饰的方法存在类的一个属性里面(version_methods)&lt;/li&gt;
&lt;li&gt;使用自定义的metaclass, 删除掉父类上的version_methods，并把这个属性放到子类中。这样做是为了防止子类共享父类的version_methods属性。&lt;/li&gt;
&lt;li&gt;在子类里面，重写&lt;code&gt;__getattribute__&lt;/code&gt;方法，当所需要的属性存在于&lt;code&gt;version_methods&lt;/code&gt;时，根据特定的条件，返回期望的方法。如果没有，就调用父类的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是示例代码&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/0b974aaea1be25cde67d.js?file=version_method.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;VERION_METHODS='version_methods'

class VersionMethod(object):
    def __init__(self, version, func):
        self.version = version
        self.func = func


class MetaClass(type):
    def __new__(cls, name, bases, cls_dict):
        for base in bases:
            version_methods = getattr(base, VERION_METHODS, None)
            if version_methods:
                cls_dict[VERION_METHODS] = version_methods
                delattr(base, VERION_METHODS)

        return super(MetaClass, cls).__new__(cls, name, bases, cls_dict)


class Base(object):
    __metaclass__ = MetaClass

    def __getattribute__(self, name):

        def version_select(*args, **kwargs):
            if len(args) &gt; 0:
                version = args[0]['version']
            else:
                version = kwargs['req']['version']
            for version_func in self.version_methods.get(name, None):
                if version_func.version == version:
                    return version_func.func(self, *args, **kwargs)
            raise AttributeError

        try:
            version_methods = object.__getattribute__(self, VERION_METHODS)
        except AttributeError:
            return object.__getattribute__(self, name)

        if version_methods and \
                name in version_methods:
            return version_select
        return object.__getattribute__(self, name)


    @classmethod
    def version(cls, version):
        def wrapper(func):
            name = func.func_name
            version_methods = getattr(cls, VERION_METHODS, {})
            if not version_methods:
                setattr(cls, VERION_METHODS, version_methods)

            methods = version_methods.get(name, [])
            if not methods:
                version_methods[name] = methods
            methods.append(VersionMethod(version, func))

            return func
        return wrapper


class SubClass(Base):

    @Base.version("1.0")
    def foo(self, req):
        print "in SubClass 1.0 version: %s" % req

    @Base.version("2.0")
    def foo(self, req):
        print "in SubClass 2.0 version: %s" % req

class SubClass2(Base):

    @Base.version("1.0")
    def foo(self, req):
        print "in SubClass2 1.0 version: %s" % req

    @Base.version("2.0")
    def foo(self, req):
        print "in SubClass2 2.0 version: %s" % req




SubClass().foo({"version": "1.0"})
SubClass().foo({"version": "2.0"})

SubClass2().foo({"version": "1.0"})
SubClass2().foo({"version": "2.0"})

# Output
# in SubClass 1.0 version: {'version': '1.0'}
# in SubClass 2.0 version: {'version': '2.0'}
# in SubClass2 1.0 version: {'version': '1.0'}
# in SubClass2 2.0 version: {'version': '2.0'}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;[0] &lt;a href="https://github.com/openstack/nova/blob/c13f693d496f4ea5dbc78244fefd9ec2d6ea8de5/nova/api/openstack/wsgi.py#L1075" target="_blank"&gt;https://github.com/openstack/nova/blob/c13f693d496f4ea5dbc78244fefd9ec2d6ea8de5/nova/api/openstack/wsgi.py#L1075&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 18 May 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-05-18:/python-metaclass-magic.html</guid><category>Python</category></item><item><title>Oz Templates</title><link>http://xcodest.me/oz-templates.html</link><description>&lt;p&gt;最近利用&lt;a href="https://github.com/clalancette/oz" target="_blank"&gt;OZ&lt;/a&gt;做了几个常用镜像的自动化制作。回头有用到的会再加进去。说明如下&lt;/p&gt;
&lt;p&gt;项目地址: &lt;a href="https://github.com/jeffrey4l/oz-templates" target="_blank"&gt;https://github.com/jeffrey4l/oz-templates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是README里的内容。&lt;/p&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;The isos are located in &lt;code&gt;/data/isos/&lt;/code&gt;. The isos' name are conversionally.&lt;br&gt;
Including&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS-6.3-x86_64-bin-DVD1.iso&lt;/li&gt;
&lt;li&gt;RHEL-6.3-x86_64-DVD.iso&lt;/li&gt;
&lt;li&gt;ubuntu-14.04.1-server-amd64.iso&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/clalancette/oz.git
cd oz
git clone https://github.com/jeffrey4l/oz-templates.git
cd oz-templates
make all
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="detail"&gt;Detail&lt;/h2&gt;
&lt;p&gt;The image are configured as following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;without lvm, which will helpful for partion auto extend.&lt;/li&gt;
&lt;li&gt;Default image size is 40GB&lt;/li&gt;
&lt;li&gt;Installed cloud-init with some basic configuration.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 11 May 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-05-11:/oz-templates.html</guid><category>OpenStack</category></item><item><title>论Python的异常的合理抛出姿势</title><link>http://xcodest.me/How_to_raise_python_exception.html</link><description>&lt;p&gt;当需要重新抛出 Python 的异常时，很多人都处理不好。本文总结了一些处理方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种处理会直接把内部异常吃掉，当有问题/Bug时，会很难处理，所以不推荐。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="c1"&gt;# or&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;
    &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种直接打印的，一是不能很好的输出到日志里。二是不能把错误交到上层调用者，不能让其知道这是有问题。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_somethink&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_cleanup&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;raise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用这种，主要是为了做cleanup。直接&lt;code&gt;raise&lt;/code&gt;后，异常会抛向上层。没有catch的效果一样。&lt;/p&gt;
&lt;p&gt;这里还有一种和上面这个类似的效果的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="n"&gt;exc_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后，当要抛出自己重新包装后的异常时，最好把原始的异常也带上。这样有利于问题的debug。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="n"&gt;exc_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;MyException&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ianbicking.org/blog/2007/09/re-raising-exceptions.html" target="_blank"&gt;Re-raising Exceptions&lt;/a&gt; - by Ian Bicking&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Wed, 06 May 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-05-06:/How_to_raise_python_exception.html</guid><category>Python</category><category>Exception</category></item><item><title>Logstash Debug</title><link>http://xcodest.me/logstash_debug.html</link><description>&lt;p&gt;Logstash 能使用 rubydebug 这个 codec 进行 debug。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;input {
    stdin {}
}

output {
    stdout {
        codec =&amp;gt; rubydebug
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 logstash 手动启动&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;logstash -f debug.conf --verbose --debug
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接输入数据，能得到详细的输出报告&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./logstash -f debug --verbose --debug                            
a
Pipeline started {:level=&amp;gt;:info}
{
       &amp;quot;message&amp;quot; =&amp;gt; &amp;quot;a&amp;quot;,
      &amp;quot;@version&amp;quot; =&amp;gt; &amp;quot;1&amp;quot;,
    &amp;quot;@timestamp&amp;quot; =&amp;gt; &amp;quot;2015-03-23T09:55:15.226Z&amp;quot;,
          &amp;quot;type&amp;quot; =&amp;gt; &amp;quot;test&amp;quot;,
          &amp;quot;host&amp;quot; =&amp;gt; &amp;quot;jeffrey-thinkpad&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://logstash.net/docs/1.4.2/codecs/rubydebug" target="_blank"&gt;http://logstash.net/docs/1.4.2/codecs/rubydebug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://logstash.net/docs/1.4.2/flags" target="_blank"&gt;http://logstash.net/docs/1.4.2/flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 23 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-03-23:/logstash_debug.html</guid></item><item><title>Nova Security Group相关配置</title><link>http://xcodest.me/nova-security-groupxiang-guan-pei-zhi.html</link><description>&lt;h1 id="_1"&gt;相关配置&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;network_api_class - 设置 network 模块所用的api&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nova.network.api.API&lt;/code&gt; - 通过rpc与nova-network交互&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nova.network.neutronv2.API&lt;/code&gt; - 通过http与neutron-server交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;security_group_api - 设置 security group 模块所用的api类&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nova&lt;/code&gt; (&lt;code&gt;nova.compute.api.SecurityGroupAPI&lt;/code&gt;) - 通过rcp与nova-compute交互&lt;/li&gt;
&lt;li&gt;&lt;code&gt;neutron&lt;/code&gt; ( &lt;code&gt;nova.network.security_group.neutron_driver.SecurityGroupAPI&lt;/code&gt; ) - 通过http与neutron-server交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;linuxnet_interface_driver - 在机器与 ethernet interface plug&amp;amp;unplug时调用 。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nova.network.linux_net.LinuxBridgeInterfaceDriver&lt;/code&gt; - used in nova-network&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nova.network.linux_net.linuxOVSInterfaceDriver&lt;/code&gt; - use in neutron + ml2 + ovs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nova.network.linux_net.NeutronLinuxBridgeInterfaceDriver&lt;/code&gt; - use in neutron + ml2 + linuxbridge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;firewall_driver - 虚拟化层所用的 firewall。在nova-network时代，security group由iptables和ebtables实现。在neutron时代，这个已经不需要了。但是neutron里现在还有arp-spoofing的bug, 参见[2]&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nova.virt.firewall.IptablesFirewallDrive&lt;/code&gt; - &lt;/li&gt;
&lt;li&gt;&lt;code&gt;nova.virt.firewall.NoopFirewallDriver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_2"&gt;使用组合：&lt;/h1&gt;
&lt;p&gt;nova-network + libvirt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nova_api_class=nova.network.api.API
security_group_ap=nova
linuxnet_interface_driver=nova.network.linux_net.LinuxBridgeInterfaceDriver
firewall_driver=nova.virt.firewall.IptablesFirewallDrive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;neutron + ml2 + linuxbridge plugin + libvirt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nova_api_class=nova.network.neutronv2.API
security_group_ap=neutron
linuxnet_interface_driver=nova.network.linux_net.NeutronLinuxBridgeInterfaceDriver
firewall_driver=nova.virt.firewall.NoopFirewallDriver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;neutron + ml2 + ovs plugin + libvirt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nova_api_class=nova.network.neutronv2.API
security_group_ap=neutron
linuxnet_interface_driver=nova.network.linux_net.linuxOVSInterfaceDriver
firewall_driver=nova.virt.firewall.NoopFirewallDriver
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://kennethjiang.blogspot.jp/2012/02/ebtables-in-openstack-nova-and.html" target="_blank"&gt;ebtables in Openstack Nova&lt;/a&gt; - nwfilter explaination&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blueprints.launchpad.net/neutron/+spec/arp-spoof-patch-ebtables" target="_blank"&gt;Preventing ARP spoofing via ebtables&lt;/a&gt; - Neutron BP for preventing arp snoofing. Expected in Kilo&lt;ol&gt;
&lt;li&gt;&lt;a href="https://bugs.launchpad.net/neutron/+bug/1274034" target="_blank"&gt;Neutron firewall anti-spoofing does not prevent ARP poisoning&lt;/a&gt; - Related bug&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Wed, 18 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-03-18:/nova-security-groupxiang-guan-pei-zhi.html</guid><category>Network</category></item><item><title>关于减肥你应该知道的十件事 - 观后总结</title><link>http://xcodest.me/ten-things-you-need-know-abount-loss-weight.html</link><description>&lt;p&gt;看了BBC出的"BBC：关于减肥你应该知道的十件事"，做了一些笔记。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;瘦人也可能脂肪高&lt;ul&gt;
&lt;li&gt;主要存在于内脏。增加有2型糖尿病和胰岛素抵抗病的风险。内脏脂肪还能释放某些物质损坏心脏周围的动脉，导致心脏病。这些物质还能增加癌症的风险。肝脏释放的化学物质很容易进入肝脏，影响肝脏清除血液中胰岛素的能力，从而有可能引发2型糖尿病。减肥时，最先减掉的就是自己内脏里的脂肪。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不应该减少正餐的次数。&lt;ul&gt;
&lt;li&gt;当饥饿时，大脑更偏向于选择高热量的食物。当不饿时，大脑会高热量和低热量的食物的反应差不多。这是大脑会脑肠肽激素的反应，当胃里排空时，脑肠肽就会向大脑发出信息，进食高热量的食物。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选用更小的餐具能减少食物的摄入量。可以减少23%的摄入量。&lt;/li&gt;
&lt;li&gt;尽量选用低热量的食物。有可能让一天的摄入热量减少50%。&lt;/li&gt;
&lt;li&gt;多数人都会低估自己每天的摄入量(大概50%)。计算摄入量时，一些看似健康的食物也要加上。&lt;/li&gt;
&lt;li&gt;增加蛋白的摄入量能有效的缓解饥饿感。&lt;ul&gt;
&lt;li&gt;相比其它的食物，蛋白能够更多的释放酪酪肽，通过血液告诉大脑现在不饿。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相同的食物，弄成粥羹后食用，会延长胃排空的时间。&lt;ul&gt;
&lt;li&gt;因为水会比粥更快的排出胃里，从而使胃里的食物变少。而粥会持续更长的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人类进化上，会偏向于多样化的食物。所以面对于自助餐，会让人吃的更多。(可以尽量减少自己进食的多样化，让其只有有限的几种)&lt;/li&gt;
&lt;li&gt;低脂奶制品中的乳钙能有效的去除脂肪。乳钙和脂肪分子结合变成类似于皂质的物质，而人体的小肠不能吸收。&lt;/li&gt;
&lt;li&gt;运动开始后，脂肪是在一直燃烧的，甚至在睡觉的时候。&lt;ul&gt;
&lt;li&gt;运动完成后，脂肪还是会持续燃烧，而且它的消耗量比运动时还大(指单位时间内)。也就是说，运动完后的第二天，脂肪的消耗量比运动当天还大的多。运动时，肌肉主要使用更容易被身体燃烧的碳水化合物，然后身体需要22个小时来进行补充恢复被消耗掉的碳水化合物，在比期间，身体会被迫燃烧脂肪。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于不爱运动的人来说，生活说小的改变，能让热量消耗有很大的不同。如多走几步路等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://open.163.com/movie/2013/5/E/1/M8TBLASMF_M8TBLJSE1.html" target="_blank"&gt;BBC：关于减肥你应该知道的十件事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Thu, 12 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-03-12:/ten-things-you-need-know-abount-loss-weight.html</guid></item><item><title>Cinder V2 API</title><link>http://xcodest.me/cinder-v2-api.html</link><description>&lt;p&gt;cinder v2 api add more feature than v1, Like QoS. And the v1 is marked deprecated in juno and will be removed soon. ( may be in kilo).&lt;/p&gt;
&lt;h1 id="enable-the-v2-in-cinder"&gt;Enable the v2 in cinder&lt;/h1&gt;
&lt;p&gt;Change the following config. The v1 and v2 is enabled in default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# DEPRECATED: Deploy v1 of the Cinder API. (boolean value)&lt;/span&gt;
&lt;span class="c1"&gt;#enable_v1_api=true&lt;/span&gt;

&lt;span class="c1"&gt;# Deploy v2 of the Cinder API. (boolean value)&lt;/span&gt;
&lt;span class="c1"&gt;#enable_v2_api=true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="enable-the-cinder-v2-api-in-nova"&gt;Enable the cinder v2 api in nova&lt;/h1&gt;
&lt;p&gt;In current nova config ( juno ), the default config like below. Depend on &lt;code&gt;catalog_info&lt;/code&gt; key, it use the v2 first. If v2 is not found, it will fall back to v1 version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[cinder]&lt;/span&gt;

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Options defined in nova.volume.cinder&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="c1"&gt;# Info to match when looking for cinder in the service&lt;/span&gt;
&lt;span class="c1"&gt;# catalog. Format is: separated values of the form:&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;service_type&amp;gt;:&amp;lt;service_name&amp;gt;:&amp;lt;endpoint_type&amp;gt; (string value)&lt;/span&gt;
&lt;span class="c1"&gt;#catalog_info=volumev2:cinderv2:publicURL&lt;/span&gt;

&lt;span class="c1"&gt;# Override service catalog lookup with template for cinder&lt;/span&gt;
&lt;span class="c1"&gt;# endpoint e.g. http://localhost:8776/v1/%(project_id)s&lt;/span&gt;
&lt;span class="c1"&gt;# (string value)&lt;/span&gt;
&lt;span class="c1"&gt;#endpoint_template=&amp;lt;None&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Region name of this node (string value)&lt;/span&gt;
&lt;span class="c1"&gt;#os_region_name=&amp;lt;None&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Number of cinderclient retries on failed http calls (integer&lt;/span&gt;
&lt;span class="c1"&gt;# value)&lt;/span&gt;
&lt;span class="c1"&gt;#http_retries=3&lt;/span&gt;

&lt;span class="c1"&gt;# Allow attach between instance and volume in different&lt;/span&gt;
&lt;span class="c1"&gt;# availability zones. (boolean value)&lt;/span&gt;
&lt;span class="c1"&gt;#cross_az_attach=true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can just add the endpoint to the keystone to enable the cinder v2 api.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keystone service-create --name&lt;span class="o"&gt;=&lt;/span&gt;cinderv2 --type&lt;span class="o"&gt;=&lt;/span&gt;volumev2 &lt;span class="se"&gt;\&lt;/span&gt;
  --description&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cinder Volume Service V2&amp;quot;&lt;/span&gt;

keystone endpoint-create &lt;span class="se"&gt;\&lt;/span&gt;
  --service-id&lt;span class="o"&gt;=&lt;/span&gt;the_service_id_above &lt;span class="se"&gt;\&lt;/span&gt;
  --publicurl&lt;span class="o"&gt;=&lt;/span&gt;http://controller:8776/v2/%&lt;span class="se"&gt;\(&lt;/span&gt;tenant_id&lt;span class="se"&gt;\)&lt;/span&gt;s &lt;span class="se"&gt;\&lt;/span&gt;
  --internalurl&lt;span class="o"&gt;=&lt;/span&gt;http://controller:8776/v2/%&lt;span class="se"&gt;\(&lt;/span&gt;tenant_id&lt;span class="se"&gt;\)&lt;/span&gt;s &lt;span class="se"&gt;\&lt;/span&gt;
  --adminurl&lt;span class="o"&gt;=&lt;/span&gt;http://controller:8776/v2/%&lt;span class="se"&gt;\(&lt;/span&gt;tenant_id&lt;span class="se"&gt;\)&lt;/span&gt;s

service cinder-scheduler restart
service cinder-api restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;http://docs.openstack.org/havana/install-guide/install/apt/content/cinder-controller.html&lt;/li&gt;
&lt;li&gt;https://wiki.openstack.org/wiki/CinderAPIv2&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Tue, 10 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-03-10:/cinder-v2-api.html</guid><category>Cinder</category><category>OpenStack</category></item><item><title>Print the First N Characters of each Line</title><link>http://xcodest.me/print-the-first-n-characters-of-each-line.html</link><description>&lt;p&gt;在使用 Shell 的过程中，经常会遇到一行过长，导致输出折行，相当难看的情况出现。而且多数据情况下，我们只用每行的前 N 个字符就可以了。这时可以用以下方法来截断每行的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法1&lt;/strong&gt;： 使用 &lt;code&gt;awk&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat filename | awk &amp;#39;{print substr($0, 0, 20)}&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;方法2&lt;/strong&gt;: 使用 &lt;code&gt;sed&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat filename | sed &amp;#39;s/\(.\{20\}\).*/\1/&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt; 方法3&lt;/strong&gt;: 使用 &lt;code&gt;sed -r&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat filename | sed -r &amp;#39;s/(.{20}).*/\1/&amp;#39;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Sun, 15 Feb 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-02-15:/print-the-first-n-characters-of-each-line.html</guid><category>Shell</category></item><item><title>修改 Libvirt 的 UUID</title><link>http://xcodest.me/libvirt-uuid.html</link><description>&lt;p&gt;由于物理机器有限，想做OpenStack的多机环境一直是个问题。之前是在OpenStack上部署OpenStack。由于只有一台物理机，资源相当紧张。不能建太多机器。最近突然想，既然 LXC 现在已经很完善了。能不能就利用它来做 OpenStack 服务间的隔离呢。所以最近一直在搞这东西。搞了几天还是有效果的。基本搭建了 OpenStack + Ceph + Swift 的环境出来。其中网络用的 Neutron + ML2 + OVS + VLAN。由于用 LXC 的隔离的，相对于之前来说相当节省资源。很好的解决了资源的问题。可以做一些大量机器的实验了。之后也会也这其中遇到的一些问题写下来，备忘。&lt;/p&gt;
&lt;p&gt;今天主要写下配置 Live Migration 过程中遇到的一个问题。&lt;/p&gt;
&lt;p&gt;每个 Libvirtd 实例都会有一个 UUID 存在。不同的 libvirt 实例的 UUID 应该是不同的。否则在 migrate 过程中， libvirt 会认为自己是在向自己迁移从而导致迁移失败。这个UUID有一个默认值，是来自于 SMBIOS UUID。这两个UUID可以通过以下方法拿到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ dmidecode  -s system-uuid
4C4C4544-0032-3210-804C-C7C04F463358

$ virsh capabilities | grep uuid
&lt;span class="nt"&gt;&amp;lt;uuid&amp;gt;&lt;/span&gt;44454c4c-3200-1032-804c-c7c04f463358&lt;span class="nt"&gt;&amp;lt;/uuid&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到这两个值是一样的(不知道为什么有一段顺序不对)。&lt;/p&gt;
&lt;p&gt;当我在不同的 LXC 中启动多个 libvirt 时，就会触发这个问题。所有的 libvirt 使用的是相同的 uuid 从而导致 live migration 失败。&lt;/p&gt;
&lt;p&gt;修改的办法也很简单。这个UUID可以在 libvirt 的配置文件&lt;code&gt;/etc/libvirt/libvirtd.conf&lt;/code&gt;中修改后重启libivrt就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;host_uuid = &amp;quot;8ba976e9-1224-4339-9526-719fe6dee311&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://libvirt.org/guide/html/Application_Development_Guide-Connections-Capability_Info.html" target="_blank"&gt;Libvirt Capability Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Tue, 10 Feb 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-02-10:/libvirt-uuid.html</guid><category>Libvirt</category></item><item><title>tun &amp; veth设备</title><link>http://xcodest.me/tun-vethshe-bei.html</link><description>&lt;p&gt;OpenStack 的 Neutron 中会建立好多网卡设备。大体上这些网卡可以分为两类 tun 和 veth。&lt;/p&gt;
&lt;p&gt;&lt;img alt="OpenStack Neutron Network" class="img-responsive" src="/images/neutron-ovs-compute.png"&gt;&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;ethtool&lt;/code&gt;可以得到网卡所用的驱动，从而得到网上设备是哪一类。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ethtool -i veth4NCTQ1 
driver: veth
version: &lt;span class="m"&gt;1&lt;/span&gt;.0
firmware-version: 
bus-info: 
supports-statistics: yes
supports-test: no
supports-eeprom-access: no
supports-register-dump: no
supports-priv-flags: no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面就这两种设备分别做一下介绍。&lt;/p&gt;
&lt;h1 id="tun-tap"&gt;tun &amp;amp; tap&lt;/h1&gt;
&lt;p&gt;TUN与TAP是操作系统内核中的虚拟网络设备。不同于普通靠硬件网路板卡实现的设备，这些虚拟的网络设备全部用软件实现，并向运行于操作系统上的软件提供与硬件的网络设备完全相同的功能。&lt;/p&gt;
&lt;p&gt;TAP 等同于一个以太网设备，它操作第二层数据包如以太网数据帧。TUN模拟了网络层设备，操作第三层数据包比如IP数据封包。&lt;/p&gt;
&lt;p&gt;操作系统通过TUN/TAP设备向绑定该设备的用户空间的程序发送数据，反之，用户空间的程序也可以像操作硬件网络设备那样，通过TUN/TAP设备发送数据。在后种情况下，TUN/TAP设备向操作系统的网络栈投递（或“注入”）数据包，从而模拟从外部接受数据的过程。&lt;/p&gt;
&lt;p&gt;tun/tap 驱动程序实现了虚拟网卡的功能，tun表示虚拟的是点对点设备，tap表示虚拟的是以太网设备，这两种设备针对网络包实施不同的封装。&lt;/p&gt;
&lt;p&gt;利用tun/tap 驱动，可以将tcp/ip协议栈处理好的网络分包传给任何一个使用tun/tap驱动的进程，由进程重新处理后再发到物理链路中。&lt;/p&gt;
&lt;p&gt;开源项目openvpn和Vtun都是利用tun/tap驱动实现的隧道封装&lt;/p&gt;
&lt;p&gt;虽然是出自一个娘，但它们仍然有大的不同。tun是点对点的设备，而tap是一个普通的以太网卡设备。也就是说，tun设备其实完全不需要有物理地址的。它收到和发出的包不需要arp，也不需要有数据链路层的头。而tap设备则是有完整的物理地址和完整的以太网帧。&lt;/p&gt;
&lt;p&gt;可以通过以下方法创建&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip tuntap add mode tap 
ip tuntap add mode tun
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 OpenStack 中，主要用tap来做虚拟机的网卡。&lt;/p&gt;
&lt;h1 id="veth"&gt;veth&lt;/h1&gt;
&lt;p&gt;veth 从名字上来看是 Virtual ETHernet 的缩写，它的作用很简单，就是要把从一个 network namespace 发出的数据包转发到另一个 namespace。veth 设备是成对的，一个是 container 之中，另一个在 container 之外，即在真实机器上能看到的。 建立 veth 类型的设备可以用下面的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip link add name veth0 type veth0 peer name veth1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里建立了一对veth设备，名字分别是 veth0 和 veth1。当向其中一个设备写入数据时，另一个设备就能拿到写入的数据。在 OpenStack 中的使用就是来穿透 namespace.&lt;/p&gt;
&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wangcong.org/2011/06/19/-e5-85-b3-e4-ba-8e-tuntap/" target="_blank"&gt;关于 tun/tap 设备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wangcong.org/2011/07/03/-e4-bb-80-e4-b9-88-e6-98-af-veth/" target="_blank"&gt;什么是veth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.51know.info/system_base/tun_tap.html" target="_blank"&gt;linux下TUN/TAP虚拟网卡的使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 09 Feb 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-02-09:/tun-vethshe-bei.html</guid><category>Network</category></item><item><title>中信9积分</title><link>http://xcodest.me/ecitic9.html</link><description>&lt;p&gt;中信的i白金是张好卡，也是我的主力使用卡。其中9积分的活动还是比较厚道的。这个羊毛可以薅一薅。但是参加的店和地址还不少。我把北京西城这边的统计了一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;西树泡芙 - 9积分换36元消费金1次&lt;ul&gt;
&lt;li&gt;西单北大街131号西单大悦城3F-B14&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;星巴克 - 9积分兑换大杯手工调制咖啡一杯&lt;/li&gt;
&lt;li&gt;哈根达斯 - 9积分兑换单球冰淇淋1个&lt;ul&gt;
&lt;li&gt;复兴门内大街101号百盛购物中心南楼一层哈根达斯&lt;/li&gt;
&lt;li&gt;西单北大街133号君太百货一层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;万宁 - 9积分=30元消费金&lt;ul&gt;
&lt;li&gt;阜外大街2号北京万通新世界商品批发市场第一层1A086-1A090、1A100-1A109号商铺&lt;/li&gt;
&lt;li&gt;西单北大街131号大悦城B2-29至31&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;汉堡王 - 皇堡/天椒皇堡套餐&lt;ul&gt;
&lt;li&gt;西单北大街131号西单大悦城3F—20&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;歌帝梵商户 - 巧克力一条&lt;ul&gt;
&lt;li&gt;西单北大街133号君太太平洋百货2F-B-02及3F-A-11及A-12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另活动页面在 &lt;a href="http://creditcard.ecitic.com/youhui/120926/wanning.shtml" target="_blank"&gt;http://creditcard.ecitic.com/youhui/120926/wanning.shtml&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Thu, 05 Feb 2015 20:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-02-05:/ecitic9.html</guid></item><item><title>MySQL Errno 150</title><link>http://xcodest.me/mysql-errno-150.html</link><description>&lt;p&gt;做OpenStack icehouse 升级到 Juno过程中，升级Neutron数据库时遇到这个错误。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;neutron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migrate_to_ml2&lt;/span&gt; &lt;span class="n"&gt;openvswitch&lt;/span&gt; &lt;span class="nl"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//USER:PASSWORD@10.251.1.8/neutron&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/runpy.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;162&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_module_as_main&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pkg_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/runpy.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_code&lt;/span&gt;
    &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_globals&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/neutron/db/migration/migrate_to_ml2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;462&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/neutron/db/migration/migrate_to_ml2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;458&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vxlan_udp_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/neutron/db/migration/migrate_to_ml2.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;138&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/schema.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2848&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;create_all&lt;/span&gt;
    &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1479&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_visitor&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_run_visitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visitorcallable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1122&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_visitor&lt;/span&gt;
    &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;traverse_single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/sql/visitors.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;122&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;traverse_single&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/ddl.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visit_metadata&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;traverse_single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/sql/visitors.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;122&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;traverse_single&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/ddl.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visit_table&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;662&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;720&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_execute_ddl&lt;/span&gt;
    &lt;span class="n"&gt;compiled&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;874&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_execute_context&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_handle_dbapi_exception&lt;/span&gt;
    &lt;span class="n"&gt;exc_info&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/util/compat.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;196&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;raise_from_cause&lt;/span&gt;
    &lt;span class="n"&gt;reraise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;exc_tb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;867&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_execute_context&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/sqlalchemy/engine/default.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;324&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do_execute&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/MySQLdb/cursors.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;174&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errorhandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib/python2.7/dist-packages/MySQLdb/connections.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;defaulterrorhandler&lt;/span&gt;
    &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;errorclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorvalue&lt;/span&gt;
&lt;span class="n"&gt;sqlalchemy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;OperationalError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OperationalError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Can&amp;#39;t create table &amp;#39;neutron.ml2_network_segments&amp;#39; (errno: 150)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;\&lt;/span&gt;&lt;span class="n"&gt;nCREATE&lt;/span&gt; &lt;span class="n"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;ml2_network_segments&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tid&lt;/span&gt; &lt;span class="n"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NOT&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tnetwork_id&lt;/span&gt; &lt;span class="n"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NOT&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tnetwork_type&lt;/span&gt; &lt;span class="n"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NOT&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tphysical_network&lt;/span&gt; &lt;span class="n"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tsegmentation_id&lt;/span&gt; &lt;span class="n"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tPRIMARY&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;tFOREIGN&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;network_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;networks&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;DELETE&lt;/span&gt; &lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;原因是 Mysql 有对外键约束[1]，仔细查数据里发现 networks 表的 collcation 和新建上述表时的默认数据库 collcation 不一样。以下是Mysql对外键约束的描述[1]，我遇到的是第二条错误(加粗的部分)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Foreign key relationships involve a parent table that holds the central data values, and a child table with identical values pointing back to its parent. The FOREIGN KEY clause is specified in the child table. The parent and child tables must use the same storage engine. They must not be TEMPORARY tables.&lt;/li&gt;
&lt;li&gt;Corresponding columns in the foreign key and the referenced key must have similar data types. The size and sign of integer types must be the same. The length of string types need not be the same. For nonbinary (character) string columns, the character set and collation must be the same.&lt;/li&gt;
&lt;li&gt;MySQL requires indexes on foreign keys and referenced keys so that*  foreign key checks can be fast and not require a table scan. In the referencing table, there must be an index where the foreign key columns are listed as the first columns in the same order. Such an index is created on the referencing table automatically if it does not exist. This index might be silently dropped later, if you create another index that can be used to enforce the foreign key constraint. index_name, if given, is used as described previously.&lt;/li&gt;
&lt;li&gt;InnoDB permits a foreign key to reference any index column or group of columns. However, in the referenced table, there must be an index where the referenced columns are listed as the first columns in the same order.&lt;/li&gt;
&lt;li&gt;Index prefixes on foreign key columns are not supported. One consequence of this is that BLOB and TEXT columns cannot be included in a foreign key because indexes on those columns must always include a prefix length.&lt;/li&gt;
&lt;li&gt;If the CONSTRAINT symbol clause is given, the symbol value, if used, must be unique in the database. A duplicate symbol will result in an error similar to: ERROR 1005 (HY000): Can't create table 'test.#sql-211d_3' (errno: 121). If the clause is not given, or a symbol is not included following the CONSTRAINT keyword, a name for the constraint is created automatically.&lt;/li&gt;
&lt;li&gt;InnoDB does not currently support foreign keys for tables with user-defined partitioning. This includes both parent and child tables.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;解决方法是&lt;/strong&gt;：将 database 及 table 的 character 和 collcation 改成一样的就行了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;alter&lt;/span&gt; &lt;span class="k"&gt;database&lt;/span&gt; &lt;span class="n"&gt;neutron&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="k"&gt;character&lt;/span&gt; &lt;span class="kt"&gt;set&lt;/span&gt; &lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ref"&gt;REF&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://bugs.launchpad.net/neutron/+bug/1332564" target="_blank"&gt;https://bugs.launchpad.net/neutron/+bug/1332564&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.mysql.com/doc/refman/5.1/en/create-table-foreign-keys.html" target="_blank"&gt;http://dev.mysql.com/doc/refman/5.1/en/create-table-foreign-keys.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Wed, 14 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-01-14:/mysql-errno-150.html</guid><category>MySQL</category></item><item><title>PIP install from local</title><link>http://xcodest.me/pip-install-from-local.html</link><description>&lt;p&gt;在一些特殊环境中，服务器是不能联网的。此时要通过pip安装包会有一些麻烦。这时可以使用pip的download到本地的功能，来加速安装。&lt;/p&gt;
&lt;p&gt;先在有网络的环境中下载下来所有需要的包：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --download &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.pip-packages -r requirement.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在把这些包拷贝到目标环境中去，使用下面的命令来安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --no-index --find-links &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.pip-packages -r requirement.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所有需要的包就安装上了。&lt;/p&gt;
&lt;p&gt;为了方便使用，还可以把这两个命令弄成alias来使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alias pipcache=&amp;#39;pip install --download &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.pip-packages&amp;#39;
alias pipinstall=&amp;#39;pip install --no-index --find-links=file://&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.pip-packages/&amp;#39;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Thu, 08 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2015-01-08:/pip-install-from-local.html</guid><category>Python</category></item><item><title>Nova flavor init</title><link>http://xcodest.me/nova-flavor-init.html</link><description>&lt;p&gt;ustack的flavor做的还是挺全的，所以用了一个脚本来创建和其一样的flavor类型。&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/ecee9fcb00412cd67fe7.js?file=nova-flavor-init.sh'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;#!/bin/bash
#
# This configuration is copy from ustack.com

DEFAULT_ROOT_GB=40

nova-manage flavor create --name micro-1 --cpu 1 --memory 512 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name micro-2 --cpu 1 --memory 1024 --root_gb $DEFAULT_ROOT_GB --is_public True

nova-manage flavor create --name standard-1 --cpu 1 --memory 2048 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name standard-2 --cpu 2 --memory 4096 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name standard-4 --cpu 4 --memory 8192 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name standard-8 --cpu 8 --memory 16384 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name standard-12 --cpu 12 --memory 24576 --root_gb $DEFAULT_ROOT_GB --is_public True

nova-manage flavor create --name memory-1 --cpu 1 --memory 4096 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name memory-2 --cpu 2 --memory 8192 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name memory-4 --cpu 4 --memory 16384 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name memory-8 --cpu 8 --memory 24576 --root_gb $DEFAULT_ROOT_GB --is_public True

nova-manage flavor create --name compute-2 --cpu 2 --memory 2048 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name compute-4 --cpu 4 --memory 4096 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name compute-8 --cpu 8 --memory 8192 --root_gb $DEFAULT_ROOT_GB --is_public True
nova-manage flavor create --name compute-12 --cpu 12 --memory 16384 --root_gb $DEFAULT_ROOT_GB --is_public True
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Thu, 11 Sep 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2014-09-11:/nova-flavor-init.html</guid><category>OpenStack</category><category>Nova</category></item><item><title>Python cString raise exception when feed Unicode</title><link>http://xcodest.me/python-cstring-unicode.html</link><description>&lt;p&gt;I gett following different result when using these two Class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cStringIO&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\u2222&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cStringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\u2222&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;UnicodeEncodeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;codec&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t encode character u&amp;#39;&lt;/span&gt;\&lt;span class="n"&gt;u2222&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; in position 0: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The root cause is explained on &lt;a href="https://docs.python.org/2/library/stringio.html#cStringIO.StringIO" target="_blank"&gt;document for cStringIO&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike the StringIO module, this module is not able to accept Unicode strings that cannot be encoded as plain ASCII strings.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Tue, 09 Sep 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2014-09-09:/python-cstring-unicode.html</guid><category>Python</category></item><item><title>Migrate SVN to GitLab</title><link>http://xcodest.me/migrate-svn-to-gitlab.html</link><description>&lt;ul&gt;
&lt;li&gt;在GitLab上创建相对应的项目/项目组&lt;/li&gt;
&lt;li&gt;准备''users.txt''文件，来修正提交用户名。并手动修改users.txt的正确性 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;svn log &amp;lt;svn-url&amp;gt; --xml | grep -P &amp;quot;^&amp;lt;author&amp;quot; | sort -u | perl -pe &amp;#39;s/&amp;lt;author&amp;gt;(.*?)&amp;lt;\/author&amp;gt;/$1 = /&amp;#39; &amp;gt; users.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;users.txt的文件格式如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Lei Zhang = Lei Zhang &amp;lt;zhang.lei.fly#gmail.com&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;把SVN项目使用git-svn进行克隆 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git svn clone --no-metadata --authors-file users.txt -s &amp;lt;svn-url&amp;gt; &amp;lt;project&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;处理SVN的分支和标签 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd &lt;span class="nt"&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
git for-each-ref refs/remotes/tags | cut -d / -f 4- | grep -v @ | while read tagname; do git tag &amp;quot;$tagname&amp;quot; &amp;quot;tags/$tagname&amp;quot;; git branch -r -d &amp;quot;tags/$tagname&amp;quot;; done
git for-each-ref refs/remotes | cut -d / -f 3- | grep -v @ | while read branchname; do git branch &amp;quot;$branchname&amp;quot; &amp;quot;refs/remotes/$branchname&amp;quot;; git branch -r -d &amp;quot;$branchname&amp;quot;; done&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Push到Gitlab上的仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add origin &amp;lt;git-repo-url&amp;gt;
git push origin --all
git push origin --tags
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://git-scm.com/book/en/Git-and-Other-Systems-Migrating-to-Git" target="_blank"&gt;Git and Other Systems - Migrating to Git&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Tue, 12 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2014-08-12:/migrate-svn-to-gitlab.html</guid><category>Git</category></item><item><title>硬派健身-减肥篇 阅读笔记</title><link>http://xcodest.me/hard-gym-reading-note.html</link><description>&lt;h2 id="_1"&gt;战肥肉有氧不敌，强塑身无氧超神&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;长时间有氧运动——似是而非的减肥妙计&lt;ol&gt;
&lt;li&gt;当我们的身体状态稳定，身体素质、生活习惯变化不大时，我们的体重和体脂含量都是只能加，不能减，只能胖，不能瘦。这就是我们序章介绍过的体重设定点理论。&lt;/li&gt;
&lt;li&gt;很多实验都证实，单纯增加能量支出，做长时间、中高强度的有氧运动，无法有效地帮正常人减重。&lt;/li&gt;
&lt;li&gt;你的身体也是一样，当它打定主意把你的体重维持在一个设定点上，就会有非常多的手段可以调节这些体重和脂肪。比如，瘦素是一种能减肥和帮助我们抑制食欲的身体激素。研究发现，如果我们单纯进行长时间有氧耐力运动减肥，增加了热量的支出，我们身体会减少瘦素的分泌，让我们多吃，多增长脂肪。效果可以持续好几天，&lt;/li&gt;
&lt;li&gt;还有研究发现，马拉松运动员的瘦素分泌量仅为普通人的三分之一。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;共振——跑步会伤害胖胖的你……&lt;ol&gt;
&lt;li&gt;这也就是说，跑步等运动会在脂肪和关节等部位引起共振，共振的效应最后会引起身体与关节的损伤。目前的研究发现，脂肪的体积越大，重量越重，共振的效果越强，对身体的伤害也就越强烈。冲击力的输入振动频率是10hz左右，脂肪的固定振动频率是2-10hz，可以引起共振，伤害到自己的身体组织&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;世上减肥万法，唯有肌肉无敌&lt;ol&gt;
&lt;li&gt;肉和脂肪的密度差异。要知道，肌肉的密度大概是1.12，而脂肪大概是0.79。&lt;/li&gt;
&lt;li&gt;在维持日常活动量的情况下，达拉斯有氧研究协会发现，每磅肌肉24小时基础热量消耗是30-50卡，但脂肪呢？还是只有可怜的2卡……（脂肪：伦家又不动啦~）&lt;/li&gt;
&lt;li&gt;一般人，二十五岁之后，每年就会损失2.5千克的肌肉&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;先有训练基础，之后减脂更佳&lt;ol&gt;
&lt;li&gt;但是经过一定训练积累的人，再参加有氧运动的效果绝对强于普通人太多&lt;/li&gt;
&lt;li&gt;力量训练超容易，持续效果超耐久&lt;/li&gt;
&lt;li&gt;加州理工大学一项运动研究表明，刚参加力量训练的人在经过两个月的系统负重训练后，他们的肌肉力量增长了47%，肌肉总量增长了9%。随后让他们在两个月里不参加任何形式的力量训练，肌肉保持松懈，却只让他们的肌肉力量减少了23%，肌肉总量只减少4%。&lt;/li&gt;
&lt;li&gt;有氧运动的好处就十分有限，目前比较有效的只有降低血压，同时，血压降低的好处，会随着有氧运动的停止而停止。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;女童鞋们，你们不可能练成肌肉女&lt;ol&gt;
&lt;li&gt;睾丸酮水平决定了肌肉总量和水平。男女间，睾丸酮效用（睾酮水平及AR受体等影响）差了百倍，所以女性想练成金刚芭比是很难的。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;巧减重高强间歇，好身材双剑合璧&lt;/h2&gt;
&lt;p&gt;无敌天下的两项力量训练入门神功。一项是深蹲，一项是平板支撑。&lt;/p&gt;
&lt;h3 id="_3"&gt;深蹲&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;深蹲在运动时能训练到三分之一的肌肉（骨骼肌）。训练肌肉体积可占全身四分之三以上。主训的是人体最强两肌，股四头肌和臀大肌。辅助的是人体次强两肌，腓肠肌和股二头肌。深蹲号称无氧运动之王。练好深蹲，不仅能增强各种运动表现，而且由于训练肌群多、大，消耗的能量也非常可观。&lt;/li&gt;
&lt;li&gt;杜鲁门州立大学的科学家们测试卡路里燃烧的数量，最后发现，深蹲类运动比普通固定器械运动能多消耗50%的热量！并认为这是因为深蹲涉及了更多的稳定性肌肉。需求稳定性的大重量多关节训练是最佳力量燃脂训练之一。&lt;/li&gt;
&lt;li&gt;另外，因为深蹲涉及如此多的肌肉纤维，使得它成为所有训练中最好的推动生长荷尔蒙水平的一种训练。正如日本研究者在2006年的一项研究中发现的那样，更多的生长荷尔蒙意味着更多的肌肉增长。&lt;/li&gt;
&lt;li&gt;臀大肌是人体体积最大的肌肉之一，&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;如何做好深蹲&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首先，找一个高40公分左右的小平凳（茶几沙发均可，只要是这个高度），要结实稳定哦（测试，当你照下文做时，你的大腿角度平行略低于水平，换句话说，小腿和大腿的角略小于90°）。&lt;/li&gt;
&lt;li&gt;手抱头，眼看前方。背挺直、反弓，屁股向后面的板凳坐下（向后坐，不是蹲马扎的向下坐，是接近蹲马桶的向后坐），想象自己有根儿尾巴（赛亚人、变身！），尾巴要冲着天。&lt;/li&gt;
&lt;li&gt;向后坐时，绝对不要放松地重重向后坐。而是下肢紧张地向后，想象凳子是烧红的烙铁，绝不能放心放松坐实。因为深蹲时下半部肌肉要采取超等长收缩，也就是如同橡皮筋一样拉伸蓄满力量。此时感觉臀部被拉伸。换言之，注意力在髋关节和屁股。&lt;/li&gt;
&lt;li&gt;屁股一碰到板凳茶几立即弹起，此时就能感觉是屁股发力了，臀大肌从拉伸状态变成收缩。大腿也跟着发力，整个脚踏实地面，整个人站起。&lt;/li&gt;
&lt;li&gt;如果你觉得上述动作轻松做上20个不是事儿，请把最后动作环节改成发全身之力跳起！唤作板凳深蹲跳！在回落过程中应以前脚掌着地，膝关节角度为140到150。关节角度尽量不变。保证肌腱等弹性成分受到的刺激强度。膝盖不好和体重过大者，慎用此动作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_5"&gt;如何做平板支撑&lt;/h3&gt;
&lt;p&gt;动作是身体俯卧，双肘弯曲支撑在地面上，肩膀和肘关节垂直于地面，双脚踩地，身体离开地面，躯干伸直，头部、肩部、胯部和踝部保持在同一平面，腹肌收紧，腰不可以向下掉，腹部要紧张，另外臀也要夹紧，别掉下去！&lt;br&gt;
，摆出普通的平板支撑动作，然后双手稍微向前移至躯干前方，同时缩短双肘之间的距离，从而延长力臂，减小支撑面的宽&lt;/p&gt;
&lt;h3 id="hiit"&gt;HIIT——最强燃脂，最强塑身&lt;/h3&gt;
&lt;p&gt;而HIIT由于在某种程度上是无氧肌肉训练和有氧训练的结合，实际上是从根本上改变了体质。把体重的设定点往下调整。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日常跑步计划：学校操场，半圈快跑（有能力冲刺）半圈慢跑（也别走着）。&lt;/li&gt;
&lt;li&gt;跑步机计划：半分钟快跑，半分钟慢跑，然后一分钟快跑，一分钟慢跑，然后再半分钟快跑，半分钟慢跑。快跑慢跑的速度自己掌握，我认为快跑用最快速度的80%以上，慢跑用最快速度的50%比较合理。&lt;/li&gt;
&lt;li&gt;自行车、动感单车：8秒冲刺，12秒普通骑。这是澳大利亚研究者实验中采用的方式。效果很好，受试人员体重平均减去2.3千克，有氧代谢能力增加了15%。&lt;/li&gt;
&lt;li&gt;跳绳：跳半分钟来组双摇，大概20个。跳不了双摇的童鞋，可以快跳半分钟，慢跳半分钟。&lt;br&gt;
家里的计划：&lt;/li&gt;
&lt;li&gt;我觉得比较靠谱的是直接上HIIT的操课，这个问题有人也问过我。我后来看了看大家推荐的比较多的郑多燕和insanity。我觉得insanity比较，郑多燕的强度恐怕低了点。其中insanity的第八套强度不错，我觉得适合单跳，其他的适合搭配后面推荐的无氧运动双璧来一起做。当然也要看个人实际情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="hiit_1"&gt;HIIT训练的重点：&lt;/h4&gt;
&lt;p&gt;HIIT运动实际上就是间歇性地提高与降低运动强度，某种程度上自己可以排列组合。只要是大肌群训练（臀腿主要发力），高低强度交替，持续10-20分钟，就能够达到HIIT的健身目的。&lt;br&gt;
至于高低强度交替的规律，我建议变化间隔要短，不要5分钟高强度，5分钟低强度。因为高强度时间太长，无法保证强度忠实完成。最后还是成为中等或低强度的训练。另外，变化的间隔越短，对于脂肪的供能比提升越多。据猜测这可能与身体的预适应有关。有很多人提到了HIIT的强度过大，无法完成。我的建议是，循序渐进。你如果做不了一个insanity的全程，可以找个强度低一点的、二三十分钟的先练，慢慢来。如果你做不到十五分钟的冲刺交替跑，你可以只是快慢跑交替，慢慢进阶。锻炼的成果，更看重的是坚持。人的适应性是很强的，已经有很多朋友联系我说，他们做了我推荐的运动，第一次很难，第二次还可以，现在已经相对轻松了。HIIT训练也是一样的。如果坚持，身体就能不断进步。最后达到希望的效果。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Sat, 19 Jul 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2014-07-19:/hard-gym-reading-note.html</guid><category>Book</category></item><item><title>Glance Image Cache</title><link>http://xcodest.me/glance-image-cache.html</link><description>&lt;p&gt;Glance 增加了一层cache的Middleware，用来缓存从file store后端取过来的镜像。一定&lt;br&gt;
程度上可以加快取镜像的速度。这个功能默认情况下是没开启的。&lt;/p&gt;
&lt;p&gt;因为是通过middleware来控制的，所以只要修改一下paster的配置就行。更简单的是指定&lt;br&gt;
glance-api加载的pipeline的名字。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[deploy]&lt;/span&gt;
&lt;span class="c1"&gt;# possible value: none, cachine, keystone, keystone+caching, &lt;/span&gt;
&lt;span class="c1"&gt;# keystone+cachemanagement&lt;/span&gt;
&lt;span class="c1"&gt;# This value can get from glance-api-paste.conf file&lt;/span&gt;
&lt;span class="na"&gt;flavor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;keystone+caching&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;具体看下&lt;code&gt;glance-api-paster.conf&lt;/code&gt;文件就能明白。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[pipeline:glance-api]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versionnegotiation unauthenticated-context rootapp&lt;/span&gt;

&lt;span class="c1"&gt;# Use this pipeline for image caching and no auth&lt;/span&gt;
&lt;span class="k"&gt;[pipeline:glance-api-caching]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versionnegotiation unauthenticated-context cache rootapp&lt;/span&gt;

&lt;span class="c1"&gt;# Use this pipeline for caching w/ management interface but no auth&lt;/span&gt;
&lt;span class="k"&gt;[pipeline:glance-api-cachemanagement]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versionnegotiation unauthenticated-context cache cachemanage rootapp&lt;/span&gt;

&lt;span class="c1"&gt;# Use this pipeline for keystone auth&lt;/span&gt;
&lt;span class="k"&gt;[pipeline:glance-api-keystone]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versionnegotiation authtoken context rootapp&lt;/span&gt;

&lt;span class="c1"&gt;# Use this pipeline for keystone auth with image caching&lt;/span&gt;
&lt;span class="k"&gt;[pipeline:glance-api-keystone+caching]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versionnegotiation authtoken context cache rootapp&lt;/span&gt;

&lt;span class="c1"&gt;# Use this pipeline for keystone auth with caching and cache management&lt;/span&gt;
&lt;span class="k"&gt;[pipeline:glance-api-keystone+cachemanagement]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versionnegotiation authtoken context cache cachemanage rootapp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不同的pipeline用到了不同的middleware, 启作用的是cache 和 cachemanagement这两个&lt;br&gt;
。&lt;/p&gt;
&lt;h2 id="ref"&gt;REF&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://docs.openstack.org/developer/glance/cache.html" target="_blank"&gt;The Glance Image Cache&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Thu, 17 Jul 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2014-07-17:/glance-image-cache.html</guid><category>Glance</category></item><item><title>Salt Mine</title><link>http://xcodest.me/salt-mine.html</link><description>&lt;p&gt;Salt mine 可以在一定的控制内让minion拿到其它minion的信息。实现原理是：通过配置，让minion定期(最短为1分钟)的向master发送数据，而其它minion可以从master拿到这些数据。一定程度上实现的minion之间的通迅。在搭建cluster时，十分有用。&lt;/p&gt;
&lt;p&gt;可以通过两种方法来配置:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;minion的配置文件&lt;/li&gt;
&lt;li&gt;master的pillar&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用minion配置时，要直接修改minion的配置文件，在&lt;code&gt;/etc/salt/minion.d/mine.conf&lt;/code&gt; 加入如下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mine_functions&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test.ping&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;network.ip_addrs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;interface&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;eth0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用pillar时配置时，只需要修改master的pillar配置即可。如在&lt;code&gt;/srv/pillar/mine.conf&lt;/code&gt; 中加入如下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mine_functions&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test.ping&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;network.ip_addrs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;interface&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;eth0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后把&lt;code&gt;mine.conf&lt;/code&gt;加入到&lt;code&gt;/srv/pillar/top.sls&lt;/code&gt;, 这时可以指定哪些minion来配置mine_functions。相比较而言，这种方式更加灵活一些。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;controller*&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后就可以使用如下语句拿到mine上报上来的结果的(其实这个结果是保存在master的&lt;code&gt;/var/cache/salt/master/minions/*/mine.p&lt;/code&gt;的文件下就可找到上报上来的内容。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ salt &lt;span class="s1"&gt;&amp;#39;jeffrey-thinkpad&amp;#39;&lt;/span&gt; mine.get &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; network.ip_addrs
jeffrey-thinkpad:
    ----------
    icehouse-compute:
        - &lt;span class="m"&gt;10&lt;/span&gt;.0.0.11
    icehouse-controller:
        - &lt;span class="m"&gt;10&lt;/span&gt;.0.0.10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，可以在minion上来修改上报的时间间隔。方法是增加/修改&lt;code&gt;/etc/salt/minion.d/mine.conf&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mine_interval&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="ref"&gt;REF&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://docs.saltstack.com/en/latest/topics/mine/" target="_blank"&gt;Salt Mine&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Wed, 16 Jul 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2014-07-16:/salt-mine.html</guid><category>SaltStack</category></item><item><title>linux bonding mode 6 break the vms</title><link>http://xcodest.me/linux-bonding-mode-6-break-the-vms.html</link><description>&lt;p&gt;操作系统： ubuntu 12.04.1&lt;br&gt;
内核 linux 3.2&lt;/p&gt;
&lt;p&gt;今天发现一个网络上的问题，如果 Openstack Fixed IP 走 mode 6 绑定的网卡，不同物理机上的虚拟机是相互访问不了的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    +---- host1 -------+         +---- host2 ----+
                     eth0 ---- eth0 
                   /                \
    br1 ---- bond0                   bond0 ---- br1 
                   \                /
                     eth0 ---- eth0 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;机器的连接方式如上图，经检查发现，问题简化成两边的 br1 是不通的，现像是ping时，接收方收不到包，包只走到bond0就给丢弃了。原因在于内核上有问题。在网络上查到以下两个连接 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1098302 &lt;/li&gt;
&lt;li&gt;https://bugzilla.redhat.com/show_bug.cgi?id=487763&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;把内核升级到3.8之后就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install linux-image-generic-lts-raring
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 14 Apr 2014 19:39:51 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2014-04-14:/linux-bonding-mode-6-break-the-vms.html</guid><category>Network</category></item><item><title>Dhcp lease errors in vlan mode</title><link>http://xcodest.me/dhcp-lease-errors-in-vlan-mode.html</link><description>&lt;p&gt;在使用&lt;code&gt;keepalived&lt;/code&gt;的过程中，出现了dhcp失败，而导致keepalived工作不正常的问题。而且之前也出现过dhcp偶尔失败，导致虚拟机不能得到IP, 从而不能访问的情况。虽然在&lt;code&gt;/etc/sysconfig/network-scripts/ifcfg-eth0&lt;/code&gt;中加上了如下语句：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PERSISTENT_DHCLIENT=1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使得dhcp单次失败后，继续重试。但是仔细查看dhclient的日志后，发现它有大量的dhcp request失败/超时。在一个&lt;a href="http://openstack.markmail.org/search/?q=Dhcp+lease+errors+in+vlan+mode#query:Dhcp%20lease%20errors%20in%20vlan%20mode+page:1+mid:7kjf4hljszpydsrx+state:results" target="_blank"&gt;邮件列表&lt;/a&gt;中找到原因，如下：&lt;/p&gt;
&lt;p&gt;To fix issues with failed dhcp leases in vlan mode, upgrade to dnsmasq 2.6.1&lt;/p&gt;
&lt;p&gt;THE LONG VERSION&lt;/p&gt;
&lt;p&gt;There is an issue with the way nova uses dnsmasq in VLAN mode. It starts up a&lt;br&gt;
single copy of dnsmasq for each vlan on the network host (or on every host in&lt;br&gt;
multi_host mode). The problem is in the way that dnsmasq binds to an ip address&lt;br&gt;
and port. Both copies can respond to broadcast packet, but unicast packets&lt;br&gt;
can only be answered by one of the copies.&lt;/p&gt;
&lt;p&gt;In nova this means that guests from only one project will get responses to their&lt;br&gt;
unicast dhcp renew requests.  Unicast projects from guests in other projects get&lt;br&gt;
ignored. What happens next is different depending on the guest os.  Linux&lt;br&gt;
generally will send a broadcast packet out after the unicast fails, and so the&lt;br&gt;
only effect is a small (tens of ms) hiccup while interface is reconfigured.  It&lt;br&gt;
can be much worse than that, however. I have seen cases where Windows just gives&lt;br&gt;
up and ends up with a non-configured interface.&lt;/p&gt;
&lt;p&gt;This bug was first noticed by some users of openstack who rolled their own fix.&lt;br&gt;
Basically, on linux, if you set the SO_BINDTODEVICE socket option, it will allow&lt;br&gt;
different daemons to share the port and respond to unicast packets, as long as&lt;br&gt;
they listen on different interfaces. I managed to communicate with Simon Kelley,&lt;br&gt;
the maintainer of dnsmasq and he has integrated a fix for the issue in the&lt;br&gt;
current version of dnsmaq.&lt;/p&gt;
&lt;p&gt;I don't know how may users out there are using vlan mode, but you should be able&lt;br&gt;
to deal with this issue by upgrading dnsmasq. It would be great if the various&lt;br&gt;
distributionss could upgrade as well, or at least try to patch in the fix. If&lt;br&gt;
upgrading dnsmasq is out of the question, a possible workaround is to minimize&lt;br&gt;
lease renewals with something like the following combination of config options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# release leases immediately on terminate
force_dhcp_release=true
# one week lease time
dhcp_lease_time=604800
# two week disassociate timeout
fixed_ip_disassociate_timeout=1209600
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is also documented &lt;a href="http://docs.openstack.org/trunk/openstack-compute/admin/content/configuring-vlan-networking.html#vlan-known-issues" target="_blank"&gt; Known issue with failed DHCP leases in VLAN configuration&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Tue, 27 Aug 2013 08:50:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2013-08-27:/dhcp-lease-errors-in-vlan-mode.html</guid><category>DHCP</category><category>Network</category><category>VLAN</category></item><item><title>Openstack Brief</title><link>http://xcodest.me/openstack-brief.html</link><description>&lt;p&gt;自从Openstack诞生之日起，就受到越来越多的开发者，用户的关注。整个代码的规模和质量正在飞速的发展。随着各种功能的增加，Openstack下面已经拥有了相当多子项目，来完成各种各样的功能。本文将简单介绍各个子项目的功能和发展。所有的项目现状是基于Grizzly的版本来写的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keystone&lt;/li&gt;
&lt;li&gt;Nova&lt;/li&gt;
&lt;li&gt;Cinder&lt;/li&gt;
&lt;li&gt;Glance&lt;/li&gt;
&lt;li&gt;Openstack Network(Quantum)&lt;/li&gt;
&lt;li&gt;LBaaS&lt;/li&gt;
&lt;li&gt;Ceilometer&lt;/li&gt;
&lt;li&gt;Baremetal&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="keystone"&gt;Keystone&lt;/h1&gt;
&lt;p&gt;keystone是Openstack的认证和服务注册模块。其结构比较简单。其功能包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;认证&lt;/strong&gt; 主要功能是管理用户和用户组的信息，后端可以绑定ldap, mysql等认证方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务注册模块&lt;/strong&gt; 主要用于管理Openstack相关服务的地址，所有的服务都要先注册到Keystone中，才可以使用。它可使用基于文件的模板，也可以使用数据库存储。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Token&lt;/strong&gt; 管理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相对于其它子项目来说，keystone最近的变化并不是太大。将来一个比较大的变化就是基于domain的权限控制，届时Tenant里也可以细经出管理员和使用者的角色，并有详细的权限功能控制。&lt;/p&gt;
&lt;h1 id="nova"&gt;Nova&lt;/h1&gt;
&lt;p&gt;Nova是Openstack最早的子项目。现在其它项目如cinder, quantum(Openstack Network)都是来自于该项目。可以说这是Openstack中最复杂，最主要的部分。它负责&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户接口(nova-api)。处理来自于用户的请求，并做出合理的响应。&lt;/li&gt;
&lt;li&gt;计算调度(nova-scheduler)。用于在物理之前进行资源的调配。&lt;/li&gt;
&lt;li&gt;虚拟化的管理(nova-compute)。管理虚拟机的适配接口。通过它可以管理真实的虚拟技术驱动的机器，如KVM, XEN, Hypervisor V等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然还有一些功能如nova-network, nova-volume已经从nova项目中迁移出来，成为独立的子项目。将来一段时间的变化，主要集中在nova-network的废弃，nova-conductor的更加完善，新的api(v3)的支持，对于祼机的支持。&lt;/p&gt;
&lt;h1 id="cinder"&gt;Cinder&lt;/h1&gt;
&lt;p&gt;Cinder是由nova-volume分化而来，用于管理虚拟机的块存储(block storage), 类似AWS的EBS。其功能主要是创建，维护，删除块存储。后端可以使用LVM, glusterFs, Ceph, NFS等软件技术的存储，也可以使用NetApp, Huawei，IBM等商用解决方案。当然也可以自己编写自己存储的Driver来支持更多的存储类型。&lt;/p&gt;
&lt;h1 id="glance"&gt;Glance&lt;/h1&gt;
&lt;p&gt;Glance用于管理各种系统的镜像。他后端也可以配置各种存储方案。包括本地，swift, ceph等。&lt;/p&gt;
&lt;h1 id="openstack-network"&gt;Openstack Network.&lt;/h1&gt;
&lt;p&gt;(Quantum名称因为商标问题停用）。&lt;/p&gt;
&lt;p&gt;网络基本是Openstack最复杂的模块，涉及到的技术和协议相当多，也最容易出问题。也正因为此，很有必要将网络模块从越来越笨重的nova的拿出来。&lt;/p&gt;
&lt;p&gt;Openstack Network提示了强大的网络服务（Network-as-a-service),用来实现L2, L3层的网络。在原有的nova-network的基础之上，增加了相当多的功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加上了xvlan, gre等网络技术，并可以编写自己的插件，来增加其功能&lt;/li&gt;
&lt;li&gt;使用者可以创建更加丰富的网络模型，如私用路由器等&lt;/li&gt;
&lt;li&gt;为Qos, 流量监控等提供支持。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在Quantum还有一些问题，如HA方案不成熟，不太适用于Production。不过根据社区的计划，下一个版本(H)将会把nova-network废弃掉。所以Quantum才是真正的趋势。现在很有必要将其吃透。&lt;/p&gt;
&lt;h1 id="lbaas"&gt;LBaaS&lt;/h1&gt;
&lt;p&gt;Load-Balancer-as-a-service.在Quantum基础上实现的负载均衡。后端既可以使用haproxy,也可以使用cisco, f5等硬件。（不过我还没有功能搭建过这个服务。&lt;/p&gt;
&lt;h1 id="ceilometer"&gt;Ceilometer&lt;/h1&gt;
&lt;p&gt;Openstack的计量，计费模块。可以统计Cpu, IO, Network使用的详细情况。对公有云和私有云都有极大的好处。现在也有一个Horizon的插件，可以直接在dashboard里显示使用情况（将来，该插件会合并到horizon中）&lt;/p&gt;
&lt;h1 id="baremetal"&gt;Baremetal&lt;/h1&gt;
&lt;p&gt;增加Openstack对裸机的管理功能。可以实现直接对裸机进行系统安装，配置。模糊了虚拟化和物理机之间的界线。现在所有模块包括nova, glance, cinder都在努力增强这方面的功能。&lt;br&gt;
这个模块，我更期望是可以建立Nested-Openstack。同一个Openstack环境，既管理物理机，又自动在物理机上安装Openstack的模块来成为Openstack的一部分。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey4l</dc:creator><pubDate>Mon, 17 Jun 2013 23:08:00 +0800</pubDate><guid isPermaLink="false">tag:xcodest.me,2013-06-17:/openstack-brief.html</guid></item></channel></rss>